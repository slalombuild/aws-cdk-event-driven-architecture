{"version":"2","toolVersion":"1.80.0","snippets":{"4fd0399b4fd7c1099faf9e898ec1684c3175c16096b3531a6d5d7eb804e583e7":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books-api\")\n\napi.root.add_method(\"ANY\")\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\")\nbooks.add_method(\"POST\")\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")\nbook.add_method(\"DELETE\")","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books-api\");\n\napi.Root.AddMethod(\"ANY\");\n\nvar books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\");\nbooks.AddMethod(\"POST\");\n\nvar book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");\nbook.AddMethod(\"DELETE\");","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books-api\");\n\napi.root.addMethod(\"ANY\");\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\");\nbooks.addMethod(\"POST\");\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");\nbook.addMethod(\"DELETE\");","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books-api\"))\n\napi.Root.AddMethod(jsii.String(\"ANY\"))\n\nbooks := api.Root.AddResource(jsii.String(\"books\"))\nbooks.AddMethod(jsii.String(\"GET\"))\nbooks.AddMethod(jsii.String(\"POST\"))\n\nbook := books.AddResource(jsii.String(\"{book_id}\"))\nbook.AddMethod(jsii.String(\"GET\"))\nbook.AddMethod(jsii.String(\"DELETE\"))","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":59}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":21,"104":1,"194":10,"196":7,"197":1,"225":3,"226":5,"242":3,"243":3},"fqnsFingerprint":"ba245893404071bcbe70f40121f6d8f2908e477c7dbccf7651b1c6a66e88f4c9"},"2eaba6a5e320a4862b6b0f9a08c4279904e44543ef0012f501a75271a1892897":{"translations":{"python":{"source":"# backend: lambda.Function\n\napigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend\n)","version":"2"},"csharp":{"source":"Function backend;\n\nnew LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend\n});","version":"1"},"java":{"source":"Function backend;\n\nLambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .build();","version":"1"},"go":{"source":"var backend function\n\napigateway.NewLambdaRestApi(this, jsii.String(\"myapi\"), &LambdaRestApiProps{\n\tHandler: backend,\n})","version":"1"},"$":{"source":"declare const backend: lambda.Function;\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":81}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.LambdaRestApi","@aws-cdk/aws-apigateway.LambdaRestApiProps","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":7,"104":1,"130":1,"153":1,"169":1,"193":1,"194":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":1,"290":1},"fqnsFingerprint":"3e27e46d5a122c4bd7d6fe02ff0e7df9aa00f40fe460c2b84e902fbb6ab75ed8"},"a30531d2bf118939ef7f53aa2d06e758bb6e20f346109b41e761c617da8b7fbd":{"translations":{"python":{"source":"# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))","version":"2"},"csharp":{"source":"Function backend;\n\nvar api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nvar items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nvar item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"java":{"source":"Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"go":{"source":"var backend function\n\napi := apigateway.NewLambdaRestApi(this, jsii.String(\"myapi\"), &LambdaRestApiProps{\n\tHandler: backend,\n\tProxy: jsii.Boolean(false),\n})\n\nitems := api.Root.AddResource(jsii.String(\"items\"))\nitems.AddMethod(jsii.String(\"GET\")) // GET /items\nitems.AddMethod(jsii.String(\"POST\")) // POST /items\n\nitem := items.AddResource(jsii.String(\"{item}\"))\nitem.AddMethod(jsii.String(\"GET\")) // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(jsii.String(\"DELETE\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")))","version":"1"},"$":{"source":"declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":91}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaRestApi","@aws-cdk/aws-apigateway.LambdaRestApiProps","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":26,"91":1,"104":1,"130":1,"153":1,"169":1,"193":1,"194":9,"196":6,"197":2,"225":4,"226":4,"242":4,"243":4,"281":2,"290":1},"fqnsFingerprint":"1572ad9057c4e93fa763116070b3d2b930b613b2fb0275bdcad2854df4f1a049"},"d819d3b744072040d45e398edfd8f8b6c298adda9d8e9bce08ea2721f0f63117":{"translations":{"python":{"source":"state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)","version":"2"},"csharp":{"source":"var stateMachineDefinition = new Pass(this, \"PassState\");\n\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});","version":"1"},"java":{"source":"Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();","version":"1"},"go":{"source":"stateMachineDefinition := stepfunctions.NewPass(this, jsii.String(\"PassState\"))\n\nstateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: stateMachineDefinition,\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n})\n\napigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tDeploy: jsii.Boolean(true),\n\tStateMachine: stateMachine,\n})","version":"1"},"$":{"source":"const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":135}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":19,"104":3,"106":1,"153":1,"169":1,"193":2,"194":5,"197":3,"225":2,"226":1,"242":2,"243":2,"281":4},"fqnsFingerprint":"ee5c8f5600946c6b561ea2869e1e3b205d70e8931131fc3fbee3a1fcb494fdfa"},"d631b1d0803a4eba2fdb11e61e7d2695d87052353c0ecd83aefbf946ef79ccf2":{"translations":{"python":{"source":"apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    authorizer=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    Authorizer = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});","version":"1"},"java":{"source":"StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .authorizer(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();","version":"1"},"go":{"source":"apigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tStateMachine: machine,\n\tHeaders: jsii.Boolean(true),\n\tPath: jsii.Boolean(false),\n\tQuerystring: jsii.Boolean(false),\n\tAuthorizer: jsii.Boolean(false),\n\tRequestContext: &RequestContext{\n\t\tCaller: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t},\n})","version":"1"},"$":{"source":"new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  authorizer: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":190}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.RequestContext","@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.StateMachineType","constructs.Construct"],"fullSource":"import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  authorizer: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"91":3,"104":1,"106":3,"193":2,"194":1,"197":1,"226":1,"281":8},"fqnsFingerprint":"410f8fe83f7b51d26bad3c9599e15736e577ef2cdc75d207bc9053dc6a904101"},"70474cb3b94cee59d0d164f73644b0532c9db664a84020bf93b212f5ee48fdc8":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        var restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        var petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        var booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        var api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        var method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        var api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        var method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        var deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());","version":"1"},"java":{"source":"import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\nimport \"github.com/aws-samples/dummy/lib\"\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\ntype rootStack struct {\n\tstack\n}\n\nfunc newRootStack(scope construct) *rootStack {\n\tthis := &rootStack{}\n\tnewStack_Override(this, scope, jsii.String(\"integ-restapi-import-RootStack\"))\n\n\trestApi := lib.NewRestApi(this, jsii.String(\"RestApi\"), &RestApiProps{\n\t\tDeploy: jsii.Boolean(false),\n\t})\n\trestApi.Root.AddMethod(jsii.String(\"ANY\"))\n\n\tpetsStack := NewPetsStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.RestApiId,\n\t\trootResourceId: restApi.RestApiRootResourceId,\n\t})\n\tbooksStack := NewBooksStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.*RestApiId,\n\t\trootResourceId: restApi.*RestApiRootResourceId,\n\t})\n\tNewDeployStack(this, &deployStackProps{\n\t\trestApiId: restApi.*RestApiId,\n\t\tmethods: petsStack.methods.concat(booksStack.methods),\n\t})\n\n\tawscdkcore.NewCfnOutput(this, jsii.String(\"PetsURL\"), &CfnOutputProps{\n\t\tValue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/pets\", restApi.*RestApiId, this.Region),\n\t})\n\n\tawscdkcore.NewCfnOutput(this, jsii.String(\"BooksURL\"), &CfnOutputProps{\n\t\tValue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/books\", restApi.*RestApiId, this.*Region),\n\t})\n\treturn this\n}\n\ntype resourceNestedStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\trootResourceId *string\n}\n\ntype petsStack struct {\n\tnestedStack\n\tmethods []method\n}\n\nfunc newPetsStack(scope construct, props resourceNestedStackProps) *petsStack {\n\tthis := &petsStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-PetsStack\"), props)\n\n\tapi := lib.RestApi_FromRestApiAttributes(this, jsii.String(\"RestApi\"), &RestApiAttributes{\n\t\tRestApiId: props.restApiId,\n\t\tRootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.Root.AddResource(jsii.String(\"pets\")).AddMethod(jsii.String(\"GET\"), lib.NewMockIntegration(&IntegrationOptions{\n\t\tIntegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &MethodOptions{\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype booksStack struct {\n\tnestedStack\n\tmethods []*method\n}\n\nfunc newBooksStack(scope construct, props resourceNestedStackProps) *booksStack {\n\tthis := &booksStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-BooksStack\"), props)\n\n\tapi := lib.RestApi_FromRestApiAttributes(this, jsii.String(\"RestApi\"), &RestApiAttributes{\n\t\tRestApiId: props.restApiId,\n\t\tRootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.Root.AddResource(jsii.String(\"books\")).AddMethod(jsii.String(\"GET\"), lib.NewMockIntegration(&IntegrationOptions{\n\t\tIntegrationResponses: []*integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &MethodOptions{\n\t\tMethodResponses: []*methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype deployStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\tmethods []*method\n}\n\ntype deployStack struct {\n\tnestedStack\n}\n\nfunc newDeployStack(scope construct, props deployStackProps) *deployStack {\n\tthis := &deployStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-DeployStack\"), props)\n\n\tdeployment := lib.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\t\tApi: *lib.RestApi_FromRestApiId(this, jsii.String(\"RestApi\"), props.restApiId),\n\t})\n\tif *props.methods {\n\t\tfor _, method := range *props.methods {\n\t\t\tdeployment.Node.AddDependency(method)\n\t\t}\n\t}\n\tlib.NewStage(this, jsii.String(\"Stage\"), &StageProps{\n\t\tDeployment: Deployment,\n\t})\n\treturn this\n}\n\nNewRootStack(awscdkcore.NewApp())","version":"1"},"$":{"source":"import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":236}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.IRestApi#root","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes","@aws-cdk/aws-apigateway.RestApi#fromRestApiId","@aws-cdk/aws-apigateway.RestApi#restApiId","@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiAttributes","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/core.App","@aws-cdk/core.CfnOutput","@aws-cdk/core.CfnOutputProps","@aws-cdk/core.Construct#node","@aws-cdk/core.ConstructNode#addDependency","@aws-cdk/core.IDependable","@aws-cdk/core.NestedStack","@aws-cdk/core.NestedStackProps","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());","syntaxKindCounter":{"10":28,"15":2,"16":2,"17":2,"57":1,"75":168,"91":1,"102":4,"104":15,"119":2,"138":6,"143":3,"156":7,"158":4,"159":2,"162":4,"169":10,"174":3,"192":6,"193":20,"194":38,"196":16,"197":12,"211":2,"216":6,"221":4,"223":6,"225":8,"226":13,"227":1,"232":1,"242":9,"243":9,"245":4,"246":2,"254":3,"255":3,"257":3,"258":12,"279":6,"281":28,"282":1,"290":1},"fqnsFingerprint":"07fb54b20acc392c7ce60026a9769a12ea2ddcc1b6c5dd78678df872d6efdc81"},"35085d5dae8ad75ae1c8d2836861b17932e24ba368084fa3f11cabb16fe38d78":{"translations":{"python":{"source":"# get_book_handler: lambda.Function\n# book: apigateway.Resource\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler)\nbook.add_method(\"GET\", get_book_integration)","version":"2"},"csharp":{"source":"Function getBookHandler;\nResource book;\n\n\nvar getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.AddMethod(\"GET\", getBookIntegration);","version":"1"},"java":{"source":"Function getBookHandler;\nResource book;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.addMethod(\"GET\", getBookIntegration);","version":"1"},"go":{"source":"var getBookHandler function\nvar book resource\n\n\ngetBookIntegration := apigateway.NewLambdaIntegration(getBookHandler)\nbook.AddMethod(jsii.String(\"GET\"), getBookIntegration)","version":"1"},"$":{"source":"declare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":382}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":13,"130":2,"153":2,"169":2,"194":2,"196":1,"197":1,"225":3,"226":1,"242":3,"243":3,"290":1},"fqnsFingerprint":"0bcc7f00f8a3a60791b97250e6a688b33e81494aa149bd4ee9b92bbeec9419c5"},"a5e3f0eb9cc1cf4888ce6752ec22d2f93225157b21fdb778d574f347c50ab051":{"translations":{"python":{"source":"# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)","version":"2"},"csharp":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nvar getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});","version":"1"},"java":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();","version":"1"},"go":{"source":"var getBookHandler function\nvar getBookIntegration lambdaIntegration\n\n\ngetBookIntegration := apigateway.NewLambdaIntegration(getBookHandler, &LambdaIntegrationOptions{\n\tContentHandling: apigateway.ContentHandling_CONVERT_TO_TEXT,\n\t // convert to base64\n\tCredentialsPassthrough: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":392}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.LambdaIntegrationOptions","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":15,"106":1,"130":2,"153":2,"169":2,"193":1,"194":3,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6b94f8e090b115464f10d64b8a3f0677009e29a06ef46c8273800c5757b29775"},"316d3f6198788a5c766e4781bf11eb581bde5fea82bf78687eb7e892f31c2b8d":{"translations":{"python":{"source":"# book: apigateway.Resource\n# get_book_integration: apigateway.LambdaIntegration\n\n\nbook.add_method(\"GET\", get_book_integration,\n    authorization_type=apigateway.AuthorizationType.IAM,\n    api_key_required=True\n)","version":"2"},"csharp":{"source":"Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.AddMethod(\"GET\", getBookIntegration, new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM,\n    ApiKeyRequired = true\n});","version":"1"},"java":{"source":"Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.addMethod(\"GET\", getBookIntegration, MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .apiKeyRequired(true)\n        .build());","version":"1"},"go":{"source":"var book resource\nvar getBookIntegration lambdaIntegration\n\n\nbook.AddMethod(jsii.String(\"GET\"), getBookIntegration, &MethodOptions{\n\tAuthorizationType: apigateway.AuthorizationType_IAM,\n\tApiKeyRequired: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":404}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#IAM","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":14,"106":1,"130":2,"153":2,"169":2,"193":1,"194":3,"196":1,"225":2,"226":1,"242":2,"243":2,"281":2,"290":1},"fqnsFingerprint":"ef4cc212286fec2560f64d99c948c79e512fbd12b64af85045150f11e18f58fd"},"3eb9ddc390d2d2751bdba892603ea67c398de0edb5b14c11bbc1be53ff7fbc1e":{"translations":{"python":{"source":"get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)","version":"2"},"csharp":{"source":"var getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});","version":"1"},"java":{"source":"AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();","version":"1"},"go":{"source":"getMessageIntegration := apigateway.NewAwsIntegration(&AwsIntegrationProps{\n\tService: jsii.String(\"sqs\"),\n\tPath: jsii.String(\"queueName\"),\n\tRegion: jsii.String(\"eu-west-1\"),\n})","version":"1"},"$":{"source":"const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":417}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AwsIntegration","@aws-cdk/aws-apigateway.AwsIntegrationProps"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":6,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"f9d256f6c0abedea087741bcc43df114cf453cd8cea6fa2c375b6973d556419a"},"197265bdcdde35bead095a8d1c7da8e380915ed3b2bec826ad49f29d8635377c":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\n\n\nvar api = new RestApi(this, \"hello-api\");\n\nvar v1 = api.Root.AddResource(\"v1\");\nvar echo = v1.AddResource(\"echo\");\nvar echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nvar plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nvar key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);","version":"1"},"java":{"source":"LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);","version":"1"},"go":{"source":"var integration lambdaIntegration\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"))\n\nv1 := api.Root.AddResource(jsii.String(\"v1\"))\necho := v1.AddResource(jsii.String(\"echo\"))\nechoMethod := echo.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(true),\n})\n\nplan := api.AddUsagePlan(jsii.String(\"UsagePlan\"), &UsagePlanProps{\n\tName: jsii.String(\"Easy\"),\n\tThrottle: &ThrottleSettings{\n\t\tRateLimit: jsii.Number(10),\n\t\tBurstLimit: jsii.Number(2),\n\t},\n})\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"))\nplan.addApiKey(key)","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":433}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiBase#addApiKey","@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlanProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":7,"75":31,"104":1,"106":1,"130":1,"153":1,"169":1,"193":3,"194":8,"196":6,"197":1,"225":7,"226":1,"242":7,"243":7,"281":5,"290":1},"fqnsFingerprint":"b5eccba18bba8328a1c6cb6b3407303e7b97dc1db5e0b987c053c629a84c218a"},"5ea2d245038589a627e01787d0e3167696dac12aae0d9cb6371454240241be73":{"translations":{"python":{"source":"# plan: apigateway.UsagePlan\n# api: apigateway.RestApi\n# echo_method: apigateway.Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)","version":"2"},"csharp":{"source":"UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});","version":"1"},"java":{"source":"UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());","version":"1"},"go":{"source":"var plan usagePlan\nvar api restApi\nvar echoMethod method\n\n\nplan.AddApiStage(&UsagePlanPerApiStage{\n\tStage: api.DeploymentStage,\n\tThrottle: []throttlingPerMethod{\n\t\t&throttlingPerMethod{\n\t\t\tMethod: echoMethod,\n\t\t\tThrottle: &ThrottleSettings{\n\t\t\t\tRateLimit: jsii.Number(10),\n\t\t\t\tBurstLimit: jsii.Number(2),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":456}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.RestApiBase#deploymentStage","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan#addApiStage","@aws-cdk/aws-apigateway.UsagePlanPerApiStage"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"75":20,"130":3,"153":3,"169":3,"192":1,"193":3,"194":2,"196":1,"225":3,"226":1,"242":3,"243":3,"281":6,"290":1},"fqnsFingerprint":"c63e0c8318e3ad2c29fbf047d749e888a8c40b8a6c65cbfeba9d83745508e7ee"},"618b1e6d2fe6274f96ac3462f9855eaa8c97cdaa1ec6799269372e4891bca8e2":{"translations":{"python":{"source":"imported_usage_plan = apigateway.UsagePlan.from_usage_plan_id(self, \"imported-usage-plan\", \"<usage-plan-key-id>\")","version":"2"},"csharp":{"source":"var importedUsagePlan = UsagePlan.FromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");","version":"1"},"java":{"source":"IUsagePlan importedUsagePlan = UsagePlan.fromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");","version":"1"},"go":{"source":"importedUsagePlan := apigateway.UsagePlan_FromUsagePlanId(this, jsii.String(\"imported-usage-plan\"), jsii.String(\"<usage-plan-key-id>\"))","version":"1"},"$":{"source":"const importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":477}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IUsagePlan","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlan#fromUsagePlanId","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"104":1,"194":2,"196":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"c6e49787614f1b11a028f6d8f85b51d6cd84253c39312c90d19507291a61fa19"},"c28981862422025fdf6ea03211c6af55b84788cba48d3c618d6a5846f7b350cd":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)","version":"2"},"csharp":{"source":"RestApi api;\n\nvar key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});","version":"1"},"java":{"source":"RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());","version":"1"},"go":{"source":"var api restApi\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"), &ApiKeyOptions{\n\tApiKeyName: jsii.String(\"myApiKey1\"),\n\tValue: jsii.String(\"MyApiKeyThatIsAtLeast20Characters\"),\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":484}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiKeyOptions","@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.RestApiBase#addApiKey"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":8,"130":1,"153":1,"169":1,"193":1,"194":1,"196":1,"225":2,"242":2,"243":2,"281":2,"290":1},"fqnsFingerprint":"26570f4189a8d3a525affe26fe5705654d0e8d027973369da7d6c46b241ccbf9"},"245d9ea723386e50babafe53326ca1cea5fb4c76ea287e4f3db0d7e1e519c12d":{"translations":{"python":{"source":"imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")","version":"2"},"csharp":{"source":"var importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");","version":"1"},"java":{"source":"IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");","version":"1"},"go":{"source":"importedKey := apigateway.ApiKey_FromApiKeyId(this, jsii.String(\"imported-key\"), jsii.String(\"<api-key-id>\"))","version":"1"},"$":{"source":"const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":494}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiKey","@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId","@aws-cdk/aws-apigateway.IApiKey","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"104":1,"194":2,"196":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"4bdd47cba1d35c4fb8a33399fed60c385d73277a038a97e0f6d12705451148e8"},"89940aea7ab63592ca64bce7cd6f2598e9ce25f084d711948143b12436b8df6d":{"translations":{"python":{"source":"# imported_key: apigateway.ApiKey\n# lambda_fn: lambda.Function\n\nimported_key.grant_read(lambda_fn)","version":"2"},"csharp":{"source":"ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.GrantRead(lambdaFn);","version":"1"},"java":{"source":"ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.grantRead(lambdaFn);","version":"1"},"go":{"source":"var importedKey apiKey\nvar lambdaFn function\n\nimportedKey.grantRead(lambdaFn)","version":"1"},"$":{"source":"declare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\nimportedKey.grantRead(lambdaFn);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":501}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nimportedKey.grantRead(lambdaFn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":9,"130":2,"153":2,"169":2,"194":1,"196":1,"225":2,"226":1,"242":2,"243":2,"290":1},"fqnsFingerprint":"1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"},"916ce623a432bf9ec0a81a5f56bd8766872dc8b5dab729aa045703843057e32d":{"translations":{"python":{"source":"# usageplan: apigateway.UsagePlan\n# api_key: apigateway.ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)","version":"2"},"csharp":{"source":"UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});","version":"1"},"java":{"source":"UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());","version":"1"},"go":{"source":"var usageplan usagePlan\nvar apiKey apiKey\n\n\nusageplan.addApiKey(apiKey, &AddApiKeyOptions{\n\tOverrideLogicalId: jsii.String(\"...\"),\n})","version":"1"},"$":{"source":"declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":519}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AddApiKeyOptions","@aws-cdk/aws-apigateway.IApiKey"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":10,"130":2,"153":2,"169":2,"193":1,"194":1,"196":1,"225":2,"226":1,"242":2,"243":2,"281":1,"290":1},"fqnsFingerprint":"39a0bc0cdcf52ed17618d6dc6720ecabd2f7da748e92be70732b06aabaccfa55"},"5d7a97eb79c0c5b95575c110fb43d4d9093e8f83d3390b6abef8db5f7790625a":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\nvar key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();","version":"1"},"go":{"source":"var api restApi\n\n\nkey := apigateway.NewRateLimitedApiKey(this, jsii.String(\"rate-limited-api-key\"), &RateLimitedApiKeyProps{\n\tCustomerId: jsii.String(\"hello-customer\"),\n\tResources: []iRestApi{\n\t\tapi,\n\t},\n\tQuota: &QuotaSettings{\n\t\tLimit: jsii.Number(10000),\n\t\tPeriod: apigateway.Period_MONTH,\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":539}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Period","@aws-cdk/aws-apigateway.Period#MONTH","@aws-cdk/aws-apigateway.QuotaSettings","@aws-cdk/aws-apigateway.RateLimitedApiKey","@aws-cdk/aws-apigateway.RateLimitedApiKeyProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":2,"75":15,"104":1,"130":1,"153":1,"169":1,"192":1,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":5,"290":1},"fqnsFingerprint":"291c3985d510a494a2db5bf176d9fdc5bfcff01b8c71c77effd4965445031bb5"},"4a94f51cb6c12b1979c0b735c7f28c34aca1c5bfbcc4425230d58f2d41543f6a":{"translations":{"python":{"source":"hello = lambda_.Function(self, \"hello\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"hello.handler\",\n    code=lambda_.Code.from_asset(\"lambda\")\n)\n\napi = apigateway.RestApi(self, \"hello-api\")\nresource = api.root.add_resource(\"v1\")","version":"2"},"csharp":{"source":"var hello = new Function(this, \"hello\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"hello.handler\",\n    Code = Code.FromAsset(\"lambda\")\n});\n\nvar api = new RestApi(this, \"hello-api\", new RestApiProps { });\nvar resource = api.Root.AddResource(\"v1\");","version":"1"},"java":{"source":"Function hello = Function.Builder.create(this, \"hello\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"hello.handler\")\n        .code(Code.fromAsset(\"lambda\"))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"hello-api\").build();\nResource resource = api.root.addResource(\"v1\");","version":"1"},"go":{"source":"hello := lambda.NewFunction(this, jsii.String(\"hello\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"hello.handler\"),\n\tCode: lambda.Code_FromAsset(jsii.String(\"lambda\")),\n})\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"), &RestApiProps{\n})\nresource := api.Root.AddResource(jsii.String(\"v1\"))","version":"1"},"$":{"source":"const hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":557}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":19,"104":2,"193":2,"194":8,"196":2,"197":2,"225":3,"242":3,"243":3,"281":3},"fqnsFingerprint":"409dd24d77af1092a5edbe51faad9239f4c723c209fda695be69bd6ac091aa2e"},"db6c4f6a6eb35aa883a060075269c67181db729f6c3d0dedd2bc1e3ca462438f":{"translations":{"python":{"source":"# hello: lambda.Function\n\n\nintegration = apigateway.LambdaIntegration(hello,\n    proxy=False,\n    request_parameters={\n        # You can define mapping parameters from your method to your integration\n        # - Destination parameters (the key) are the integration parameters (used in mappings)\n        # - Source parameters (the value) are the source request parameters or expressions\n        # @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        \"integration.request.querystring.who\": \"method.request.querystring.who\"\n    },\n    allow_test_invoke=True,\n    request_templates={\n        # You can define a mapping that will build a payload for your integration, based\n        #  on the integration parameters that you have specified\n        # Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        \"application/json\": JSON.stringify({\"action\": \"sayHello\", \"poll_id\": \"$util.escapeJavaScript($input.params('who'))\"})\n    },\n    # This parameter defines the behavior of the engine is no suitable response template is found\n    passthrough_behavior=apigateway.PassthroughBehavior.NEVER,\n    integration_responses=[apigateway.IntegrationResponse(\n        # Successful response from the Lambda function, no filter defined\n        #  - the selectionPattern filter only tests the error message\n        # We will set the response status code to 200\n        status_code=\"200\",\n        response_templates={\n            # This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            # Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            \"application/json\": JSON.stringify({\"state\": \"ok\", \"greeting\": \"$util.escapeJavaScript($input.body)\"})\n        },\n        response_parameters={\n            # We can map response parameters\n            # - Destination parameters (the key) are the response parameters (used in mappings)\n            # - Source parameters (the value) are the integration response parameters or expressions\n            \"method.response.header.Content-Type\": \"'application/json'\",\n            \"method.response.header.Access-Control-Allow-Origin\": \"'*'\",\n            \"method.response.header.Access-Control-Allow-Credentials\": \"'true'\"\n        }\n    ), apigateway.IntegrationResponse(\n        # For errors, we check if the error message is not empty, get the error data\n        selection_pattern=\"(\\n|.)+\",\n        # We will set the response status code to 200\n        status_code=\"400\",\n        response_templates={\n            \"application/json\": JSON.stringify({\"state\": \"error\", \"message\": \"$util.escapeJavaScript($input.path('$.errorMessage'))\"})\n        },\n        response_parameters={\n            \"method.response.header.Content-Type\": \"'application/json'\",\n            \"method.response.header.Access-Control-Allow-Origin\": \"'*'\",\n            \"method.response.header.Access-Control-Allow-Credentials\": \"'true'\"\n        }\n    )\n    ]\n)","version":"2"},"csharp":{"source":"Function hello;\n\n\nvar integration = new LambdaIntegration(hello, new LambdaIntegrationOptions {\n    Proxy = false,\n    RequestParameters = new Dictionary<string, string> {\n        // You can define mapping parameters from your method to your integration\n        // - Destination parameters (the key) are the integration parameters (used in mappings)\n        // - Source parameters (the value) are the source request parameters or expressions\n        // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        { \"integration.request.querystring.who\", \"method.request.querystring.who\" }\n    },\n    AllowTestInvoke = true,\n    RequestTemplates = new Dictionary<string, string> {\n        // You can define a mapping that will build a payload for your integration, based\n        //  on the integration parameters that you have specified\n        // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"action\", \"sayHello\" }, { \"pollId\", \"$util.escapeJavaScript($input.params('who'))\" } }) }\n    },\n    // This parameter defines the behavior of the engine is no suitable response template is found\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    IntegrationResponses = new [] { new IntegrationResponse {\n        // Successful response from the Lambda function, no filter defined\n        //  - the selectionPattern filter only tests the error message\n        // We will set the response status code to 200\n        StatusCode = \"200\",\n        ResponseTemplates = new Dictionary<string, string> {\n            // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"ok\" }, { \"greeting\", \"$util.escapeJavaScript($input.body)\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            // We can map response parameters\n            // - Destination parameters (the key) are the response parameters (used in mappings)\n            // - Source parameters (the value) are the integration response parameters or expressions\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    }, new IntegrationResponse {\n        // For errors, we check if the error message is not empty, get the error data\n        SelectionPattern = @\"(\n        |.)+\",\n        // We will set the response status code to 200\n        StatusCode = \"400\",\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"error\" }, { \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    } }\n});","version":"1"},"java":{"source":"Function hello;\n\n\nLambdaIntegration integration = LambdaIntegration.Builder.create(hello)\n        .proxy(false)\n        .requestParameters(Map.of(\n                // You can define mapping parameters from your method to your integration\n                // - Destination parameters (the key) are the integration parameters (used in mappings)\n                // - Source parameters (the value) are the source request parameters or expressions\n                // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n                \"integration.request.querystring.who\", \"method.request.querystring.who\"))\n        .allowTestInvoke(true)\n        .requestTemplates(Map.of(\n                // You can define a mapping that will build a payload for your integration, based\n                //  on the integration parameters that you have specified\n                // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                \"application/json\", JSON.stringify(Map.of(\"action\", \"sayHello\", \"pollId\", \"$util.escapeJavaScript($input.params('who'))\"))))\n        // This parameter defines the behavior of the engine is no suitable response template is found\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .integrationResponses(List.of(IntegrationResponse.builder()\n                // Successful response from the Lambda function, no filter defined\n                //  - the selectionPattern filter only tests the error message\n                // We will set the response status code to 200\n                .statusCode(\"200\")\n                .responseTemplates(Map.of(\n                        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n                        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"ok\", \"greeting\", \"$util.escapeJavaScript($input.body)\"))))\n                .responseParameters(Map.of(\n                        // We can map response parameters\n                        // - Destination parameters (the key) are the response parameters (used in mappings)\n                        // - Source parameters (the value) are the integration response parameters or expressions\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build(), IntegrationResponse.builder()\n                // For errors, we check if the error message is not empty, get the error data\n                .selectionPattern(\"(\\n|.)+\")\n                // We will set the response status code to 200\n                .statusCode(\"400\")\n                .responseTemplates(Map.of(\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"error\", \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\"))))\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build()))\n        .build();","version":"1"},"go":{"source":"var hello function\n\n\nintegration := apigateway.NewLambdaIntegration(hello, &LambdaIntegrationOptions{\n\tProxy: jsii.Boolean(false),\n\tRequestParameters: map[string]*string{\n\t\t// You can define mapping parameters from your method to your integration\n\t\t// - Destination parameters (the key) are the integration parameters (used in mappings)\n\t\t// - Source parameters (the value) are the source request parameters or expressions\n\t\t// @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n\t\t\"integration.request.querystring.who\": jsii.String(\"method.request.querystring.who\"),\n\t},\n\tAllowTestInvoke: jsii.Boolean(true),\n\tRequestTemplates: map[string]*string{\n\t\t// You can define a mapping that will build a payload for your integration, based\n\t\t//  on the integration parameters that you have specified\n\t\t// Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\t\t\"application/json\": JSON.stringify(map[string]*string{\n\t\t\t\"action\": jsii.String(\"sayHello\"),\n\t\t\t\"pollId\": jsii.String(\"$util.escapeJavaScript($input.params('who'))\"),\n\t\t}),\n\t},\n\t// This parameter defines the behavior of the engine is no suitable response template is found\n\tPassthroughBehavior: apigateway.PassthroughBehavior_NEVER,\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\t// Successful response from the Lambda function, no filter defined\n\t\t\t//  - the selectionPattern filter only tests the error message\n\t\t\t// We will set the response status code to 200\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t// This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n\t\t\t\t// Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\t\t\t\t\"application/json\": JSON.stringify(map[string]*string{\n\t\t\t\t\t\"state\": jsii.String(\"ok\"),\n\t\t\t\t\t\"greeting\": jsii.String(\"$util.escapeJavaScript($input.body)\"),\n\t\t\t\t}),\n\t\t\t},\n\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t// We can map response parameters\n\t\t\t\t// - Destination parameters (the key) are the response parameters (used in mappings)\n\t\t\t\t// - Source parameters (the value) are the integration response parameters or expressions\n\t\t\t\t\"method.response.header.Content-Type\": jsii.String(\"'application/json'\"),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.String(\"'*'\"),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.String(\"'true'\"),\n\t\t\t},\n\t\t},\n\t\t&integrationResponse{\n\t\t\t// For errors, we check if the error message is not empty, get the error data\n\t\t\tSelectionPattern: jsii.String(\"(\\n|.)+\"),\n\t\t\t// We will set the response status code to 200\n\t\t\tStatusCode: jsii.String(\"400\"),\n\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\"application/json\": JSON.stringify(map[string]*string{\n\t\t\t\t\t\"state\": jsii.String(\"error\"),\n\t\t\t\t\t\"message\": jsii.String(\"$util.escapeJavaScript($input.path('$.errorMessage'))\"),\n\t\t\t\t}),\n\t\t\t},\n\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\"method.response.header.Content-Type\": jsii.String(\"'application/json'\"),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.String(\"'*'\"),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.String(\"'true'\"),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const hello: lambda.Function;\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":570}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.LambdaIntegrationOptions","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hello: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":26,"75":35,"91":1,"106":1,"130":1,"153":1,"169":1,"192":1,"193":12,"194":6,"196":3,"197":1,"225":2,"242":2,"243":2,"281":29,"290":1},"fqnsFingerprint":"cc2421a292c78aca6a10d0396f4da0c4f33fd8844693a4947bc6ff68955c9247"},"1770d7e910f52898ed79714cdc0969bf9b4bd9f1cbba70998c3affd645ee2267":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":632}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"ed589b7a75fd3e1ca230dea114d2eb8779b33df23bf485cb63d629cb66097e3a":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n# resource: apigateway.Resource\n# response_model: apigateway.Model\n# error_response_model: apigateway.Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header.Content-Type\": True,\n            \"method.response.header.Access-Control-Allow-Origin\": True,\n            \"method.response.header.Access-Control-Allow-Credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header.Content-Type\": True,\n            \"method.response.header.Access-Control-Allow-Origin\": True,\n            \"method.response.header.Access-Control-Allow-Credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});","version":"1"},"java":{"source":"LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());","version":"1"},"go":{"source":"var integration lambdaIntegration\nvar resource resource\nvar responseModel model\nvar errorResponseModel model\n\n\nresource.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\t// We can mark the parameters as required\n\tRequestParameters: map[string]*bool{\n\t\t\"method.request.querystring.who\": jsii.Boolean(true),\n\t},\n\t// we can set request validator options like below\n\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\tRequestValidatorName: jsii.String(\"test-validator\"),\n\t\tValidateRequestBody: jsii.Boolean(true),\n\t\tValidateRequestParameters: jsii.Boolean(false),\n\t},\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\t// Successful response from the integration\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t// Define what parameters are allowed or not\n\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\"method.response.header.Content-Type\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.Boolean(true),\n\t\t\t},\n\t\t\t// Validate the schema on the response\n\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\"application/json\": responseModel,\n\t\t\t},\n\t\t},\n\t\t&methodResponse{\n\t\t\t// Same thing for the error responses\n\t\t\tStatusCode: jsii.String(\"400\"),\n\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\"method.response.header.Content-Type\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.Boolean(true),\n\t\t\t},\n\t\t\tResponseModels: map[string]*iModel{\n\t\t\t\t\"application/json\": errorResponseModel,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":669}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":13,"75":29,"91":1,"106":8,"130":4,"153":4,"169":4,"192":1,"193":9,"194":1,"196":1,"225":4,"226":1,"242":4,"243":4,"281":21,"290":1},"fqnsFingerprint":"d24fe27168c3503a60ad2e38a3b9257c964ad74d88eeebb1b55ea8f24068eb23"},"9ce1fa303b7589f417f7bd27f7c7f8a951cdaf30d2edbdf5c9efe8305d0c0dda":{"translations":{"python":{"source":"# books_backend: apigateway.LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")","version":"2"},"csharp":{"source":"LambdaIntegration booksBackend;\n\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nvar books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nvar book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");","version":"1"},"java":{"source":"LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");","version":"1"},"go":{"source":"var booksBackend lambdaIntegration\n\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDefaultIntegration: booksBackend,\n})\n\nbooks := api.Root.AddResource(jsii.String(\"books\"))\nbooks.AddMethod(jsii.String(\"GET\")) // integrated with `booksBackend`\nbooks.AddMethod(jsii.String(\"POST\")) // integrated with `booksBackend`\n\nbook := books.AddResource(jsii.String(\"{book_id}\"))\nbook.AddMethod(jsii.String(\"GET\"))","version":"1"},"$":{"source":"declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":734}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":6,"75":21,"104":1,"130":1,"153":1,"169":1,"193":1,"194":7,"196":5,"197":1,"225":4,"226":3,"242":4,"243":4,"281":1,"290":1},"fqnsFingerprint":"aa27f063bda130e88e5ba375bc471de6d87506691d9120c53164880efbabb2fb"},"0539e3468eec25ab01ad21ea98eb163bc02419369dbb38ceac2ea275728038a4":{"translations":{"python":{"source":"# books: apigateway.Resource\n\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.COGNITO,\n    authorization_scopes=[\"Scope1\", \"Scope2\"]\n)","version":"2"},"csharp":{"source":"Resource books;\n\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.COGNITO,\n    AuthorizationScopes = new [] { \"Scope1\", \"Scope2\" }\n});","version":"1"},"java":{"source":"Resource books;\n\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.COGNITO)\n        .authorizationScopes(List.of(\"Scope1\", \"Scope2\"))\n        .build());","version":"1"},"go":{"source":"var books resource\n\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizationType: apigateway.AuthorizationType_COGNITO,\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"Scope1\"),\n\t\tjsii.String(\"Scope2\"),\n\t},\n})","version":"1"},"$":{"source":"declare const books: apigateway.Resource;\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":756}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#COGNITO","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":12,"130":1,"153":1,"169":1,"192":1,"193":1,"194":4,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":2,"290":1},"fqnsFingerprint":"fcdbc564a91f7ab1a9389441d5212f9bee09896cd7c6dda6c2995540cf752192"},"1c543ddf834ffbf0a405f3ffa14df2a8c4cd15ed1ca0f9a9e72c86d8ff7d9f4f":{"translations":{"python":{"source":"# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)","version":"2"},"csharp":{"source":"Resource resource;\nFunction handler;\n\nvar proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});","version":"1"},"java":{"source":"Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());","version":"1"},"go":{"source":"var resource resource\nvar handler function\n\nproxy := resource.AddProxy(&ProxyResourceOptions{\n\tDefaultIntegration: apigateway.NewLambdaIntegration(handler),\n\n\t// \"false\" will require explicitly adding methods on the `proxy` resource\n\tAnyMethod: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":770}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.ProxyResource","@aws-cdk/aws-apigateway.ProxyResourceOptions","@aws-cdk/aws-apigateway.ResourceBase#addProxy","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":14,"106":1,"130":2,"153":2,"169":2,"193":1,"194":2,"196":1,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"f6e129c0ab775aff4ed483deeca1aad6e5d1c5583d7e91d3247f352b9c8527ac"},"75142646447bd454d2115e268452cb8aa8b85f350168c7b0330782dec7bd17a7":{"translations":{"python":{"source":"# books: apigateway.Resource\n# iam_user: iam.User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))","version":"2"},"csharp":{"source":"Resource books;\nUser iamUser;\n\n\nvar getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));","version":"1"},"java":{"source":"Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());","version":"1"},"go":{"source":"var books resource\nvar iamUser user\n\n\ngetBooks := books.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizationType: apigateway.AuthorizationType_IAM,\n})\n\niamUser.AttachInlinePolicy(iam.NewPolicy(this, jsii.String(\"AllowBooks\"), &PolicyProps{\n\tStatements: []policyStatement{\n\t\tiam.NewPolicyStatement(&PolicyStatementProps{\n\t\t\tActions: []*string{\n\t\t\t\tjsii.String(\"execute-api:Invoke\"),\n\t\t\t},\n\t\t\tEffect: iam.Effect_ALLOW,\n\t\t\tResources: []*string{\n\t\t\t\tgetBooks.methodArn,\n\t\t\t},\n\t\t}),\n\t},\n}))","version":"1"},"$":{"source":"declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":790}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#IAM","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-iam.Effect","@aws-cdk/aws-iam.Effect#ALLOW","@aws-cdk/aws-iam.Policy","@aws-cdk/aws-iam.PolicyProps","@aws-cdk/aws-iam.PolicyStatement","@aws-cdk/aws-iam.PolicyStatementProps","@aws-cdk/aws-iam.User#attachInlinePolicy","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":30,"104":1,"130":2,"153":2,"169":2,"192":3,"193":3,"194":10,"196":2,"197":3,"225":3,"226":1,"242":3,"243":3,"281":5,"290":1},"fqnsFingerprint":"dd381b2eef4d08015a809df67a76fe1b72deabfd19903a200b61adcb96ac1bc2"},"b23bcd6e448ef607bcca3e58e424511be4f6952fee21cb57c03073f9dba70576":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewTokenAuthorizer(this, jsii.String(\"booksAuthorizer\"), &TokenAuthorizerProps{\n\tHandler: authFn,\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":827}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.TokenAuthorizer","@aws-cdk/aws-apigateway.TokenAuthorizerProps","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"130":2,"153":2,"169":2,"193":2,"194":3,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6fd88cb3771eb197ae328df78aeb101e32dea90f0cf06eff8e7ba6ace6efe952"},"7e171f59842f0ba999d5e75de30ef99a4e9fdb93d68f903daea47630a54cf6ce":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nvar app = new App();\nvar stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nvar authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nvar restapi = new RestApi(stack, \"MyRestApi\");\n\nvar authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/lib\"\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\napp := awscdkcore.NewApp()\nstack := awscdkcore.NewStack(app, jsii.String(\"TokenAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"index.handler\"),\n\tCode: lambda.AssetCode_FromAsset(path.join(__dirname, jsii.String(\"integ.token-authorizer.handler\"))),\n})\n\nrestapi := lib.NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := lib.NewTokenAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &TokenAuthorizerProps{\n\tHandler: authorizerFn,\n})\n\nrestapi.Root.AddMethod(jsii.String(\"ANY\"), lib.NewMockIntegration(&IntegrationOptions{\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\tRequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &MethodOptions{\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tAuthorizer: Authorizer,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":843}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.TokenAuthorizer","@aws-cdk/aws-apigateway.TokenAuthorizerProps","@aws-cdk/aws-lambda.AssetCode","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n","syntaxKindCounter":{"10":15,"75":50,"192":2,"193":7,"194":9,"196":3,"197":6,"225":5,"226":1,"242":5,"243":5,"254":4,"255":4,"256":2,"257":2,"258":6,"281":11,"282":1,"290":1},"fqnsFingerprint":"a3c75a521da4ad42f89590bb60b1897bb8347c627de542ab292be2695f2a8c1b"},"69697a1a79c30244816c20325c2fedfc5e15af364d8245c836506bbe4d6c8304":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewRequestAuthorizer(this, jsii.String(\"booksAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authFn,\n\tIdentitySources: []*string{\n\t\tapigateway.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t},\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":911}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IdentitySource","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":2,"153":2,"169":2,"192":1,"193":2,"194":5,"196":2,"197":2,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"97e9cce7a61bbe3cb25665bfc8f9b30b004442bc6eb1da2efa7e742d738b774c"},"460dd31a9d3076ddca2879de1b83308e30b105198197b7c72236400b1696b4da":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nvar app = new App();\nvar stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nvar authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nvar restapi = new RestApi(stack, \"MyRestApi\");\n\nvar authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/lib\"\nimport \"github.com/aws-samples/dummy/lib/authorizers\"\nimport \"github.com/aws-samples/dummy/lib/authorizers/identitysource\"\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp := awscdkcore.NewApp()\nstack := awscdkcore.NewStack(app, jsii.String(\"RequestAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"index.handler\"),\n\tCode: lambda.AssetCode_FromAsset(path.join(__dirname, jsii.String(\"integ.request-authorizer.handler\"))),\n})\n\nrestapi := lib.NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := libauthorizers.NewRequestAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authorizerFn,\n\tIdentitySources: []*string{\n\t\tlibauthorizersidentitysource.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t\t*libauthorizersidentitysource.IdentitySource_QueryString(jsii.String(\"allow\")),\n\t},\n})\n\nrestapi.Root.AddMethod(jsii.String(\"ANY\"), lib.NewMockIntegration(&IntegrationOptions{\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\tRequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &MethodOptions{\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tAuthorizer: Authorizer,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":928}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.IdentitySource#queryString","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.AssetCode","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n","syntaxKindCounter":{"10":19,"75":56,"192":3,"193":7,"194":11,"196":5,"197":6,"225":5,"226":1,"242":5,"243":5,"254":6,"255":6,"256":2,"257":4,"258":7,"281":12,"282":1,"290":1},"fqnsFingerprint":"b416a7dc987a83457af5271c03a6d75c6cbcc4462580256a560d02517a73eab2"},"e892b0a6beca09c212d7c7e80f3cb88249c9a37040ca17a8f3b7b26d265d3d06":{"translations":{"python":{"source":"# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)","version":"2"},"csharp":{"source":"Resource books;\nvar userPool = new UserPool(this, \"UserPool\");\n\nvar auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});","version":"1"},"java":{"source":"Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());","version":"1"},"go":{"source":"var books resource\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauth := apigateway.NewCognitoUserPoolsAuthorizer(this, jsii.String(\"booksAuthorizer\"), &CognitoUserPoolsAuthorizerProps{\n\tCognitoUserPools: []iUserPool{\n\t\tuserPool,\n\t},\n})\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n\tAuthorizationType: apigateway.AuthorizationType_COGNITO,\n})","version":"1"},"$":{"source":"const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":987}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#COGNITO","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-cognito.UserPool","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":2,"130":1,"153":1,"169":1,"192":1,"193":2,"194":6,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"59b0c018ec6ada498004d63b9259746ce79c8bc2344cfd9c79e45c5e86389fbc"},"9b53bee34f3daf385bf407a2159ebd0726976d90ce9e9780fac875a9ea4fc81a":{"translations":{"python":{"source":"# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)","version":"2"},"csharp":{"source":"var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});","version":"1"},"java":{"source":"Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();","version":"1"},"go":{"source":"var acm interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"domain-name\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acm.certificate_FromCertificateArn(this, jsii.String(\"cert\"), jsii.String(\"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\")),\n\tMtls: &MTLSConfig{\n\t\tBucket: s3.NewBucket(this, jsii.String(\"bucket\")),\n\t\tKey: jsii.String(\"truststore.pem\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n})","version":"1"},"$":{"source":"declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1005}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.IBucket","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":14,"104":3,"125":1,"130":1,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":6,"290":1},"fqnsFingerprint":"0df508b27559a3376320ad826a9a63bf20edbb87de670e825859789476dd6adf"},"6a07cf508d613278e7a4d6f68cfcab75161a77b4c87cbe9d7f4c9badbfa0fb12":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});","version":"1"},"java":{"source":"RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tLoggingLevel: apigateway.MethodLoggingLevel_INFO,\n\t\tDataTraceEnabled: jsii.Boolean(true),\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1053}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.MethodLoggingLevel","@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":9,"104":1,"106":1,"193":2,"194":3,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"cc68cbfeabed5a790dc2c3c0e33c179d28a506459921215febe5b81cf1abf2c9"},"19c1f947f2fade3f30b809060178b549599bcb5721519af89930694758187e2a":{"translations":{"python":{"source":"# acm_certificate_for_example_com: Any\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)","version":"2"},"csharp":{"source":"var acmCertificateForExampleCom;\n\n\nvar api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});","version":"1"},"java":{"source":"Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();","version":"1"},"go":{"source":"var acmCertificateForExampleCom interface{}\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"MyDomain\"), &RestApiProps{\n\tDomainName: &DomainNameOptions{\n\t\tDomainName: jsii.String(\"example.com\"),\n\t\tCertificate: acmCertificateForExampleCom,\n\t},\n})","version":"1"},"$":{"source":"declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1086}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainNameOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-certificatemanager.ICertificate","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":8,"104":1,"125":1,"130":1,"193":2,"194":1,"197":1,"225":2,"242":2,"243":2,"281":3,"290":1},"fqnsFingerprint":"00670d691fa7aeed31340680efd81ae172d4fa4ed9602ca6f6bebac912d73eb3"},"fc1a0b9e3542f7a902a40408e510a0a338f2120b3772d2fb64d993ae2a50da1a":{"translations":{"python":{"source":"import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api: apigateway.RestApi\n# hosted_zone_for_example_com: Any\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsroute53\"\nimport targets \"github.com/aws-samples/dummy/awscdkawsroute53targets\"\n\nvar api restApi\nvar hostedZoneForExampleCom interface{}\n\n\nroute53.NewARecord(this, jsii.String(\"CustomDomainAliasRecord\"), &ARecordProps{\n\tZone: hostedZoneForExampleCom,\n\tTarget: route53.RecordTarget_FromAlias(targets.NewApiGateway(api)),\n})","version":"1"},"$":{"source":"import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1107}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.RestApiBase","@aws-cdk/aws-route53-targets.ApiGateway","@aws-cdk/aws-route53.ARecord","@aws-cdk/aws-route53.ARecordProps","@aws-cdk/aws-route53.IAliasRecordTarget","@aws-cdk/aws-route53.IHostedZone","@aws-cdk/aws-route53.RecordTarget","@aws-cdk/aws-route53.RecordTarget#fromAlias","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"125":1,"130":2,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":2,"281":2,"290":1},"fqnsFingerprint":"6cf3a5e149b9bdc925df4b816cf116f10b4a2b4f6c0fc7af8597849a9cfa8928"},"50b3e6d728f453b3bf6f3f9c5c8b7e44139e7bc3957c580053f5778e0a54f61b":{"translations":{"python":{"source":"# acm_certificate_for_example_com: Any\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)","version":"2"},"csharp":{"source":"var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});","version":"1"},"java":{"source":"Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();","version":"1"},"go":{"source":"var acmCertificateForExampleCom interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"custom-domain\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acmCertificateForExampleCom,\n\tEndpointType: apigateway.EndpointType_EDGE,\n\t // default is REGIONAL\n\tSecurityPolicy: apigateway.SecurityPolicy_TLS_1_2,\n})","version":"1"},"$":{"source":"declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1122}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.SecurityPolicy","@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2","@aws-cdk/aws-certificatemanager.ICertificate","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":14,"104":1,"125":1,"130":1,"193":1,"194":5,"197":1,"225":1,"226":1,"242":1,"243":1,"281":4,"290":1},"fqnsFingerprint":"41c35e3046b2372e1dc73840601b90080a28eeaf55dc4f418ae7806ac8413fa2"},"2317c26e330a9b338d0728f02e68983b1f59c93d0fc4450ee62fba35817d2b4d":{"translations":{"python":{"source":"# domain: apigateway.DomainName\n# api1: apigateway.RestApi\n# api2: apigateway.RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")","version":"2"},"csharp":{"source":"DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });","version":"1"},"java":{"source":"DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());","version":"1"},"go":{"source":"var domain domainName\nvar api1 restApi\nvar api2 restApi\n\n\ndomain.AddBasePathMapping(api1, &BasePathMappingOptions{\n\tBasePath: jsii.String(\"go-to-api1\"),\n})\ndomain.AddBasePathMapping(api2, &BasePathMappingOptions{\n\tBasePath: jsii.String(\"boom\"),\n})","version":"1"},"$":{"source":"declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1137}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.BasePathMappingOptions","@aws-cdk/aws-apigateway.DomainName#addBasePathMapping","@aws-cdk/aws-apigateway.IRestApi"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":17,"130":3,"153":3,"169":3,"193":2,"194":2,"196":2,"225":3,"226":2,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"aa497042030a691b1cc784c4822b2ca36f4b6074cc083df782bb4ac57e3582b9"},"4cb5a521e43f3a219dc476ea518ee7e58499626acc5573d938095f8cc5c91ff9":{"translations":{"python":{"source":"# domain: apigateway.DomainName\n# restapi: apigateway.RestApi\n\n\nbeta_deploy = apigateway.Deployment(self, \"beta-deployment\",\n    api=restapi\n)\nbeta_stage = apigateway.Stage(self, \"beta-stage\",\n    deployment=beta_deploy\n)\ndomain.add_base_path_mapping(restapi, base_path=\"api/beta\", stage=beta_stage)","version":"2"},"csharp":{"source":"DomainName domain;\nRestApi restapi;\n\n\nvar betaDeploy = new Deployment(this, \"beta-deployment\", new DeploymentProps {\n    Api = restapi\n});\nvar betaStage = new Stage(this, \"beta-stage\", new StageProps {\n    Deployment = betaDeploy\n});\ndomain.AddBasePathMapping(restapi, new BasePathMappingOptions { BasePath = \"api/beta\", Stage = betaStage });","version":"1"},"java":{"source":"DomainName domain;\nRestApi restapi;\n\n\nDeployment betaDeploy = Deployment.Builder.create(this, \"beta-deployment\")\n        .api(restapi)\n        .build();\nStage betaStage = Stage.Builder.create(this, \"beta-stage\")\n        .deployment(betaDeploy)\n        .build();\ndomain.addBasePathMapping(restapi, BasePathMappingOptions.builder().basePath(\"api/beta\").stage(betaStage).build());","version":"1"},"go":{"source":"var domain domainName\nvar restapi restApi\n\n\nbetaDeploy := apigateway.NewDeployment(this, jsii.String(\"beta-deployment\"), &DeploymentProps{\n\tApi: restapi,\n})\nbetaStage := apigateway.NewStage(this, jsii.String(\"beta-stage\"), &StageProps{\n\tDeployment: betaDeploy,\n})\ndomain.AddBasePathMapping(restapi, &BasePathMappingOptions{\n\tBasePath: jsii.String(\"api/beta\"),\n\tStage: betaStage,\n})","version":"1"},"$":{"source":"declare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1149}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.BasePathMappingOptions","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.DomainName#addBasePathMapping","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":22,"104":2,"130":2,"153":2,"169":2,"193":3,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"281":4,"290":1},"fqnsFingerprint":"c92e7531314a9ecf545edf79a9c5e7b81a0c0fd8381950f3722504e5432310b6"},"5f72c885d458c547240b76fd6b60b7085fb3e1fa1a84827bdacde770ac46d9dc":{"translations":{"python":{"source":"# domain: apigateway.DomainName\n# api: apigateway.RestApi\n\ndomain.add_base_path_mapping(api)","version":"2"},"csharp":{"source":"DomainName domain;\nRestApi api;\n\ndomain.AddBasePathMapping(api);","version":"1"},"java":{"source":"DomainName domain;\nRestApi api;\n\ndomain.addBasePathMapping(api);","version":"1"},"go":{"source":"var domain domainName\nvar api restApi\n\ndomain.AddBasePathMapping(api)","version":"1"},"$":{"source":"declare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\ndomain.addBasePathMapping(api);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1165}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName#addBasePathMapping","@aws-cdk/aws-apigateway.IRestApi"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ndomain.addBasePathMapping(api);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":9,"130":2,"153":2,"169":2,"194":1,"196":1,"225":2,"226":1,"242":2,"243":2,"290":1},"fqnsFingerprint":"e2e37a3986e09e2faecefe9d5ce0c9bcba74041591b1426bc2bc5792f3769669"},"22791ad83af50e8d8e0acb485c9be42618b8541951ee5801f9a644a0ca3fc956":{"translations":{"python":{"source":"# hosted_zone_for_example_com: Any\n# domain_name: apigateway.DomainName\n\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayDomain(domain_name))\n)","version":"2"},"csharp":{"source":"var hostedZoneForExampleCom;\nDomainName domainName;\n\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGatewayDomain(domainName))\n});","version":"1"},"java":{"source":"Object hostedZoneForExampleCom;\nDomainName domainName;\n\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGatewayDomain(domainName)))\n        .build();","version":"1"},"go":{"source":"var hostedZoneForExampleCom interface{}\nvar domainName domainName\n\nimport \"github.com/aws-samples/dummy/awscdkawsroute53\"\nimport targets \"github.com/aws-samples/dummy/awscdkawsroute53targets\"\n\n\nroute53.NewARecord(this, jsii.String(\"CustomDomainAliasRecord\"), &ARecordProps{\n\tZone: hostedZoneForExampleCom,\n\tTarget: route53.RecordTarget_FromAlias(targets.NewApiGatewayDomain(domainName)),\n})","version":"1"},"$":{"source":"declare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1176}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IDomainName","@aws-cdk/aws-route53-targets.ApiGatewayDomain","@aws-cdk/aws-route53.ARecord","@aws-cdk/aws-route53.ARecordProps","@aws-cdk/aws-route53.IAliasRecordTarget","@aws-cdk/aws-route53.IHostedZone","@aws-cdk/aws-route53.RecordTarget","@aws-cdk/aws-route53.RecordTarget#fromAlias","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"125":1,"130":2,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":2,"281":2,"290":1},"fqnsFingerprint":"881ced3c06c59c80f9c943cbc9195eef54d3a6307dd0fdf2af685b3197cd8c9f"},"a3ce1e514d0100fafa8e55f5fed60e8c4edc73d6065ee5bf970297b8b1e65773":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1201}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"719a940f7e05f4707bf342960f7ca484715a397b138a1c10dce2da53d3741085":{"translations":{"python":{"source":"log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)","version":"2"},"csharp":{"source":"var logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});","version":"1"},"java":{"source":"LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();","version":"1"},"go":{"source":"logGroup := logs.NewLogGroup(this, jsii.String(\"ApiGatewayAccessLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(logGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_Clf(),\n\t},\n})","version":"1"},"$":{"source":"const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1233}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#clf","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":15,"104":2,"193":2,"194":5,"196":1,"197":3,"225":2,"242":2,"243":2,"281":3},"fqnsFingerprint":"fc517f657df29f360c32d978580636dc3b5a2ad77b59eb8a886a4d77700f275d"},"5c05b53c16a3be10ec5ea50b7f00928889b497b344814bc82704ea85093e2f3c":{"translations":{"python":{"source":"log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)","version":"2"},"csharp":{"source":"var logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});","version":"1"},"java":{"source":"LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();","version":"1"},"go":{"source":"logGroup := logs.NewLogGroup(this, jsii.String(\"ApiGatewayAccessLogs\"))\napigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(logGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_Custom(\n\t\tfmt.Sprintf(\"%v %v %v\", apigateway.AccessLogField_ContextRequestId(), apigateway.AccessLogField_ContextErrorMessage(), apigateway.AccessLogField_ContextErrorMessageString())),\n\t},\n})","version":"1"},"$":{"source":"const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1245}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#custom","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"15":1,"16":2,"17":1,"75":23,"104":2,"193":2,"194":11,"196":4,"197":3,"211":1,"221":3,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"9e11b5905305feb5d1a7076564f2c97c6b4edb404bb6a6af8e8a83444d5265d8"},"66a43c754f6e0b6c77fb7a89e1f89086fc1dd640c8d6ef945d02ca8839b18443":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books\");\nvar deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nvar stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books\"))\ndeployment := apigateway.NewDeployment(this, jsii.String(\"my-deployment\"), &DeploymentProps{\n\tApi: Api,\n})\nstage := apigateway.NewStage(this, jsii.String(\"my-stage\"), &StageProps{\n\tDeployment: Deployment,\n\tMethodOptions: map[string]methodDeploymentOptions{\n\t\t\"/*/*\": &methodDeploymentOptions{\n\t\t\t // This special path applies to all resource paths and all HTTP methods\n\t\t\t\"throttlingRateLimit\": jsii.Number(100),\n\t\t\t\"throttlingBurstLimit\": jsii.Number(200),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1262}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.MethodDeploymentOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":4,"75":14,"104":3,"193":4,"194":3,"197":3,"225":3,"242":3,"243":3,"281":4,"282":2},"fqnsFingerprint":"93712bd612b9f2d8183f8b0a5c8eced6bd1f8ba358b03d3cab65b9d9ac822254"},"b51f37227d138d22ee04a2e3f6d5a3396aaf54e32868abcf650eeef08744fa02":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        method_options={\n            \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n                throttling_rate_limit=100,\n                throttling_burst_limit=1000)\n        }\n    )\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n                ThrottlingRateLimit = 100,\n                ThrottlingBurstLimit = 1000 } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .methodOptions(Map.of(\n                        \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                                .throttlingRateLimit(100)\n                                .throttlingBurstLimit(1000).build()))\n                .build())\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tMethodOptions: map[string]methodDeploymentOptions{\n\t\t\t\"/*/*\": &methodDeploymentOptions{\n\t\t\t\t // This special path applies to all resource paths and all HTTP methods\n\t\t\t\t\"throttlingRateLimit\": jsii.Number(100),\n\t\t\t\t\"throttlingBurstLimit\": jsii.Number(1000),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1279}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.MethodDeploymentOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":2,"75":7,"104":1,"193":4,"194":1,"197":1,"225":1,"242":1,"243":1,"281":5},"fqnsFingerprint":"19fa04416859d560dfda5853ab9d81412cbfc8327ec64d0c983471f2ab91ec9c"},"13ef2cf637f6f4bfca217bff83de4935fea5c8cec670bdba0cd475594cff8b1c":{"translations":{"python":{"source":"apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)","version":"2"},"csharp":{"source":"new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});","version":"1"},"java":{"source":"RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();","version":"1"},"go":{"source":"apigateway.NewRestApi(this, jsii.String(\"api\"), &RestApiProps{\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: apigateway.Cors_ALL_ORIGINS(),\n\t\tAllowMethods: apigateway.Cors_ALL_METHODS(),\n\t},\n})","version":"1"},"$":{"source":"new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1305}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Cors","@aws-cdk/aws-apigateway.Cors#ALL_METHODS","@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"104":1,"193":2,"194":5,"197":1,"226":1,"281":3},"fqnsFingerprint":"b1b3a4f206b188ac696f20d353566026585cd9a1170b50f2ebdffbcbc98e87ea"},"b82921d67474b7692473c32bd8baa12f6cf46a5dc7ff5e57534cb1d1a975142e":{"translations":{"python":{"source":"# my_resource: apigateway.Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)","version":"2"},"csharp":{"source":"Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});","version":"1"},"java":{"source":"Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());","version":"1"},"go":{"source":"var myResource resource\n\n\nmyResource.AddCorsPreflight(&CorsOptions{\n\tAllowOrigins: []*string{\n\t\tjsii.String(\"https://amazon.com\"),\n\t},\n\tAllowMethods: []*string{\n\t\tjsii.String(\"GET\"),\n\t\tjsii.String(\"PUT\"),\n\t},\n})","version":"1"},"$":{"source":"declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1317}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":7,"130":1,"153":1,"169":1,"192":2,"193":1,"194":1,"196":1,"225":1,"226":1,"242":1,"243":1,"281":2,"290":1},"fqnsFingerprint":"03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"},"98880fc385fda4ff10efbab8015cf18addcd8ca91929798b887dd19c85a62a24":{"translations":{"python":{"source":"# resource: apigateway.Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)","version":"2"},"csharp":{"source":"Resource resource;\n\n\nvar subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});","version":"1"},"java":{"source":"Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());","version":"1"},"go":{"source":"var resource resource\n\n\nsubtree := resource.AddResource(jsii.String(\"subtree\"), &ResourceOptions{\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"https://amazon.com\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1332}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.ResourceOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":8,"130":1,"153":1,"169":1,"192":1,"193":2,"194":1,"196":1,"225":2,"242":2,"243":2,"281":2,"290":1},"fqnsFingerprint":"4d00ee04c4186472d97d00a1c041cc99cc03e9282f6a9d40710b065e59706293"},"08e6f8fc845119e691f5780a0c475289cb6d85b4a4975f5adf97c4ab432742cd":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});","version":"1"},"java":{"source":"RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"api\"), &RestApiProps{\n\tEndpointConfiguration: &EndpointConfiguration{\n\t\tTypes: []endpointType{\n\t\t\tapigateway.*endpointType_EDGE,\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1354}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.EndpointConfiguration","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":8,"104":1,"192":1,"193":2,"194":3,"197":1,"225":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"adb39de5c25d0049df9e8b9abdda807adef1b4c3b0abab97fd8159c91900b767"},"e1523c5826b37470ecb84ea1aab3b9f4d096d64c97a4fd74bd49b157f1ce35e4":{"translations":{"python":{"source":"# some_endpoint: ec2.IVpcEndpoint\n\n\napi = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.PRIVATE],\n        vpc_endpoints=[some_endpoint]\n    )\n)","version":"2"},"csharp":{"source":"IVpcEndpoint someEndpoint;\n\n\nvar api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.PRIVATE },\n        VpcEndpoints = new [] { someEndpoint }\n    }\n});","version":"1"},"java":{"source":"IVpcEndpoint someEndpoint;\n\n\nRestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.PRIVATE))\n                .vpcEndpoints(List.of(someEndpoint))\n                .build())\n        .build();","version":"1"},"go":{"source":"var someEndpoint iVpcEndpoint\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"api\"), &RestApiProps{\n\tEndpointConfiguration: &EndpointConfiguration{\n\t\tTypes: []endpointType{\n\t\t\tapigateway.*endpointType_PRIVATE,\n\t\t},\n\t\tVpcEndpoints: []*iVpcEndpoint{\n\t\t\tsomeEndpoint,\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const someEndpoint: ec2.IVpcEndpoint;\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1369}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.EndpointConfiguration","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#PRIVATE","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const someEndpoint: ec2.IVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":13,"104":1,"130":1,"153":1,"169":1,"192":2,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":3,"290":1},"fqnsFingerprint":"8a9551d281dc065ef833e5602c2803fd6be298c9bb02ce7494f0cfddce40bc8d"},"aa848ec0d21251e3de93f6b78355f2c2481e8363f1754520050190685a868421":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1396}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"},"bce659d86b25aaf66ce03981661cd65602edf55af61bd74c6dbf323e5ab000c7":{"translations":{"python":{"source":"awesome_link = apigateway.VpcLink.from_vpc_link_id(self, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\")","version":"2"},"csharp":{"source":"var awesomeLink = VpcLink.FromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");","version":"1"},"java":{"source":"IVpcLink awesomeLink = VpcLink.fromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");","version":"1"},"go":{"source":"awesomeLink := apigateway.VpcLink_FromVpcLinkId(this, jsii.String(\"awesome-vpc-link\"), jsii.String(\"us-east-1_oiuR12Abd\"))","version":"1"},"$":{"source":"const awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1423}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLink#fromVpcLinkId","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"104":1,"194":2,"196":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"cfe4d15d345e64627950aa966974463182dfcdb2f8bea5a3288879b043ddd2a4"},"56c0be6a8ac0bd2e5f36733d6a115112d3ff959f2e553dac9410c73c0623ae9c":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books-api\"))\napi.AddGatewayResponse(jsii.String(\"test-response\"), &GatewayResponseOptions{\n\tType: apigateway.ResponseType_ACCESS_DENIED(),\n\tStatusCode: jsii.String(\"500\"),\n\tResponseHeaders: map[string]*string{\n\t\t\"Access-Control-Allow-Origin\": jsii.String(\"test.com\"),\n\t\t\"test-key\": jsii.String(\"test-value\"),\n\t},\n\tTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"),\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1438}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.GatewayResponseOptions","@aws-cdk/aws-apigateway.ResponseType","@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":9,"75":12,"104":1,"193":3,"194":4,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":7},"fqnsFingerprint":"5d6f7cf981188a35fc89c19ccbd12bbd47497f628a63ce08102ba48362fcee72"},"87e475aa3bd736583b83911fa0e3a90389de38be9eca258d5b0b9a03966f3539":{"translations":{"python":{"source":"# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)","version":"2"},"csharp":{"source":"Integration integration;\n\n\nvar api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nvar booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);","version":"1"},"java":{"source":"Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);","version":"1"},"go":{"source":"var integration integration\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"books-api\"), &SpecRestApiProps{\n\tApiDefinition: apigateway.ApiDefinition_FromAsset(jsii.String(\"path-to-file.json\")),\n})\n\nbooksResource := api.Root.AddResource(jsii.String(\"books\"))\nbooksResource.AddMethod(jsii.String(\"GET\"), integration)","version":"1"},"$":{"source":"declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1461}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.ApiDefinition#fromAsset","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApi#root","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":6,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":1,"290":1},"fqnsFingerprint":"1aa22506f232ee0e53811950ecc4a67fb89a0d4598513e0dea0a06694530f647"},"9e49b09450c7bb739e927e94e6cbce4cec43fa5e6b834334094df26377ee5366":{"translations":{"python":{"source":"# api_definition: apigateway.ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)","version":"2"},"csharp":{"source":"ApiDefinition apiDefinition;\n\n\nvar api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});","version":"1"},"java":{"source":"ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();","version":"1"},"go":{"source":"var apiDefinition apiDefinition\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"ExampleRestApi\"), &SpecRestApiProps{\n\tApiDefinition: ApiDefinition,\n\tEndpointTypes: []endpointType{\n\t\tapigateway.*endpointType_PRIVATE,\n\t},\n})","version":"1"},"$":{"source":"declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1495}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#PRIVATE","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"104":1,"130":1,"153":1,"169":1,"192":1,"193":1,"194":3,"197":1,"225":2,"242":2,"243":2,"281":1,"282":1,"290":1},"fqnsFingerprint":"1c31c9de12960ce1fed311214615dc84fb9d86918e5217b5e5261b29996eb5f0"},"8289857d510360c2ec6afe77fa47d9df4bf44927813b5f95295c5ab853c6bede":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"my-api\")\nclient_error_metric = api.metric_client_error()","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"my-api\");\nvar clientErrorMetric = api.MetricClientError();","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"my-api\");\nMetric clientErrorMetric = api.metricClientError();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"my-api\"))\nclientErrorMetric := api.MetricClientError()","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-apigateway"},"field":{"field":"markdown","line":1516}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiBase#metricClientError","@aws-cdk/aws-cloudwatch.Metric","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":6,"104":1,"194":2,"196":1,"197":1,"225":2,"242":2,"243":2},"fqnsFingerprint":"3803355cc247610554e370eea6d5abff66d930f213886064856ac7c1630fabcf"},"5c01e5965cd36240f0c5ede6364e60034f0192f18812d4735e2ed175bbaef66a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_destination_config = apigateway.AccessLogDestinationConfig(\n    destination_arn=\"destinationArn\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar accessLogDestinationConfig = new AccessLogDestinationConfig {\n    DestinationArn = \"destinationArn\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogDestinationConfig accessLogDestinationConfig = AccessLogDestinationConfig.builder()\n        .destinationArn(\"destinationArn\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\naccessLogDestinationConfig := &AccessLogDestinationConfig{\n\tDestinationArn: jsii.String(\"destinationArn\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogDestinationConfig: apigateway.AccessLogDestinationConfig = {\n  destinationArn: 'destinationArn',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AccessLogDestinationConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogDestinationConfig"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogDestinationConfig: apigateway.AccessLogDestinationConfig = {\n  destinationArn: 'destinationArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":5,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"05cd6cb529025c0f05aa2b279901eee018492a5325ba1eb9534778b791304859"},"fbc9e5debd0d5e84e0ad389271e69062e0238a0fab0f5a189c15574d60fad2bf":{"translations":{"python":{"source":"apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))","version":"2"},"csharp":{"source":"AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));","version":"1"},"java":{"source":"AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));","version":"1"},"go":{"source":"apigateway.AccessLogFormat_Custom(jSON.stringify(map[string]interface{}{\n\t\"requestId\": apigateway.AccessLogField_contextRequestId(),\n\t\"sourceIp\": apigateway.AccessLogField_contextIdentitySourceIp(),\n\t\"method\": apigateway.AccessLogField_contextHttpMethod(),\n\t\"userContext\": map[string]*string{\n\t\t\"sub\": apigateway.AccessLogField_contextAuthorizerClaims(jsii.String(\"sub\")),\n\t\t\"email\": apigateway.AccessLogField_contextAuthorizerClaims(jsii.String(\"email\")),\n\t},\n}))","version":"1"},"$":{"source":" apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AccessLogField"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogField","@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims","@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod","@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp","@aws-cdk/aws-apigateway.AccessLogField#contextRequestId","@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#custom"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":26,"193":2,"194":13,"196":7,"226":1,"281":6},"fqnsFingerprint":"7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"},"e628493b57549d542d770cca34adae0722640618f11b0acef9f6369e5c3813e0":{"translations":{"python":{"source":"log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)","version":"2"},"csharp":{"source":"var logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});","version":"1"},"java":{"source":"LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();","version":"1"},"go":{"source":"logGroup := logs.NewLogGroup(this, jsii.String(\"ApiGatewayAccessLogs\"))\napigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(logGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_Custom(\n\t\tfmt.Sprintf(\"%v %v %v\", apigateway.AccessLogField_ContextRequestId(), apigateway.AccessLogField_ContextErrorMessage(), apigateway.AccessLogField_ContextErrorMessageString())),\n\t},\n})","version":"1"},"$":{"source":"const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AccessLogFormat"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#custom","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"15":1,"16":2,"17":1,"75":23,"104":2,"193":2,"194":11,"196":4,"197":3,"211":1,"221":3,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"9e11b5905305feb5d1a7076564f2c97c6b4edb404bb6a6af8e8a83444d5265d8"},"64dcec102ba8b8eff9279c8707c971bc33a21e4b52a145a7dfc6fc1018e381fe":{"translations":{"python":{"source":"apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))","version":"2"},"csharp":{"source":"AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));","version":"1"},"java":{"source":"AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));","version":"1"},"go":{"source":"apigateway.AccessLogFormat_Custom(jSON.stringify(map[string]interface{}{\n\t\"requestId\": apigateway.AccessLogField_contextRequestId(),\n\t\"sourceIp\": apigateway.AccessLogField_contextIdentitySourceIp(),\n\t\"method\": apigateway.AccessLogField_contextHttpMethod(),\n\t\"userContext\": map[string]*string{\n\t\t\"sub\": apigateway.AccessLogField_contextAuthorizerClaims(jsii.String(\"sub\")),\n\t\t\"email\": apigateway.AccessLogField_contextAuthorizerClaims(jsii.String(\"email\")),\n\t},\n}))","version":"1"},"$":{"source":" apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-apigateway.AccessLogFormat","memberName":"custom"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogField","@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims","@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod","@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp","@aws-cdk/aws-apigateway.AccessLogField#contextRequestId","@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#custom"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":26,"193":2,"194":13,"196":7,"226":1,"281":6},"fqnsFingerprint":"7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"},"67b5dd13dddf57d612034da8eb7db1ada51e07259607cd0c606682d80032bf62":{"translations":{"python":{"source":"# usageplan: apigateway.UsagePlan\n# api_key: apigateway.ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)","version":"2"},"csharp":{"source":"UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});","version":"1"},"java":{"source":"UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());","version":"1"},"go":{"source":"var usageplan usagePlan\nvar apiKey apiKey\n\n\nusageplan.addApiKey(apiKey, &AddApiKeyOptions{\n\tOverrideLogicalId: jsii.String(\"...\"),\n})","version":"1"},"$":{"source":"declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AddApiKeyOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AddApiKeyOptions","@aws-cdk/aws-apigateway.IApiKey"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":10,"130":2,"153":2,"169":2,"193":1,"194":1,"196":1,"225":2,"226":1,"242":2,"243":2,"281":1,"290":1},"fqnsFingerprint":"39a0bc0cdcf52ed17618d6dc6720ecabd2f7da748e92be70732b06aabaccfa55"},"901c16dcd0fcf9bd0e42822f8d61efbeead957c44765bd052ec31f545e003c9b":{"translations":{"python":{"source":"# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)","version":"2"},"csharp":{"source":"Integration integration;\n\n\nvar api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nvar booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);","version":"1"},"java":{"source":"Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);","version":"1"},"go":{"source":"var integration integration\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"books-api\"), &SpecRestApiProps{\n\tApiDefinition: apigateway.ApiDefinition_FromAsset(jsii.String(\"path-to-file.json\")),\n})\n\nbooksResource := api.Root.AddResource(jsii.String(\"books\"))\nbooksResource.AddMethod(jsii.String(\"GET\"), integration)","version":"1"},"$":{"source":"declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiDefinition"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.ApiDefinition#fromAsset","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApi#root","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":6,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":1,"290":1},"fqnsFingerprint":"1aa22506f232ee0e53811950ecc4a67fb89a0d4598513e0dea0a06694530f647"},"391f19836943028f59a3e17128e1c7eea633e6869f3ad02327972d92aaf29271":{"translations":{"python":{"source":"apigateway.ApiDefinition.from_inline({\n    \"openapi\": \"3.0.2\",\n    \"paths\": {\n        \"/pets\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-amazon-apigateway-integration\": {\n                    \"responses\": {\n                        \"default\": {\n                            \"status_code\": \"200\"\n                        }\n                    },\n                    \"request_templates\": {\n                        \"application/json\": \"{\\\"statusCode\\\": 200}\"\n                    },\n                    \"passthrough_behavior\": \"when_no_match\",\n                    \"type\": \"mock\"\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Empty\": {\n                \"title\": \"Empty Schema\",\n                \"type\": \"object\"\n            }\n        }\n    }\n})","version":"2"},"csharp":{"source":"ApiDefinition.FromInline(new Dictionary<string, object> {\n    { \"openapi\", \"3.0.2\" },\n    { \"paths\", new Struct {\n        /pets = new Struct {\n            Get = new Struct {\n                Responses = new Struct {\n                    200 = new Struct {\n                        Content = new Struct {\n                            Application/json = new Struct {\n                                Schema = new Struct {\n                                    $ref = \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                X-amazon-apigateway-integration = new Struct {\n                    Responses = new Struct {\n                        Default = new Struct {\n                            StatusCode = \"200\"\n                        }\n                    },\n                    RequestTemplates = new Struct {\n                        Application/json = \"{\\\"statusCode\\\": 200}\"\n                    },\n                    PassthroughBehavior = \"when_no_match\",\n                    Type = \"mock\"\n                }\n            }\n        }\n    } },\n    { \"components\", new Struct {\n        Schemas = new Struct {\n            Empty = new Struct {\n                Title = \"Empty Schema\",\n                Type = \"object\"\n            }\n        }\n    } }\n});","version":"1"},"java":{"source":"ApiDefinition.fromInline(Map.of(\n        \"openapi\", \"3.0.2\",\n        \"paths\", Map.of(\n                \"/pets\", Map.of(\n                        \"get\", Map.of(\n                                \"responses\", Map.of(\n                                        200, Map.of(\n                                                \"content\", Map.of(\n                                                        \"application/json\", Map.of(\n                                                                \"schema\", Map.of(\n                                                                        \"$ref\", \"#/components/schemas/Empty\"))))),\n                                \"x-amazon-apigateway-integration\", Map.of(\n                                        \"responses\", Map.of(\n                                                \"default\", Map.of(\n                                                        \"statusCode\", \"200\")),\n                                        \"requestTemplates\", Map.of(\n                                                \"application/json\", \"{\\\"statusCode\\\": 200}\"),\n                                        \"passthroughBehavior\", \"when_no_match\",\n                                        \"type\", \"mock\")))),\n        \"components\", Map.of(\n                \"schemas\", Map.of(\n                        \"Empty\", Map.of(\n                                \"title\", \"Empty Schema\",\n                                \"type\", \"object\")))));","version":"1"},"go":{"source":"apigateway.ApiDefinition_FromInline(map[string]interface{}{\n\t\"openapi\": jsii.String(\"3.0.2\"),\n\t\"paths\": map[string]map[string]map[string]map[string]map[string]map[string]map[string]map[string]*string{\n\t\t\"/pets\": map[string]map[string]map[string]map[string]map[string]map[string]map[string]*string{\n\t\t\t\"get\": map[string]map[string]map[string]map[string]map[string]map[string]*string{\n\t\t\t\t\"responses\": map[string]map[string]map[string]map[string]map[string]*string{\n\t\t\t\t\tjsii.Number(200): map[string]map[string]map[string]map[string]*string{\n\t\t\t\t\t\t\"content\": map[string]map[string]map[string]*string{\n\t\t\t\t\t\t\t\"application/json\": map[string]map[string]*string{\n\t\t\t\t\t\t\t\t\"schema\": map[string]*string{\n\t\t\t\t\t\t\t\t\t\"$ref\": jsii.String(\"#/components/schemas/Empty\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"x-amazon-apigateway-integration\": map[string]interface{}{\n\t\t\t\t\t\"responses\": map[string]map[string]*string{\n\t\t\t\t\t\t\"default\": map[string]*string{\n\t\t\t\t\t\t\t\"statusCode\": jsii.String(\"200\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"requestTemplates\": map[string]*string{\n\t\t\t\t\t\t\"application/json\": jsii.String(\"{\\\"statusCode\\\": 200}\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"passthroughBehavior\": jsii.String(\"when_no_match\"),\n\t\t\t\t\t\"type\": jsii.String(\"mock\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\t\"components\": map[string]map[string]map[string]*string{\n\t\t\"schemas\": map[string]map[string]*string{\n\t\t\t\"Empty\": map[string]*string{\n\t\t\t\t\"title\": jsii.String(\"Empty Schema\"),\n\t\t\t\t\"type\": jsii.String(\"object\"),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-apigateway.ApiDefinition","memberName":"fromInline"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.ApiDefinition#fromInline"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":13,"75":20,"193":16,"194":2,"196":1,"226":1,"281":23},"fqnsFingerprint":"0d56dd5e5d1c68d1daa299d6df7c268e72796709e60f4304ead0c826a2ef3f54"},"d9abee2a020927deedf939e655d550957916829aaecd8879f054eaab53286362":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# inline_definition: Any\n\napi_definition_config = apigateway.ApiDefinitionConfig(\n    inline_definition=inline_definition,\n    s3_location=apigateway.ApiDefinitionS3Location(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        version=\"version\"\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar inlineDefinition;\n\nvar apiDefinitionConfig = new ApiDefinitionConfig {\n    InlineDefinition = inlineDefinition,\n    S3Location = new ApiDefinitionS3Location {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        Version = \"version\"\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject inlineDefinition;\n\nApiDefinitionConfig apiDefinitionConfig = ApiDefinitionConfig.builder()\n        .inlineDefinition(inlineDefinition)\n        .s3Location(ApiDefinitionS3Location.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar inlineDefinition interface{}\n\napiDefinitionConfig := &ApiDefinitionConfig{\n\tInlineDefinition: inlineDefinition,\n\tS3Location: &ApiDefinitionS3Location{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tKey: jsii.String(\"key\"),\n\n\t\t// the properties below are optional\n\t\tVersion: jsii.String(\"version\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const inlineDefinition: any;\nconst apiDefinitionConfig: apigateway.ApiDefinitionConfig = {\n  inlineDefinition: inlineDefinition,\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiDefinitionConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinitionConfig","@aws-cdk/aws-apigateway.ApiDefinitionS3Location"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const inlineDefinition: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiDefinitionConfig: apigateway.ApiDefinitionConfig = {\n  inlineDefinition: inlineDefinition,\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":11,"125":1,"130":1,"153":1,"169":1,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"d8c14ab81df7f610e27824b9273a182fb538971361501d54d6173de9157dd8c9"},"f2b748e64bfa31393a4153bd0ccd443a8cfc1b85a5862d073edcd9f64d5c0c34":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\napi_definition_s3_location = apigateway.ApiDefinitionS3Location(\n    bucket=\"bucket\",\n    key=\"key\",\n\n    # the properties below are optional\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar apiDefinitionS3Location = new ApiDefinitionS3Location {\n    Bucket = \"bucket\",\n    Key = \"key\",\n\n    // the properties below are optional\n    Version = \"version\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nApiDefinitionS3Location apiDefinitionS3Location = ApiDefinitionS3Location.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n\n        // the properties below are optional\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\napiDefinitionS3Location := &ApiDefinitionS3Location{\n\tBucket: jsii.String(\"bucket\"),\n\tKey: jsii.String(\"key\"),\n\n\t// the properties below are optional\n\tVersion: jsii.String(\"version\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst apiDefinitionS3Location: apigateway.ApiDefinitionS3Location = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiDefinitionS3Location"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinitionS3Location"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiDefinitionS3Location: apigateway.ApiDefinitionS3Location = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"0ffb13cb5c751aea65a7af399b83cbf57b0c869d9f976335bc48785c2463f9f1"},"cd323548d73dc404ae4a6dc171e10f1256d523c29fb5626c5b52c6871a6b5591":{"translations":{"python":{"source":"imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")","version":"2"},"csharp":{"source":"var importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");","version":"1"},"java":{"source":"IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");","version":"1"},"go":{"source":"importedKey := apigateway.ApiKey_FromApiKeyId(this, jsii.String(\"imported-key\"), jsii.String(\"<api-key-id>\"))","version":"1"},"$":{"source":"const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiKey"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiKey","@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId","@aws-cdk/aws-apigateway.IApiKey","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"104":1,"194":2,"196":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"4bdd47cba1d35c4fb8a33399fed60c385d73277a038a97e0f6d12705451148e8"},"33d4bc1a897437a7cf234c6cf7dea8a79a494ad2d049d4236bcedf296bccf542":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)","version":"2"},"csharp":{"source":"RestApi api;\n\nvar key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});","version":"1"},"java":{"source":"RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());","version":"1"},"go":{"source":"var api restApi\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"), &ApiKeyOptions{\n\tApiKeyName: jsii.String(\"myApiKey1\"),\n\tValue: jsii.String(\"MyApiKeyThatIsAtLeast20Characters\"),\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiKeyOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiKeyOptions","@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.RestApiBase#addApiKey"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":8,"130":1,"153":1,"169":1,"193":1,"194":1,"196":1,"225":2,"242":2,"243":2,"281":2,"290":1},"fqnsFingerprint":"26570f4189a8d3a525affe26fe5705654d0e8d027973369da7d6c46b241ccbf9"},"e2ce8f44511152d3b9965aeea08d222a15c6f21ae565cab256bef5aaa2acaac2":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# rest_api: apigateway.RestApi\n\napi_key_props = apigateway.ApiKeyProps(\n    api_key_name=\"apiKeyName\",\n    customer_id=\"customerId\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    ),\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    resources=[rest_api],\n    value=\"value\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nRestApi restApi;\nvar apiKeyProps = new ApiKeyProps {\n    ApiKeyName = \"apiKeyName\",\n    CustomerId = \"customerId\",\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    },\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Resources = new [] { restApi },\n    Value = \"value\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nRestApi restApi;\n\nApiKeyProps apiKeyProps = ApiKeyProps.builder()\n        .apiKeyName(\"apiKeyName\")\n        .customerId(\"customerId\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .resources(List.of(restApi))\n        .value(\"value\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar authorizer authorizer\nvar integration integration\nvar model model\nvar requestValidator requestValidator\nvar restApi restApi\n\napiKeyProps := &ApiKeyProps{\n\tApiKeyName: jsii.String(\"apiKeyName\"),\n\tCustomerId: jsii.String(\"customerId\"),\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tDisableCache: jsii.Boolean(false),\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tStatusCode: jsii.Number(123),\n\t},\n\tDefaultIntegration: integration,\n\tDefaultMethodOptions: &MethodOptions{\n\t\tApiKeyRequired: jsii.Boolean(false),\n\t\tAuthorizationScopes: []*string{\n\t\t\tjsii.String(\"authorizationScopes\"),\n\t\t},\n\t\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\t\tAuthorizer: authorizer,\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\t\"responseModelsKey\": model,\n\t\t\t\t},\n\t\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tOperationName: jsii.String(\"operationName\"),\n\t\tRequestModels: map[string]*iModel{\n\t\t\t\"requestModelsKey\": model,\n\t\t},\n\t\tRequestParameters: map[string]*bool{\n\t\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t\t},\n\t\tRequestValidator: requestValidator,\n\t\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\t\tValidateRequestBody: jsii.Boolean(false),\n\t\t\tValidateRequestParameters: jsii.Boolean(false),\n\t\t},\n\t},\n\tDescription: jsii.String(\"description\"),\n\tEnabled: jsii.Boolean(false),\n\tGenerateDistinctId: jsii.Boolean(false),\n\tResources: []iRestApi{\n\t\trestApi,\n\t},\n\tValue: jsii.String(\"value\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const restApi: apigateway.RestApi;\nconst apiKeyProps: apigateway.ApiKeyProps = {\n  apiKeyName: 'apiKeyName',\n  customerId: 'customerId',\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  resources: [restApi],\n  value: 'value',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ApiKeyProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiKeyProps","@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiKeyProps: apigateway.ApiKeyProps = {\n  apiKeyName: 'apiKeyName',\n  customerId: 'customerId',\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  resources: [restApi],\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":14,"75":70,"91":9,"130":5,"153":6,"169":6,"192":7,"193":9,"194":4,"196":1,"225":6,"242":6,"243":6,"254":2,"255":2,"256":2,"281":38,"290":1},"fqnsFingerprint":"8597c5e1c2512e37145c6245f8a06521caba15dc2e98ffc53a91cae791580c7d"},"270217fd00367522b62586a638849646c5cd24aee78eae0ced8c25fe659cb650":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# grantable: iam.IGrantable\n# local_bundling: cdk.ILocalBundling\n\nasset_api_definition = apigateway.AssetApiDefinition(\"path\",\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    readers=[grantable],\n    source_hash=\"sourceHash\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\nvar assetApiDefinition = new AssetApiDefinition(\"path\", new AssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Readers = new [] { grantable },\n    SourceHash = \"sourceHash\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\n\nAssetApiDefinition assetApiDefinition = AssetApiDefinition.Builder.create(\"path\")\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .readers(List.of(grantable))\n        .sourceHash(\"sourceHash\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assets \"github.com/aws-samples/dummy/awscdkassets\"\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar grantable iGrantable\nvar localBundling iLocalBundling\n\nassetApiDefinition := apigateway.NewAssetApiDefinition(jsii.String(\"path\"), &AssetOptions{\n\tAssetHash: jsii.String(\"assetHash\"),\n\tAssetHashType: cdk.AssetHashType_SOURCE,\n\tBundling: &BundlingOptions{\n\t\tImage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tCommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tEntrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tEnvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tLocal: localBundling,\n\t\tOutputType: cdk.BundlingOutput_ARCHIVED,\n\t\tSecurityOpt: jsii.String(\"securityOpt\"),\n\t\tUser: jsii.String(\"user\"),\n\t\tVolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tContainerPath: jsii.String(\"containerPath\"),\n\t\t\t\tHostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tConsistency: cdk.DockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tWorkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\tExclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tFollow: assets.FollowMode_NEVER,\n\tFollowSymlinks: cdk.SymlinkFollowMode_NEVER,\n\tIgnoreMode: cdk.IgnoreMode_GLOB,\n\tReaders: []*iGrantable{\n\t\tgrantable,\n\t},\n\tSourceHash: jsii.String(\"sourceHash\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetApiDefinition = new apigateway.AssetApiDefinition('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AssetApiDefinition"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assets.FollowMode","@aws-cdk/assets.FollowMode#NEVER","@aws-cdk/aws-apigateway.AssetApiDefinition","@aws-cdk/aws-s3-assets.AssetOptions","@aws-cdk/core.AssetHashType","@aws-cdk/core.AssetHashType#SOURCE","@aws-cdk/core.BundlingOptions","@aws-cdk/core.BundlingOutput","@aws-cdk/core.BundlingOutput#ARCHIVED","@aws-cdk/core.DockerImage","@aws-cdk/core.DockerVolumeConsistency","@aws-cdk/core.DockerVolumeConsistency#CONSISTENT","@aws-cdk/core.ILocalBundling","@aws-cdk/core.IgnoreMode","@aws-cdk/core.IgnoreMode#GLOB","@aws-cdk/core.SymlinkFollowMode","@aws-cdk/core.SymlinkFollowMode#NEVER"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetApiDefinition = new apigateway.AssetApiDefinition('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":16,"75":60,"130":3,"153":3,"169":3,"192":5,"193":4,"194":13,"197":1,"225":4,"242":4,"243":4,"254":4,"255":4,"256":4,"281":23,"290":1},"fqnsFingerprint":"a32acc7f615c18052adfef6fcd530723177422330a71c4bc743dc2b1079ef6f2"},"86a134e0ba9d06aea7f20c31820c104d19e8b50f54b58bb27f1dde1ce7301a1b":{"translations":{"python":{"source":"# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)","version":"2"},"csharp":{"source":"Resource books;\nvar userPool = new UserPool(this, \"UserPool\");\n\nvar auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});","version":"1"},"java":{"source":"Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());","version":"1"},"go":{"source":"var books resource\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauth := apigateway.NewCognitoUserPoolsAuthorizer(this, jsii.String(\"booksAuthorizer\"), &CognitoUserPoolsAuthorizerProps{\n\tCognitoUserPools: []iUserPool{\n\t\tuserPool,\n\t},\n})\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n\tAuthorizationType: apigateway.AuthorizationType_COGNITO,\n})","version":"1"},"$":{"source":"const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AuthorizationType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#COGNITO","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-cognito.UserPool","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":2,"130":1,"153":1,"169":1,"192":1,"193":2,"194":6,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"59b0c018ec6ada498004d63b9259746ce79c8bc2344cfd9c79e45c5e86389fbc"},"b3f88f01b299f38ee9ffa551f7c0ec3474a22c5c1f027921881802d9b847c704":{"translations":{"python":{"source":"get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)","version":"2"},"csharp":{"source":"var getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});","version":"1"},"java":{"source":"AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();","version":"1"},"go":{"source":"getMessageIntegration := apigateway.NewAwsIntegration(&AwsIntegrationProps{\n\tService: jsii.String(\"sqs\"),\n\tPath: jsii.String(\"queueName\"),\n\tRegion: jsii.String(\"eu-west-1\"),\n})","version":"1"},"$":{"source":"const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AwsIntegration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AwsIntegration","@aws-cdk/aws-apigateway.AwsIntegrationProps"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":6,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"f9d256f6c0abedea087741bcc43df114cf453cd8cea6fa2c375b6973d556419a"},"dd071be1f34b0cf0f605d29b0c9eea62fbcc801d80cab9786d656e4d63efbda5":{"translations":{"python":{"source":"get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)","version":"2"},"csharp":{"source":"var getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});","version":"1"},"java":{"source":"AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();","version":"1"},"go":{"source":"getMessageIntegration := apigateway.NewAwsIntegration(&AwsIntegrationProps{\n\tService: jsii.String(\"sqs\"),\n\tPath: jsii.String(\"queueName\"),\n\tRegion: jsii.String(\"eu-west-1\"),\n})","version":"1"},"$":{"source":"const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.AwsIntegrationProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AwsIntegration","@aws-cdk/aws-apigateway.AwsIntegrationProps"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":6,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"f9d256f6c0abedea087741bcc43df114cf453cd8cea6fa2c375b6973d556419a"},"26cb46e1bddd79a4002c1a3e788f3ffe523d97db48fa0f285b5e3108bf9b3d70":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# domain_name: apigateway.DomainName\n# rest_api: apigateway.RestApi\n# stage: apigateway.Stage\n\nbase_path_mapping = apigateway.BasePathMapping(self, \"MyBasePathMapping\",\n    domain_name=domain_name,\n    rest_api=rest_api,\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    stage=stage\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nvar basePathMapping = new BasePathMapping(this, \"MyBasePathMapping\", new BasePathMappingProps {\n    DomainName = domainName,\n    RestApi = restApi,\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Stage = stage\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMapping basePathMapping = BasePathMapping.Builder.create(this, \"MyBasePathMapping\")\n        .domainName(domainName)\n        .restApi(restApi)\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .stage(stage)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar domainName domainName\nvar restApi restApi\nvar stage stage\n\nbasePathMapping := apigateway.NewBasePathMapping(this, jsii.String(\"MyBasePathMapping\"), &BasePathMappingProps{\n\tDomainName: domainName,\n\tRestApi: restApi,\n\n\t// the properties below are optional\n\tBasePath: jsii.String(\"basePath\"),\n\tStage: stage,\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\nconst basePathMapping = new apigateway.BasePathMapping(this, 'MyBasePathMapping', {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.BasePathMapping"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.BasePathMapping","@aws-cdk/aws-apigateway.BasePathMappingProps","@aws-cdk/aws-apigateway.IDomainName","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.Stage","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basePathMapping = new apigateway.BasePathMapping(this, 'MyBasePathMapping', {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":20,"104":1,"130":3,"153":3,"169":3,"193":1,"194":1,"197":1,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"7a2f9ed9b09188fe734c0818ef7a025e7a94752511b626fbf4ffd02d882e1004"},"96a8fc350d4551d267e6e6ca19009921ac7a143f29e4ee6c01fcd03c66b916b1":{"translations":{"python":{"source":"# domain: apigateway.DomainName\n# api1: apigateway.RestApi\n# api2: apigateway.RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")","version":"2"},"csharp":{"source":"DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });","version":"1"},"java":{"source":"DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());","version":"1"},"go":{"source":"var domain domainName\nvar api1 restApi\nvar api2 restApi\n\n\ndomain.AddBasePathMapping(api1, &BasePathMappingOptions{\n\tBasePath: jsii.String(\"go-to-api1\"),\n})\ndomain.AddBasePathMapping(api2, &BasePathMappingOptions{\n\tBasePath: jsii.String(\"boom\"),\n})","version":"1"},"$":{"source":"declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.BasePathMappingOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.BasePathMappingOptions","@aws-cdk/aws-apigateway.DomainName#addBasePathMapping","@aws-cdk/aws-apigateway.IRestApi"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":17,"130":3,"153":3,"169":3,"193":2,"194":2,"196":2,"225":3,"226":2,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"aa497042030a691b1cc784c4822b2ca36f4b6074cc083df782bb4ac57e3582b9"},"73fdd0a0a99cecb748f5cb8931fe992c500744de0083a9f17cbda498790edc48":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# domain_name: apigateway.DomainName\n# rest_api: apigateway.RestApi\n# stage: apigateway.Stage\n\nbase_path_mapping_props = apigateway.BasePathMappingProps(\n    domain_name=domain_name,\n    rest_api=rest_api,\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    stage=stage\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nvar basePathMappingProps = new BasePathMappingProps {\n    DomainName = domainName,\n    RestApi = restApi,\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Stage = stage\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainName domainName;\nRestApi restApi;\nStage stage;\n\nBasePathMappingProps basePathMappingProps = BasePathMappingProps.builder()\n        .domainName(domainName)\n        .restApi(restApi)\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .stage(stage)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar domainName domainName\nvar restApi restApi\nvar stage stage\n\nbasePathMappingProps := &BasePathMappingProps{\n\tDomainName: domainName,\n\tRestApi: restApi,\n\n\t// the properties below are optional\n\tBasePath: jsii.String(\"basePath\"),\n\tStage: stage,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\nconst basePathMappingProps: apigateway.BasePathMappingProps = {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.BasePathMappingProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.BasePathMappingProps","@aws-cdk/aws-apigateway.IDomainName","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.Stage"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const domainName: apigateway.DomainName;\ndeclare const restApi: apigateway.RestApi;\ndeclare const stage: apigateway.Stage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basePathMappingProps: apigateway.BasePathMappingProps = {\n  domainName: domainName,\n  restApi: restApi,\n\n  // the properties below are optional\n  basePath: 'basePath',\n  stage: stage,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":20,"130":3,"153":4,"169":4,"193":1,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"4c81164b95bef842201600e3c37fb9809c23075f95af47af4ce12043bd7f505e"},"57b5c8d71ae96e0641a1f1ed840ccfc0c1c630b5255ec860e70ef6ec0bcaa006":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_account = apigateway.CfnAccount(self, \"MyCfnAccount\",\n    cloud_watch_role_arn=\"cloudWatchRoleArn\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAccount = new CfnAccount(this, \"MyCfnAccount\", new CfnAccountProps {\n    CloudWatchRoleArn = \"cloudWatchRoleArn\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAccount cfnAccount = CfnAccount.Builder.create(this, \"MyCfnAccount\")\n        .cloudWatchRoleArn(\"cloudWatchRoleArn\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAccount := apigateway.NewCfnAccount(this, jsii.String(\"MyCfnAccount\"), &CfnAccountProps{\n\tCloudWatchRoleArn: jsii.String(\"cloudWatchRoleArn\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAccount = new apigateway.CfnAccount(this, 'MyCfnAccount', /* all optional props */ {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAccount"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAccount","@aws-cdk/aws-apigateway.CfnAccountProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccount = new apigateway.CfnAccount(this, 'MyCfnAccount', /* all optional props */ {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":5,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"b0992f157b83b23fbf7969ec9eb29d2d3e4a6751de4bf6e684e5d752284e15a1"},"87a356c7c2025acabee9d5bbf6ac01f66e69b9242604cd347f98b2c928abea58":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_account_props = apigateway.CfnAccountProps(\n    cloud_watch_role_arn=\"cloudWatchRoleArn\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAccountProps = new CfnAccountProps {\n    CloudWatchRoleArn = \"cloudWatchRoleArn\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAccountProps cfnAccountProps = CfnAccountProps.builder()\n        .cloudWatchRoleArn(\"cloudWatchRoleArn\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAccountProps := &CfnAccountProps{\n\tCloudWatchRoleArn: jsii.String(\"cloudWatchRoleArn\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAccountProps: apigateway.CfnAccountProps = {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAccountProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAccountProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccountProps: apigateway.CfnAccountProps = {\n  cloudWatchRoleArn: 'cloudWatchRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":5,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"4a282113b2974b50c7067cd5a471cbcbc5ec6a8c10623d33aa12e95222bd0f7e"},"f46978cb10e14b64594179d6f9aa442ef12f06beb3f4d043f8555f5275cf880f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_key = apigateway.CfnApiKey(self, \"MyCfnApiKey\",\n    customer_id=\"customerId\",\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    name=\"name\",\n    stage_keys=[apigateway.CfnApiKey.StageKeyProperty(\n        rest_api_id=\"restApiId\",\n        stage_name=\"stageName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    value=\"value\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnApiKey = new CfnApiKey(this, \"MyCfnApiKey\", new CfnApiKeyProps {\n    CustomerId = \"customerId\",\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Name = \"name\",\n    StageKeys = new [] { new StageKeyProperty {\n        RestApiId = \"restApiId\",\n        StageName = \"stageName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Value = \"value\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiKey cfnApiKey = CfnApiKey.Builder.create(this, \"MyCfnApiKey\")\n        .customerId(\"customerId\")\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .name(\"name\")\n        .stageKeys(List.of(StageKeyProperty.builder()\n                .restApiId(\"restApiId\")\n                .stageName(\"stageName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .value(\"value\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnApiKey := apigateway.NewCfnApiKey(this, jsii.String(\"MyCfnApiKey\"), &CfnApiKeyProps{\n\tCustomerId: jsii.String(\"customerId\"),\n\tDescription: jsii.String(\"description\"),\n\tEnabled: jsii.Boolean(false),\n\tGenerateDistinctId: jsii.Boolean(false),\n\tName: jsii.String(\"name\"),\n\tStageKeys: []interface{}{\n\t\t&StageKeyProperty{\n\t\t\tRestApiId: jsii.String(\"restApiId\"),\n\t\t\tStageName: jsii.String(\"stageName\"),\n\t\t},\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tValue: jsii.String(\"value\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiKey = new apigateway.CfnApiKey(this, 'MyCfnApiKey', /* all optional props */ {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiKey"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiKey","@aws-cdk/aws-apigateway.CfnApiKeyProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKey = new apigateway.CfnApiKey(this, 'MyCfnApiKey', /* all optional props */ {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":10,"75":16,"91":2,"104":1,"192":2,"193":3,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"882d8705e219c4255df04fc00f8e056c14836c0972f093eac70fb9a23a22cf7d"},"8bbd3c3e532379b27dc2d39f233f03ad3cc4972a3996dd16cbebe4ed1a962169":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nstage_key_property = apigateway.CfnApiKey.StageKeyProperty(\n    rest_api_id=\"restApiId\",\n    stage_name=\"stageName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar stageKeyProperty = new StageKeyProperty {\n    RestApiId = \"restApiId\",\n    StageName = \"stageName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nStageKeyProperty stageKeyProperty = StageKeyProperty.builder()\n        .restApiId(\"restApiId\")\n        .stageName(\"stageName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nstageKeyProperty := &StageKeyProperty{\n\tRestApiId: jsii.String(\"restApiId\"),\n\tStageName: jsii.String(\"stageName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst stageKeyProperty: apigateway.CfnApiKey.StageKeyProperty = {\n  restApiId: 'restApiId',\n  stageName: 'stageName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiKey.StageKeyProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiKey.StageKeyProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageKeyProperty: apigateway.CfnApiKey.StageKeyProperty = {\n  restApiId: 'restApiId',\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"3dc080ef4123ce2c58d14c558fcf1d7732d51b05fa31a5cbd8107b59ca55ff71"},"95418c9f47a26016d8e400f9f3e5fe973de87e9de65f36297093d915df63a298":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_key_props = apigateway.CfnApiKeyProps(\n    customer_id=\"customerId\",\n    description=\"description\",\n    enabled=False,\n    generate_distinct_id=False,\n    name=\"name\",\n    stage_keys=[apigateway.CfnApiKey.StageKeyProperty(\n        rest_api_id=\"restApiId\",\n        stage_name=\"stageName\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    value=\"value\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnApiKeyProps = new CfnApiKeyProps {\n    CustomerId = \"customerId\",\n    Description = \"description\",\n    Enabled = false,\n    GenerateDistinctId = false,\n    Name = \"name\",\n    StageKeys = new [] { new StageKeyProperty {\n        RestApiId = \"restApiId\",\n        StageName = \"stageName\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Value = \"value\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiKeyProps cfnApiKeyProps = CfnApiKeyProps.builder()\n        .customerId(\"customerId\")\n        .description(\"description\")\n        .enabled(false)\n        .generateDistinctId(false)\n        .name(\"name\")\n        .stageKeys(List.of(StageKeyProperty.builder()\n                .restApiId(\"restApiId\")\n                .stageName(\"stageName\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .value(\"value\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnApiKeyProps := &CfnApiKeyProps{\n\tCustomerId: jsii.String(\"customerId\"),\n\tDescription: jsii.String(\"description\"),\n\tEnabled: jsii.Boolean(false),\n\tGenerateDistinctId: jsii.Boolean(false),\n\tName: jsii.String(\"name\"),\n\tStageKeys: []interface{}{\n\t\t&StageKeyProperty{\n\t\t\tRestApiId: jsii.String(\"restApiId\"),\n\t\t\tStageName: jsii.String(\"stageName\"),\n\t\t},\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tValue: jsii.String(\"value\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiKeyProps: apigateway.CfnApiKeyProps = {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiKeyProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiKeyProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiKeyProps: apigateway.CfnApiKeyProps = {\n  customerId: 'customerId',\n  description: 'description',\n  enabled: false,\n  generateDistinctId: false,\n  name: 'name',\n  stageKeys: [{\n    restApiId: 'restApiId',\n    stageName: 'stageName',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":9,"75":16,"91":2,"153":1,"169":1,"192":2,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"f8d5e249528d28f9c1e6c15d708ac6cc6070be7199fcf33628d2ed4b7c137ce3"},"792e35d491906dd0873e48cf8ce8e094ba746e01b8faba024e00e28e12be6ee4":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_mapping_v2 = apigateway.CfnApiMappingV2(self, \"MyCfnApiMappingV2\",\n    api_id=\"apiId\",\n    domain_name=\"domainName\",\n    stage=\"stage\",\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnApiMappingV2 = new CfnApiMappingV2(this, \"MyCfnApiMappingV2\", new CfnApiMappingV2Props {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\",\n    Stage = \"stage\",\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiMappingV2 cfnApiMappingV2 = CfnApiMappingV2.Builder.create(this, \"MyCfnApiMappingV2\")\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .stage(\"stage\")\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnApiMappingV2 := apigateway.NewCfnApiMappingV2(this, jsii.String(\"MyCfnApiMappingV2\"), &CfnApiMappingV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tDomainName: jsii.String(\"domainName\"),\n\tStage: jsii.String(\"stage\"),\n\n\t// the properties below are optional\n\tApiMappingKey: jsii.String(\"apiMappingKey\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiMappingV2 = new apigateway.CfnApiMappingV2(this, 'MyCfnApiMappingV2', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiMappingV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiMappingV2","@aws-cdk/aws-apigateway.CfnApiMappingV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiMappingV2 = new apigateway.CfnApiMappingV2(this, 'MyCfnApiMappingV2', {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":8,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"d06906a1def9f495f0adc2cf00b088f8ffe0620bd224461697c5183d908c9775"},"77ecf8ac4cf14a148f524aca91cad61635d2107665f86d68b2a7c29b40613242":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_api_mapping_v2_props = apigateway.CfnApiMappingV2Props(\n    api_id=\"apiId\",\n    domain_name=\"domainName\",\n    stage=\"stage\",\n\n    # the properties below are optional\n    api_mapping_key=\"apiMappingKey\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnApiMappingV2Props = new CfnApiMappingV2Props {\n    ApiId = \"apiId\",\n    DomainName = \"domainName\",\n    Stage = \"stage\",\n\n    // the properties below are optional\n    ApiMappingKey = \"apiMappingKey\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnApiMappingV2Props cfnApiMappingV2Props = CfnApiMappingV2Props.builder()\n        .apiId(\"apiId\")\n        .domainName(\"domainName\")\n        .stage(\"stage\")\n\n        // the properties below are optional\n        .apiMappingKey(\"apiMappingKey\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnApiMappingV2Props := &CfnApiMappingV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tDomainName: jsii.String(\"domainName\"),\n\tStage: jsii.String(\"stage\"),\n\n\t// the properties below are optional\n\tApiMappingKey: jsii.String(\"apiMappingKey\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnApiMappingV2Props: apigateway.CfnApiMappingV2Props = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiMappingV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiMappingV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiMappingV2Props: apigateway.CfnApiMappingV2Props = {\n  apiId: 'apiId',\n  domainName: 'domainName',\n  stage: 'stage',\n\n  // the properties below are optional\n  apiMappingKey: 'apiMappingKey',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":8,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"a192b17a4dd4d51ca31e774ade048b093e25e21bbc95029c2e7a7d2f862fbfda"},"d8ae14683fcb9707cbf7196dba877604fe14d77ea68fbf3506b47da75cf7f072":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# tags: Any\n\ncfn_api_v2 = apigateway.CfnApiV2(self, \"MyCfnApiV2\",\n    api_key_selection_expression=\"apiKeySelectionExpression\",\n    base_path=\"basePath\",\n    body=body,\n    body_s3_location=apigateway.CfnApiV2.BodyS3LocationProperty(\n        bucket=\"bucket\",\n        etag=\"etag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    cors_configuration=apigateway.CfnApiV2.CorsProperty(\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        allow_origins=[\"allowOrigins\"],\n        expose_headers=[\"exposeHeaders\"],\n        max_age=123\n    ),\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    disable_schema_validation=False,\n    fail_on_warnings=False,\n    name=\"name\",\n    protocol_type=\"protocolType\",\n    route_key=\"routeKey\",\n    route_selection_expression=\"routeSelectionExpression\",\n    tags=tags,\n    target=\"target\",\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar tags;\n\nvar cfnApiV2 = new CfnApiV2(this, \"MyCfnApiV2\", new CfnApiV2Props {\n    ApiKeySelectionExpression = \"apiKeySelectionExpression\",\n    BasePath = \"basePath\",\n    Body = body,\n    BodyS3Location = new BodyS3LocationProperty {\n        Bucket = \"bucket\",\n        Etag = \"etag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CorsConfiguration = new CorsProperty {\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        AllowOrigins = new [] { \"allowOrigins\" },\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = 123\n    },\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    DisableSchemaValidation = false,\n    FailOnWarnings = false,\n    Name = \"name\",\n    ProtocolType = \"protocolType\",\n    RouteKey = \"routeKey\",\n    RouteSelectionExpression = \"routeSelectionExpression\",\n    Tags = tags,\n    Target = \"target\",\n    Version = \"version\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject tags;\n\nCfnApiV2 cfnApiV2 = CfnApiV2.Builder.create(this, \"MyCfnApiV2\")\n        .apiKeySelectionExpression(\"apiKeySelectionExpression\")\n        .basePath(\"basePath\")\n        .body(body)\n        .bodyS3Location(BodyS3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .etag(\"etag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .corsConfiguration(CorsProperty.builder()\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .allowOrigins(List.of(\"allowOrigins\"))\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(123)\n                .build())\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .disableSchemaValidation(false)\n        .failOnWarnings(false)\n        .name(\"name\")\n        .protocolType(\"protocolType\")\n        .routeKey(\"routeKey\")\n        .routeSelectionExpression(\"routeSelectionExpression\")\n        .tags(tags)\n        .target(\"target\")\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar body interface{}\nvar tags interface{}\n\ncfnApiV2 := apigateway.NewCfnApiV2(this, jsii.String(\"MyCfnApiV2\"), &CfnApiV2Props{\n\tApiKeySelectionExpression: jsii.String(\"apiKeySelectionExpression\"),\n\tBasePath: jsii.String(\"basePath\"),\n\tBody: body,\n\tBodyS3Location: &BodyS3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tEtag: jsii.String(\"etag\"),\n\t\tKey: jsii.String(\"key\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tCorsConfiguration: &CorsProperty{\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: jsii.Number(123),\n\t},\n\tCredentialsArn: jsii.String(\"credentialsArn\"),\n\tDescription: jsii.String(\"description\"),\n\tDisableSchemaValidation: jsii.Boolean(false),\n\tFailOnWarnings: jsii.Boolean(false),\n\tName: jsii.String(\"name\"),\n\tProtocolType: jsii.String(\"protocolType\"),\n\tRouteKey: jsii.String(\"routeKey\"),\n\tRouteSelectionExpression: jsii.String(\"routeSelectionExpression\"),\n\tTags: tags,\n\tTarget: jsii.String(\"target\"),\n\tVersion: jsii.String(\"version\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\nconst cfnApiV2 = new apigateway.CfnApiV2(this, 'MyCfnApiV2', /* all optional props */ {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiV2","@aws-cdk/aws-apigateway.CfnApiV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiV2 = new apigateway.CfnApiV2(this, 'MyCfnApiV2', /* all optional props */ {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":20,"75":34,"91":3,"104":1,"125":2,"130":2,"192":4,"193":3,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":26,"290":1},"fqnsFingerprint":"c3d86b146ab5a5338a160517d5cadc0ed842bff6a2e74a147a9903cbd389a972"},"b5babaecdd9f40ff49e2ac04b9cca821325a2bb9e5d1db6fdeccc50e745c0eb4":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nbody_s3_location_property = apigateway.CfnApiV2.BodyS3LocationProperty(\n    bucket=\"bucket\",\n    etag=\"etag\",\n    key=\"key\",\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar bodyS3LocationProperty = new BodyS3LocationProperty {\n    Bucket = \"bucket\",\n    Etag = \"etag\",\n    Key = \"key\",\n    Version = \"version\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nBodyS3LocationProperty bodyS3LocationProperty = BodyS3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .etag(\"etag\")\n        .key(\"key\")\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nbodyS3LocationProperty := &BodyS3LocationProperty{\n\tBucket: jsii.String(\"bucket\"),\n\tEtag: jsii.String(\"etag\"),\n\tKey: jsii.String(\"key\"),\n\tVersion: jsii.String(\"version\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst bodyS3LocationProperty: apigateway.CfnApiV2.BodyS3LocationProperty = {\n  bucket: 'bucket',\n  etag: 'etag',\n  key: 'key',\n  version: 'version',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiV2.BodyS3LocationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiV2.BodyS3LocationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bodyS3LocationProperty: apigateway.CfnApiV2.BodyS3LocationProperty = {\n  bucket: 'bucket',\n  etag: 'etag',\n  key: 'key',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":9,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"b3b3a27f40ee02b3a33d9855ec1acbbe2611541ffa1f44c36ab31a0c286b5a24"},"61b30d520c86c8dd7e71708bb8af6fc3a517c5ed48c26b192c666f596984de8e":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncors_property = apigateway.CfnApiV2.CorsProperty(\n    allow_credentials=False,\n    allow_headers=[\"allowHeaders\"],\n    allow_methods=[\"allowMethods\"],\n    allow_origins=[\"allowOrigins\"],\n    expose_headers=[\"exposeHeaders\"],\n    max_age=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar corsProperty = new CorsProperty {\n    AllowCredentials = false,\n    AllowHeaders = new [] { \"allowHeaders\" },\n    AllowMethods = new [] { \"allowMethods\" },\n    AllowOrigins = new [] { \"allowOrigins\" },\n    ExposeHeaders = new [] { \"exposeHeaders\" },\n    MaxAge = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCorsProperty corsProperty = CorsProperty.builder()\n        .allowCredentials(false)\n        .allowHeaders(List.of(\"allowHeaders\"))\n        .allowMethods(List.of(\"allowMethods\"))\n        .allowOrigins(List.of(\"allowOrigins\"))\n        .exposeHeaders(List.of(\"exposeHeaders\"))\n        .maxAge(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncorsProperty := &CorsProperty{\n\tAllowCredentials: jsii.Boolean(false),\n\tAllowHeaders: []*string{\n\t\tjsii.String(\"allowHeaders\"),\n\t},\n\tAllowMethods: []*string{\n\t\tjsii.String(\"allowMethods\"),\n\t},\n\tAllowOrigins: []*string{\n\t\tjsii.String(\"allowOrigins\"),\n\t},\n\tExposeHeaders: []*string{\n\t\tjsii.String(\"exposeHeaders\"),\n\t},\n\tMaxAge: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst corsProperty: apigateway.CfnApiV2.CorsProperty = {\n  allowCredentials: false,\n  allowHeaders: ['allowHeaders'],\n  allowMethods: ['allowMethods'],\n  allowOrigins: ['allowOrigins'],\n  exposeHeaders: ['exposeHeaders'],\n  maxAge: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiV2.CorsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiV2.CorsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst corsProperty: apigateway.CfnApiV2.CorsProperty = {\n  allowCredentials: false,\n  allowHeaders: ['allowHeaders'],\n  allowMethods: ['allowMethods'],\n  allowOrigins: ['allowOrigins'],\n  exposeHeaders: ['exposeHeaders'],\n  maxAge: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":5,"75":11,"91":1,"153":2,"169":1,"192":4,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"3dcf16154a6368e261c896c5867570ec7168a259883fe532b7479e57ce9dc750"},"a6290da449c6aa7fd25921df026e4a7a8cfadf6cc30b7040de20b9e3eea201a3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# tags: Any\n\ncfn_api_v2_props = apigateway.CfnApiV2Props(\n    api_key_selection_expression=\"apiKeySelectionExpression\",\n    base_path=\"basePath\",\n    body=body,\n    body_s3_location=apigateway.CfnApiV2.BodyS3LocationProperty(\n        bucket=\"bucket\",\n        etag=\"etag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    cors_configuration=apigateway.CfnApiV2.CorsProperty(\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        allow_origins=[\"allowOrigins\"],\n        expose_headers=[\"exposeHeaders\"],\n        max_age=123\n    ),\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    disable_schema_validation=False,\n    fail_on_warnings=False,\n    name=\"name\",\n    protocol_type=\"protocolType\",\n    route_key=\"routeKey\",\n    route_selection_expression=\"routeSelectionExpression\",\n    tags=tags,\n    target=\"target\",\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar tags;\n\nvar cfnApiV2Props = new CfnApiV2Props {\n    ApiKeySelectionExpression = \"apiKeySelectionExpression\",\n    BasePath = \"basePath\",\n    Body = body,\n    BodyS3Location = new BodyS3LocationProperty {\n        Bucket = \"bucket\",\n        Etag = \"etag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CorsConfiguration = new CorsProperty {\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        AllowOrigins = new [] { \"allowOrigins\" },\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = 123\n    },\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    DisableSchemaValidation = false,\n    FailOnWarnings = false,\n    Name = \"name\",\n    ProtocolType = \"protocolType\",\n    RouteKey = \"routeKey\",\n    RouteSelectionExpression = \"routeSelectionExpression\",\n    Tags = tags,\n    Target = \"target\",\n    Version = \"version\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject tags;\n\nCfnApiV2Props cfnApiV2Props = CfnApiV2Props.builder()\n        .apiKeySelectionExpression(\"apiKeySelectionExpression\")\n        .basePath(\"basePath\")\n        .body(body)\n        .bodyS3Location(BodyS3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .etag(\"etag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .corsConfiguration(CorsProperty.builder()\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .allowOrigins(List.of(\"allowOrigins\"))\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(123)\n                .build())\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .disableSchemaValidation(false)\n        .failOnWarnings(false)\n        .name(\"name\")\n        .protocolType(\"protocolType\")\n        .routeKey(\"routeKey\")\n        .routeSelectionExpression(\"routeSelectionExpression\")\n        .tags(tags)\n        .target(\"target\")\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar body interface{}\nvar tags interface{}\n\ncfnApiV2Props := &CfnApiV2Props{\n\tApiKeySelectionExpression: jsii.String(\"apiKeySelectionExpression\"),\n\tBasePath: jsii.String(\"basePath\"),\n\tBody: body,\n\tBodyS3Location: &BodyS3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tEtag: jsii.String(\"etag\"),\n\t\tKey: jsii.String(\"key\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tCorsConfiguration: &CorsProperty{\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: jsii.Number(123),\n\t},\n\tCredentialsArn: jsii.String(\"credentialsArn\"),\n\tDescription: jsii.String(\"description\"),\n\tDisableSchemaValidation: jsii.Boolean(false),\n\tFailOnWarnings: jsii.Boolean(false),\n\tName: jsii.String(\"name\"),\n\tProtocolType: jsii.String(\"protocolType\"),\n\tRouteKey: jsii.String(\"routeKey\"),\n\tRouteSelectionExpression: jsii.String(\"routeSelectionExpression\"),\n\tTags: tags,\n\tTarget: jsii.String(\"target\"),\n\tVersion: jsii.String(\"version\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\nconst cfnApiV2Props: apigateway.CfnApiV2Props = {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnApiV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnApiV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApiV2Props: apigateway.CfnApiV2Props = {\n  apiKeySelectionExpression: 'apiKeySelectionExpression',\n  basePath: 'basePath',\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    etag: 'etag',\n    key: 'key',\n    version: 'version',\n  },\n  corsConfiguration: {\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    allowOrigins: ['allowOrigins'],\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: 123,\n  },\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  disableSchemaValidation: false,\n  failOnWarnings: false,\n  name: 'name',\n  protocolType: 'protocolType',\n  routeKey: 'routeKey',\n  routeSelectionExpression: 'routeSelectionExpression',\n  tags: tags,\n  target: 'target',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":19,"75":34,"91":3,"125":2,"130":2,"153":1,"169":1,"192":4,"193":3,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":26,"290":1},"fqnsFingerprint":"15a72ed6f8db8de42c6bd1a09d89ae7b20b25017240b63011466b9c4eca1ec19"},"ebf35f54ba4573e644cbb9c48546dc9097703db2c7797cbf22f9806936997a8f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer = apigateway.CfnAuthorizer(self, \"MyCfnAuthorizer\",\n    name=\"name\",\n    rest_api_id=\"restApiId\",\n    type=\"type\",\n\n    # the properties below are optional\n    authorizer_credentials=\"authorizerCredentials\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    auth_type=\"authType\",\n    identity_source=\"identitySource\",\n    identity_validation_expression=\"identityValidationExpression\",\n    provider_arns=[\"providerArns\"]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAuthorizer = new CfnAuthorizer(this, \"MyCfnAuthorizer\", new CfnAuthorizerProps {\n    Name = \"name\",\n    RestApiId = \"restApiId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AuthorizerCredentials = \"authorizerCredentials\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    AuthType = \"authType\",\n    IdentitySource = \"identitySource\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    ProviderArns = new [] { \"providerArns\" }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizer cfnAuthorizer = CfnAuthorizer.Builder.create(this, \"MyCfnAuthorizer\")\n        .name(\"name\")\n        .restApiId(\"restApiId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .authorizerCredentials(\"authorizerCredentials\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .authType(\"authType\")\n        .identitySource(\"identitySource\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .providerArns(List.of(\"providerArns\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAuthorizer := apigateway.NewCfnAuthorizer(this, jsii.String(\"MyCfnAuthorizer\"), &CfnAuthorizerProps{\n\tName: jsii.String(\"name\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\tType: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tAuthorizerCredentials: jsii.String(\"authorizerCredentials\"),\n\tAuthorizerResultTtlInSeconds: jsii.Number(123),\n\tAuthorizerUri: jsii.String(\"authorizerUri\"),\n\tAuthType: jsii.String(\"authType\"),\n\tIdentitySource: jsii.String(\"identitySource\"),\n\tIdentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\tProviderArns: []*string{\n\t\tjsii.String(\"providerArns\"),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizer = new apigateway.CfnAuthorizer(this, 'MyCfnAuthorizer', {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAuthorizer"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAuthorizer","@aws-cdk/aws-apigateway.CfnAuthorizerProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizer = new apigateway.CfnAuthorizer(this, 'MyCfnAuthorizer', {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":11,"75":14,"104":1,"192":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":10,"290":1},"fqnsFingerprint":"2935ba6b015dee21728289c6e38d22a5cb29ebb5adb6233594fa228ed74ceed8"},"6287d0eaf0536cceea7e3f10b96f2f7ce685a0a33db1c4323924262bec14d404":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_props = apigateway.CfnAuthorizerProps(\n    name=\"name\",\n    rest_api_id=\"restApiId\",\n    type=\"type\",\n\n    # the properties below are optional\n    authorizer_credentials=\"authorizerCredentials\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    auth_type=\"authType\",\n    identity_source=\"identitySource\",\n    identity_validation_expression=\"identityValidationExpression\",\n    provider_arns=[\"providerArns\"]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAuthorizerProps = new CfnAuthorizerProps {\n    Name = \"name\",\n    RestApiId = \"restApiId\",\n    Type = \"type\",\n\n    // the properties below are optional\n    AuthorizerCredentials = \"authorizerCredentials\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    AuthType = \"authType\",\n    IdentitySource = \"identitySource\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    ProviderArns = new [] { \"providerArns\" }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerProps cfnAuthorizerProps = CfnAuthorizerProps.builder()\n        .name(\"name\")\n        .restApiId(\"restApiId\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .authorizerCredentials(\"authorizerCredentials\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .authType(\"authType\")\n        .identitySource(\"identitySource\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .providerArns(List.of(\"providerArns\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAuthorizerProps := &CfnAuthorizerProps{\n\tName: jsii.String(\"name\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\tType: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tAuthorizerCredentials: jsii.String(\"authorizerCredentials\"),\n\tAuthorizerResultTtlInSeconds: jsii.Number(123),\n\tAuthorizerUri: jsii.String(\"authorizerUri\"),\n\tAuthType: jsii.String(\"authType\"),\n\tIdentitySource: jsii.String(\"identitySource\"),\n\tIdentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\tProviderArns: []*string{\n\t\tjsii.String(\"providerArns\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerProps: apigateway.CfnAuthorizerProps = {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAuthorizerProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAuthorizerProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerProps: apigateway.CfnAuthorizerProps = {\n  name: 'name',\n  restApiId: 'restApiId',\n  type: 'type',\n\n  // the properties below are optional\n  authorizerCredentials: 'authorizerCredentials',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  authType: 'authType',\n  identitySource: 'identitySource',\n  identityValidationExpression: 'identityValidationExpression',\n  providerArns: ['providerArns'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":10,"75":14,"153":1,"169":1,"192":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":10,"290":1},"fqnsFingerprint":"2171094f05dd08a0132199a68928556a927a6caa0520bcf22a829488ddf9cfcd"},"689e2cdcac358c9df83cc95bbfe43ef030c9021088f2db3f9b807e7baaaf4552":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_v2 = apigateway.CfnAuthorizerV2(self, \"MyCfnAuthorizerV2\",\n    api_id=\"apiId\",\n    authorizer_type=\"authorizerType\",\n    identity_source=[\"identitySource\"],\n    name=\"name\",\n\n    # the properties below are optional\n    authorizer_credentials_arn=\"authorizerCredentialsArn\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    identity_validation_expression=\"identityValidationExpression\",\n    jwt_configuration=apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n        audience=[\"audience\"],\n        issuer=\"issuer\"\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAuthorizerV2 = new CfnAuthorizerV2(this, \"MyCfnAuthorizerV2\", new CfnAuthorizerV2Props {\n    ApiId = \"apiId\",\n    AuthorizerType = \"authorizerType\",\n    IdentitySource = new [] { \"identitySource\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    AuthorizerCredentialsArn = \"authorizerCredentialsArn\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    JwtConfiguration = new JWTConfigurationProperty {\n        Audience = new [] { \"audience\" },\n        Issuer = \"issuer\"\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerV2 cfnAuthorizerV2 = CfnAuthorizerV2.Builder.create(this, \"MyCfnAuthorizerV2\")\n        .apiId(\"apiId\")\n        .authorizerType(\"authorizerType\")\n        .identitySource(List.of(\"identitySource\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .authorizerCredentialsArn(\"authorizerCredentialsArn\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .jwtConfiguration(JWTConfigurationProperty.builder()\n                .audience(List.of(\"audience\"))\n                .issuer(\"issuer\")\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAuthorizerV2 := apigateway.NewCfnAuthorizerV2(this, jsii.String(\"MyCfnAuthorizerV2\"), &CfnAuthorizerV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tAuthorizerType: jsii.String(\"authorizerType\"),\n\tIdentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\tName: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tAuthorizerCredentialsArn: jsii.String(\"authorizerCredentialsArn\"),\n\tAuthorizerResultTtlInSeconds: jsii.Number(123),\n\tAuthorizerUri: jsii.String(\"authorizerUri\"),\n\tIdentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\tJwtConfiguration: &JWTConfigurationProperty{\n\t\tAudience: []*string{\n\t\t\tjsii.String(\"audience\"),\n\t\t},\n\t\tIssuer: jsii.String(\"issuer\"),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerV2 = new apigateway.CfnAuthorizerV2(this, 'MyCfnAuthorizerV2', {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAuthorizerV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAuthorizerV2","@aws-cdk/aws-apigateway.CfnAuthorizerV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerV2 = new apigateway.CfnAuthorizerV2(this, 'MyCfnAuthorizerV2', {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":11,"75":15,"104":1,"192":2,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":11,"290":1},"fqnsFingerprint":"48794af57dd5b9081fe9db3c1370a504f91afa0111311c20e1715510875f0266"},"8fe7e477b874a6223b281a311869d437acbbaa74351095e8cfe03c39ba040b67":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nj_wTConfiguration_property = apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n    audience=[\"audience\"],\n    issuer=\"issuer\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar jWTConfigurationProperty = new JWTConfigurationProperty {\n    Audience = new [] { \"audience\" },\n    Issuer = \"issuer\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nJWTConfigurationProperty jWTConfigurationProperty = JWTConfigurationProperty.builder()\n        .audience(List.of(\"audience\"))\n        .issuer(\"issuer\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\njWTConfigurationProperty := &JWTConfigurationProperty{\n\tAudience: []*string{\n\t\tjsii.String(\"audience\"),\n\t},\n\tIssuer: jsii.String(\"issuer\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst jWTConfigurationProperty: apigateway.CfnAuthorizerV2.JWTConfigurationProperty = {\n  audience: ['audience'],\n  issuer: 'issuer',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAuthorizerV2.JWTConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAuthorizerV2.JWTConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst jWTConfigurationProperty: apigateway.CfnAuthorizerV2.JWTConfigurationProperty = {\n  audience: ['audience'],\n  issuer: 'issuer',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"192":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"fbefe051abd1caf55c0754fb0465919c3fb855481420268d50960edc4310d659"},"b9bf3e6fc973ceb04636f3f7473b7ae55e83b391a6e0d130e39323e7e4a03c02":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_authorizer_v2_props = apigateway.CfnAuthorizerV2Props(\n    api_id=\"apiId\",\n    authorizer_type=\"authorizerType\",\n    identity_source=[\"identitySource\"],\n    name=\"name\",\n\n    # the properties below are optional\n    authorizer_credentials_arn=\"authorizerCredentialsArn\",\n    authorizer_result_ttl_in_seconds=123,\n    authorizer_uri=\"authorizerUri\",\n    identity_validation_expression=\"identityValidationExpression\",\n    jwt_configuration=apigateway.CfnAuthorizerV2.JWTConfigurationProperty(\n        audience=[\"audience\"],\n        issuer=\"issuer\"\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnAuthorizerV2Props = new CfnAuthorizerV2Props {\n    ApiId = \"apiId\",\n    AuthorizerType = \"authorizerType\",\n    IdentitySource = new [] { \"identitySource\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    AuthorizerCredentialsArn = \"authorizerCredentialsArn\",\n    AuthorizerResultTtlInSeconds = 123,\n    AuthorizerUri = \"authorizerUri\",\n    IdentityValidationExpression = \"identityValidationExpression\",\n    JwtConfiguration = new JWTConfigurationProperty {\n        Audience = new [] { \"audience\" },\n        Issuer = \"issuer\"\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnAuthorizerV2Props cfnAuthorizerV2Props = CfnAuthorizerV2Props.builder()\n        .apiId(\"apiId\")\n        .authorizerType(\"authorizerType\")\n        .identitySource(List.of(\"identitySource\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .authorizerCredentialsArn(\"authorizerCredentialsArn\")\n        .authorizerResultTtlInSeconds(123)\n        .authorizerUri(\"authorizerUri\")\n        .identityValidationExpression(\"identityValidationExpression\")\n        .jwtConfiguration(JWTConfigurationProperty.builder()\n                .audience(List.of(\"audience\"))\n                .issuer(\"issuer\")\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnAuthorizerV2Props := &CfnAuthorizerV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tAuthorizerType: jsii.String(\"authorizerType\"),\n\tIdentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\tName: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tAuthorizerCredentialsArn: jsii.String(\"authorizerCredentialsArn\"),\n\tAuthorizerResultTtlInSeconds: jsii.Number(123),\n\tAuthorizerUri: jsii.String(\"authorizerUri\"),\n\tIdentityValidationExpression: jsii.String(\"identityValidationExpression\"),\n\tJwtConfiguration: &JWTConfigurationProperty{\n\t\tAudience: []*string{\n\t\t\tjsii.String(\"audience\"),\n\t\t},\n\t\tIssuer: jsii.String(\"issuer\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnAuthorizerV2Props: apigateway.CfnAuthorizerV2Props = {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnAuthorizerV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnAuthorizerV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAuthorizerV2Props: apigateway.CfnAuthorizerV2Props = {\n  apiId: 'apiId',\n  authorizerType: 'authorizerType',\n  identitySource: ['identitySource'],\n  name: 'name',\n\n  // the properties below are optional\n  authorizerCredentialsArn: 'authorizerCredentialsArn',\n  authorizerResultTtlInSeconds: 123,\n  authorizerUri: 'authorizerUri',\n  identityValidationExpression: 'identityValidationExpression',\n  jwtConfiguration: {\n    audience: ['audience'],\n    issuer: 'issuer',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":10,"75":15,"153":1,"169":1,"192":2,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":11,"290":1},"fqnsFingerprint":"6ed8d283be08152bf4f9cf5b247944c8f7e54a9180e52d9ffb159c91735b539d"},"0f376b976eb35959337b01904e3545bd9bb77c951813f379b5da9dd8adc40c05":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_base_path_mapping = apigateway.CfnBasePathMapping(self, \"MyCfnBasePathMapping\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    id=\"id\",\n    rest_api_id=\"restApiId\",\n    stage=\"stage\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnBasePathMapping = new CfnBasePathMapping(this, \"MyCfnBasePathMapping\", new CfnBasePathMappingProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Id = \"id\",\n    RestApiId = \"restApiId\",\n    Stage = \"stage\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnBasePathMapping cfnBasePathMapping = CfnBasePathMapping.Builder.create(this, \"MyCfnBasePathMapping\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .id(\"id\")\n        .restApiId(\"restApiId\")\n        .stage(\"stage\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnBasePathMapping := apigateway.NewCfnBasePathMapping(this, jsii.String(\"MyCfnBasePathMapping\"), &CfnBasePathMappingProps{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tBasePath: jsii.String(\"basePath\"),\n\tId: jsii.String(\"id\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\tStage: jsii.String(\"stage\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnBasePathMapping = new apigateway.CfnBasePathMapping(this, 'MyCfnBasePathMapping', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  id: 'id',\n  restApiId: 'restApiId',\n  stage: 'stage',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnBasePathMapping"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnBasePathMapping","@aws-cdk/aws-apigateway.CfnBasePathMappingProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnBasePathMapping = new apigateway.CfnBasePathMapping(this, 'MyCfnBasePathMapping', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  id: 'id',\n  restApiId: 'restApiId',\n  stage: 'stage',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":7,"75":9,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"74f73d67740010ac56bb26577b3ce810432d4d00878c33a672fdaade1f6c4026"},"f50d5af0af58dcddebf95d1129e7a9a4f1ed012c3fd2926c8709732a0ef646d8":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_base_path_mapping_props = apigateway.CfnBasePathMappingProps(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    base_path=\"basePath\",\n    id=\"id\",\n    rest_api_id=\"restApiId\",\n    stage=\"stage\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnBasePathMappingProps = new CfnBasePathMappingProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    BasePath = \"basePath\",\n    Id = \"id\",\n    RestApiId = \"restApiId\",\n    Stage = \"stage\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnBasePathMappingProps cfnBasePathMappingProps = CfnBasePathMappingProps.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .basePath(\"basePath\")\n        .id(\"id\")\n        .restApiId(\"restApiId\")\n        .stage(\"stage\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnBasePathMappingProps := &CfnBasePathMappingProps{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tBasePath: jsii.String(\"basePath\"),\n\tId: jsii.String(\"id\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\tStage: jsii.String(\"stage\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnBasePathMappingProps: apigateway.CfnBasePathMappingProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  id: 'id',\n  restApiId: 'restApiId',\n  stage: 'stage',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnBasePathMappingProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnBasePathMappingProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnBasePathMappingProps: apigateway.CfnBasePathMappingProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  basePath: 'basePath',\n  id: 'id',\n  restApiId: 'restApiId',\n  stage: 'stage',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":9,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"a441ac65149e19df2a79b3937e8cde4a19da303e94f7021c62d772318b7daa81"},"57b0b42172d125b5f5fb97c3b9d5725b3c9c5f13e94c40e8c4b21907168ebe4e":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_client_certificate = apigateway.CfnClientCertificate(self, \"MyCfnClientCertificate\",\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnClientCertificate = new CfnClientCertificate(this, \"MyCfnClientCertificate\", new CfnClientCertificateProps {\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnClientCertificate cfnClientCertificate = CfnClientCertificate.Builder.create(this, \"MyCfnClientCertificate\")\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnClientCertificate := apigateway.NewCfnClientCertificate(this, jsii.String(\"MyCfnClientCertificate\"), &CfnClientCertificateProps{\n\tDescription: jsii.String(\"description\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnClientCertificate = new apigateway.CfnClientCertificate(this, 'MyCfnClientCertificate', /* all optional props */ {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnClientCertificate"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnClientCertificate","@aws-cdk/aws-apigateway.CfnClientCertificateProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientCertificate = new apigateway.CfnClientCertificate(this, 'MyCfnClientCertificate', /* all optional props */ {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":8,"104":1,"192":1,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"dc404e23bfff7092cd091ee41d24cb315c2cea0d73b8e218c28e33e4d6f50183"},"75423abd877843a73aa50b27e566077005c0342cf582675c3105e03ab49d648a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_client_certificate_props = apigateway.CfnClientCertificateProps(\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnClientCertificateProps = new CfnClientCertificateProps {\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnClientCertificateProps cfnClientCertificateProps = CfnClientCertificateProps.builder()\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnClientCertificateProps := &CfnClientCertificateProps{\n\tDescription: jsii.String(\"description\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnClientCertificateProps: apigateway.CfnClientCertificateProps = {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnClientCertificateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnClientCertificateProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClientCertificateProps: apigateway.CfnClientCertificateProps = {\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"153":1,"169":1,"192":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"878675bfe8469d5483005c3f6b81e264f7c5d20220d84e2415f63c5af7d61a8a"},"415dd6b488a4bc1ea24d0d65f390f7eadafd45c2e7199a3c3911ad0aad027b96":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment = apigateway.CfnDeployment(self, \"MyCfnDeployment\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    deployment_canary_settings=apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    description=\"description\",\n    stage_description=apigateway.CfnDeployment.StageDescriptionProperty(\n        access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n            destination_arn=\"destinationArn\",\n            format=\"format\"\n        ),\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n            percent_traffic=123,\n            stage_variable_overrides={\n                \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n            },\n            use_stage_cache=False\n        ),\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=\"loggingLevel\",\n        method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n            cache_data_encrypted=False,\n            cache_ttl_in_seconds=123,\n            caching_enabled=False,\n            data_trace_enabled=False,\n            http_method=\"httpMethod\",\n            logging_level=\"loggingLevel\",\n            metrics_enabled=False,\n            resource_path=\"resourcePath\",\n            throttling_burst_limit=123,\n            throttling_rate_limit=123\n        )],\n        metrics_enabled=False,\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    stage_name=\"stageName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDeployment = new CfnDeployment(this, \"MyCfnDeployment\", new CfnDeploymentProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    DeploymentCanarySettings = new DeploymentCanarySettingsProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    Description = \"description\",\n    StageDescription = new StageDescriptionProperty {\n        AccessLogSetting = new AccessLogSettingProperty {\n            DestinationArn = \"destinationArn\",\n            Format = \"format\"\n        },\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        CanarySetting = new CanarySettingProperty {\n            PercentTraffic = 123,\n            StageVariableOverrides = new Dictionary<string, string> {\n                { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n            },\n            UseStageCache = false\n        },\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = \"loggingLevel\",\n        MethodSettings = new [] { new MethodSettingProperty {\n            CacheDataEncrypted = false,\n            CacheTtlInSeconds = 123,\n            CachingEnabled = false,\n            DataTraceEnabled = false,\n            HttpMethod = \"httpMethod\",\n            LoggingLevel = \"loggingLevel\",\n            MetricsEnabled = false,\n            ResourcePath = \"resourcePath\",\n            ThrottlingBurstLimit = 123,\n            ThrottlingRateLimit = 123\n        } },\n        MetricsEnabled = false,\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    StageName = \"stageName\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeployment cfnDeployment = CfnDeployment.Builder.create(this, \"MyCfnDeployment\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .deploymentCanarySettings(DeploymentCanarySettingsProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .description(\"description\")\n        .stageDescription(StageDescriptionProperty.builder()\n                .accessLogSetting(AccessLogSettingProperty.builder()\n                        .destinationArn(\"destinationArn\")\n                        .format(\"format\")\n                        .build())\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .canarySetting(CanarySettingProperty.builder()\n                        .percentTraffic(123)\n                        .stageVariableOverrides(Map.of(\n                                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                        .useStageCache(false)\n                        .build())\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(\"loggingLevel\")\n                .methodSettings(List.of(MethodSettingProperty.builder()\n                        .cacheDataEncrypted(false)\n                        .cacheTtlInSeconds(123)\n                        .cachingEnabled(false)\n                        .dataTraceEnabled(false)\n                        .httpMethod(\"httpMethod\")\n                        .loggingLevel(\"loggingLevel\")\n                        .metricsEnabled(false)\n                        .resourcePath(\"resourcePath\")\n                        .throttlingBurstLimit(123)\n                        .throttlingRateLimit(123)\n                        .build()))\n                .metricsEnabled(false)\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .stageName(\"stageName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDeployment := apigateway.NewCfnDeployment(this, jsii.String(\"MyCfnDeployment\"), &CfnDeploymentProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tDeploymentCanarySettings: &DeploymentCanarySettingsProperty{\n\t\tPercentTraffic: jsii.Number(123),\n\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t},\n\t\tUseStageCache: jsii.Boolean(false),\n\t},\n\tDescription: jsii.String(\"description\"),\n\tStageDescription: &StageDescriptionProperty{\n\t\tAccessLogSetting: &AccessLogSettingProperty{\n\t\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\t\tFormat: jsii.String(\"format\"),\n\t\t},\n\t\tCacheClusterEnabled: jsii.Boolean(false),\n\t\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\tCachingEnabled: jsii.Boolean(false),\n\t\tCanarySetting: &CanarySettingProperty{\n\t\t\tPercentTraffic: jsii.Number(123),\n\t\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t\t},\n\t\t\tUseStageCache: jsii.Boolean(false),\n\t\t},\n\t\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDescription: jsii.String(\"description\"),\n\t\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\tMethodSettings: []interface{}{\n\t\t\t&MethodSettingProperty{\n\t\t\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\t\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\t\t\tCachingEnabled: jsii.Boolean(false),\n\t\t\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\t\t\tHttpMethod: jsii.String(\"httpMethod\"),\n\t\t\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\t\t\tMetricsEnabled: jsii.Boolean(false),\n\t\t\t\tResourcePath: jsii.String(\"resourcePath\"),\n\t\t\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\t\t\tThrottlingRateLimit: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tMetricsEnabled: jsii.Boolean(false),\n\t\tTags: []cfnTag{\n\t\t\t&cfnTag{\n\t\t\t\tKey: jsii.String(\"key\"),\n\t\t\t\tValue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t\tTracingEnabled: jsii.Boolean(false),\n\t\tVariables: map[string]*string{\n\t\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t\t},\n\t},\n\tStageName: jsii.String(\"stageName\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeployment = new apigateway.CfnDeployment(this, 'MyCfnDeployment', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment","@aws-cdk/aws-apigateway.CfnDeploymentProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeployment = new apigateway.CfnDeployment(this, 'MyCfnDeployment', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":8,"10":20,"75":51,"91":12,"104":1,"192":2,"193":10,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":47,"290":1},"fqnsFingerprint":"21ba20061fdc805dc84bc024b5d132a0b7d6aa7942edcd3953925c3598d59a9c"},"89c572a54b436ba4c867b7f9337a5c7fdac1e8b6be9d305b3dcba080aa098746":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_setting_property = apigateway.CfnDeployment.AccessLogSettingProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar accessLogSettingProperty = new AccessLogSettingProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingProperty accessLogSettingProperty = AccessLogSettingProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\naccessLogSettingProperty := &AccessLogSettingProperty{\n\tDestinationArn: jsii.String(\"destinationArn\"),\n\tFormat: jsii.String(\"format\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingProperty: apigateway.CfnDeployment.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment.AccessLogSettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment.AccessLogSettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingProperty: apigateway.CfnDeployment.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"bdbc7e0ac9c8ae94c9b7cea087c97b2e54d7102a9b7b6f6787941b7d7f1b9756"},"3667462c0c0d4b20b3e85e8828fe353a1c370646bff508988e5d2a15e83cec4c":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncanary_setting_property = apigateway.CfnDeployment.CanarySettingProperty(\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar canarySettingProperty = new CanarySettingProperty {\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCanarySettingProperty canarySettingProperty = CanarySettingProperty.builder()\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncanarySettingProperty := &CanarySettingProperty{\n\tPercentTraffic: jsii.Number(123),\n\tStageVariableOverrides: map[string]*string{\n\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t},\n\tUseStageCache: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst canarySettingProperty: apigateway.CfnDeployment.CanarySettingProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment.CanarySettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment.CanarySettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst canarySettingProperty: apigateway.CfnDeployment.CanarySettingProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":2,"75":9,"91":1,"153":2,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"50c140550d5840e8b79eb2a8a90b30bd141f573f0905b01d14c0599b6fe7b740"},"719137405fbedc31655d6fadb099bfb6ad1b0e55f72843362fc59792b01b4f00":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndeployment_canary_settings_property = apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar deploymentCanarySettingsProperty = new DeploymentCanarySettingsProperty {\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDeploymentCanarySettingsProperty deploymentCanarySettingsProperty = DeploymentCanarySettingsProperty.builder()\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ndeploymentCanarySettingsProperty := &DeploymentCanarySettingsProperty{\n\tPercentTraffic: jsii.Number(123),\n\tStageVariableOverrides: map[string]*string{\n\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t},\n\tUseStageCache: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst deploymentCanarySettingsProperty: apigateway.CfnDeployment.DeploymentCanarySettingsProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment.DeploymentCanarySettingsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment.DeploymentCanarySettingsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentCanarySettingsProperty: apigateway.CfnDeployment.DeploymentCanarySettingsProperty = {\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":2,"75":9,"91":1,"153":2,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"a4e1d52e99fdb5376e61f1774a9807d6c01e83848f03e861ebeba6abdae07a0d"},"909d2424a6afad912e467a36ba73c57dc8b1016b236324be48a04f76e3242ac2":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_setting_property = apigateway.CfnDeployment.MethodSettingProperty(\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    data_trace_enabled=False,\n    http_method=\"httpMethod\",\n    logging_level=\"loggingLevel\",\n    metrics_enabled=False,\n    resource_path=\"resourcePath\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar methodSettingProperty = new MethodSettingProperty {\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    DataTraceEnabled = false,\n    HttpMethod = \"httpMethod\",\n    LoggingLevel = \"loggingLevel\",\n    MetricsEnabled = false,\n    ResourcePath = \"resourcePath\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodSettingProperty methodSettingProperty = MethodSettingProperty.builder()\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .dataTraceEnabled(false)\n        .httpMethod(\"httpMethod\")\n        .loggingLevel(\"loggingLevel\")\n        .metricsEnabled(false)\n        .resourcePath(\"resourcePath\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nmethodSettingProperty := &MethodSettingProperty{\n\tCacheDataEncrypted: jsii.Boolean(false),\n\tCacheTtlInSeconds: jsii.Number(123),\n\tCachingEnabled: jsii.Boolean(false),\n\tDataTraceEnabled: jsii.Boolean(false),\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\tMetricsEnabled: jsii.Boolean(false),\n\tResourcePath: jsii.String(\"resourcePath\"),\n\tThrottlingBurstLimit: jsii.Number(123),\n\tThrottlingRateLimit: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodSettingProperty: apigateway.CfnDeployment.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment.MethodSettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment.MethodSettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodSettingProperty: apigateway.CfnDeployment.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":3,"10":4,"75":15,"91":4,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":10,"290":1},"fqnsFingerprint":"8ef68e40852a5112ade0bbb23b337e10e71575e57547a5e4851ff283cd2ebc53"},"f8fc88b77205c9c5b509ff1e453e8d50f3c9317550df2c9ded3dcc0db403bacc":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nstage_description_property = apigateway.CfnDeployment.StageDescriptionProperty(\n    access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    data_trace_enabled=False,\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    logging_level=\"loggingLevel\",\n    method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    metrics_enabled=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttling_burst_limit=123,\n    throttling_rate_limit=123,\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar stageDescriptionProperty = new StageDescriptionProperty {\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    CanarySetting = new CanarySettingProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DataTraceEnabled = false,\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    LoggingLevel = \"loggingLevel\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    MetricsEnabled = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123,\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nStageDescriptionProperty stageDescriptionProperty = StageDescriptionProperty.builder()\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .canarySetting(CanarySettingProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .dataTraceEnabled(false)\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .loggingLevel(\"loggingLevel\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .metricsEnabled(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nstageDescriptionProperty := &StageDescriptionProperty{\n\tAccessLogSetting: &AccessLogSettingProperty{\n\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\tFormat: jsii.String(\"format\"),\n\t},\n\tCacheClusterEnabled: jsii.Boolean(false),\n\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\tCacheDataEncrypted: jsii.Boolean(false),\n\tCacheTtlInSeconds: jsii.Number(123),\n\tCachingEnabled: jsii.Boolean(false),\n\tCanarySetting: &CanarySettingProperty{\n\t\tPercentTraffic: jsii.Number(123),\n\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t},\n\t\tUseStageCache: jsii.Boolean(false),\n\t},\n\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\tDataTraceEnabled: jsii.Boolean(false),\n\tDescription: jsii.String(\"description\"),\n\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\tMethodSettings: []interface{}{\n\t\t&MethodSettingProperty{\n\t\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\t\tCachingEnabled: jsii.Boolean(false),\n\t\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\t\tHttpMethod: jsii.String(\"httpMethod\"),\n\t\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\t\tMetricsEnabled: jsii.Boolean(false),\n\t\t\tResourcePath: jsii.String(\"resourcePath\"),\n\t\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\t\tThrottlingRateLimit: jsii.Number(123),\n\t\t},\n\t},\n\tMetricsEnabled: jsii.Boolean(false),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tThrottlingBurstLimit: jsii.Number(123),\n\tThrottlingRateLimit: jsii.Number(123),\n\tTracingEnabled: jsii.Boolean(false),\n\tVariables: map[string]*string{\n\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst stageDescriptionProperty: apigateway.CfnDeployment.StageDescriptionProperty = {\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  canarySetting: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  dataTraceEnabled: false,\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  loggingLevel: 'loggingLevel',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  metricsEnabled: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeployment.StageDescriptionProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeployment.StageDescriptionProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageDescriptionProperty: apigateway.CfnDeployment.StageDescriptionProperty = {\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  canarySetting: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  dataTraceEnabled: false,\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  loggingLevel: 'loggingLevel',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  metricsEnabled: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":7,"10":15,"75":43,"91":11,"153":2,"169":1,"192":2,"193":7,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":38,"290":1},"fqnsFingerprint":"5ae6b7c1da07a9275fcb1ea67b2be6735ec2b636a12ad2a9000db976cce47ca0"},"f21bce27087393626f6667a4c3c41ebe658779acd79036f1e51d0f96116e8b7f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_props = apigateway.CfnDeploymentProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    deployment_canary_settings=apigateway.CfnDeployment.DeploymentCanarySettingsProperty(\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    description=\"description\",\n    stage_description=apigateway.CfnDeployment.StageDescriptionProperty(\n        access_log_setting=apigateway.CfnDeployment.AccessLogSettingProperty(\n            destination_arn=\"destinationArn\",\n            format=\"format\"\n        ),\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        canary_setting=apigateway.CfnDeployment.CanarySettingProperty(\n            percent_traffic=123,\n            stage_variable_overrides={\n                \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n            },\n            use_stage_cache=False\n        ),\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=\"loggingLevel\",\n        method_settings=[apigateway.CfnDeployment.MethodSettingProperty(\n            cache_data_encrypted=False,\n            cache_ttl_in_seconds=123,\n            caching_enabled=False,\n            data_trace_enabled=False,\n            http_method=\"httpMethod\",\n            logging_level=\"loggingLevel\",\n            metrics_enabled=False,\n            resource_path=\"resourcePath\",\n            throttling_burst_limit=123,\n            throttling_rate_limit=123\n        )],\n        metrics_enabled=False,\n        tags=[CfnTag(\n            key=\"key\",\n            value=\"value\"\n        )],\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    stage_name=\"stageName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDeploymentProps = new CfnDeploymentProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    DeploymentCanarySettings = new DeploymentCanarySettingsProperty {\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    Description = \"description\",\n    StageDescription = new StageDescriptionProperty {\n        AccessLogSetting = new AccessLogSettingProperty {\n            DestinationArn = \"destinationArn\",\n            Format = \"format\"\n        },\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        CanarySetting = new CanarySettingProperty {\n            PercentTraffic = 123,\n            StageVariableOverrides = new Dictionary<string, string> {\n                { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n            },\n            UseStageCache = false\n        },\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = \"loggingLevel\",\n        MethodSettings = new [] { new MethodSettingProperty {\n            CacheDataEncrypted = false,\n            CacheTtlInSeconds = 123,\n            CachingEnabled = false,\n            DataTraceEnabled = false,\n            HttpMethod = \"httpMethod\",\n            LoggingLevel = \"loggingLevel\",\n            MetricsEnabled = false,\n            ResourcePath = \"resourcePath\",\n            ThrottlingBurstLimit = 123,\n            ThrottlingRateLimit = 123\n        } },\n        MetricsEnabled = false,\n        Tags = new [] { new CfnTag {\n            Key = \"key\",\n            Value = \"value\"\n        } },\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    StageName = \"stageName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentProps cfnDeploymentProps = CfnDeploymentProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .deploymentCanarySettings(DeploymentCanarySettingsProperty.builder()\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .description(\"description\")\n        .stageDescription(StageDescriptionProperty.builder()\n                .accessLogSetting(AccessLogSettingProperty.builder()\n                        .destinationArn(\"destinationArn\")\n                        .format(\"format\")\n                        .build())\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .canarySetting(CanarySettingProperty.builder()\n                        .percentTraffic(123)\n                        .stageVariableOverrides(Map.of(\n                                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                        .useStageCache(false)\n                        .build())\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(\"loggingLevel\")\n                .methodSettings(List.of(MethodSettingProperty.builder()\n                        .cacheDataEncrypted(false)\n                        .cacheTtlInSeconds(123)\n                        .cachingEnabled(false)\n                        .dataTraceEnabled(false)\n                        .httpMethod(\"httpMethod\")\n                        .loggingLevel(\"loggingLevel\")\n                        .metricsEnabled(false)\n                        .resourcePath(\"resourcePath\")\n                        .throttlingBurstLimit(123)\n                        .throttlingRateLimit(123)\n                        .build()))\n                .metricsEnabled(false)\n                .tags(List.of(CfnTag.builder()\n                        .key(\"key\")\n                        .value(\"value\")\n                        .build()))\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .stageName(\"stageName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDeploymentProps := &CfnDeploymentProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tDeploymentCanarySettings: &DeploymentCanarySettingsProperty{\n\t\tPercentTraffic: jsii.Number(123),\n\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t},\n\t\tUseStageCache: jsii.Boolean(false),\n\t},\n\tDescription: jsii.String(\"description\"),\n\tStageDescription: &StageDescriptionProperty{\n\t\tAccessLogSetting: &AccessLogSettingProperty{\n\t\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\t\tFormat: jsii.String(\"format\"),\n\t\t},\n\t\tCacheClusterEnabled: jsii.Boolean(false),\n\t\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\tCachingEnabled: jsii.Boolean(false),\n\t\tCanarySetting: &CanarySettingProperty{\n\t\t\tPercentTraffic: jsii.Number(123),\n\t\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t\t},\n\t\t\tUseStageCache: jsii.Boolean(false),\n\t\t},\n\t\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDescription: jsii.String(\"description\"),\n\t\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\tMethodSettings: []interface{}{\n\t\t\t&MethodSettingProperty{\n\t\t\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\t\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\t\t\tCachingEnabled: jsii.Boolean(false),\n\t\t\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\t\t\tHttpMethod: jsii.String(\"httpMethod\"),\n\t\t\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\t\t\tMetricsEnabled: jsii.Boolean(false),\n\t\t\t\tResourcePath: jsii.String(\"resourcePath\"),\n\t\t\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\t\t\tThrottlingRateLimit: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tMetricsEnabled: jsii.Boolean(false),\n\t\tTags: []cfnTag{\n\t\t\t&cfnTag{\n\t\t\t\tKey: jsii.String(\"key\"),\n\t\t\t\tValue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t\tTracingEnabled: jsii.Boolean(false),\n\t\tVariables: map[string]*string{\n\t\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t\t},\n\t},\n\tStageName: jsii.String(\"stageName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentProps: apigateway.CfnDeploymentProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeploymentProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeploymentProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentProps: apigateway.CfnDeploymentProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  deploymentCanarySettings: {\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  description: 'description',\n  stageDescription: {\n    accessLogSetting: {\n      destinationArn: 'destinationArn',\n      format: 'format',\n    },\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    canarySetting: {\n      percentTraffic: 123,\n      stageVariableOverrides: {\n        stageVariableOverridesKey: 'stageVariableOverrides',\n      },\n      useStageCache: false,\n    },\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: 'loggingLevel',\n    methodSettings: [{\n      cacheDataEncrypted: false,\n      cacheTtlInSeconds: 123,\n      cachingEnabled: false,\n      dataTraceEnabled: false,\n      httpMethod: 'httpMethod',\n      loggingLevel: 'loggingLevel',\n      metricsEnabled: false,\n      resourcePath: 'resourcePath',\n      throttlingBurstLimit: 123,\n      throttlingRateLimit: 123,\n    }],\n    metricsEnabled: false,\n    tags: [{\n      key: 'key',\n      value: 'value',\n    }],\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":8,"10":19,"75":51,"91":12,"153":1,"169":1,"192":2,"193":10,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":47,"290":1},"fqnsFingerprint":"897f59a21781b18106c91ed97f4dc39413051597cc2f1b025b470f5f76ce882e"},"80afdba9bab02602f2e99dbf0747c289a5cce64f4fa6d6c4833dd9ae5486c68f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_v2 = apigateway.CfnDeploymentV2(self, \"MyCfnDeploymentV2\",\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    description=\"description\",\n    stage_name=\"stageName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDeploymentV2 = new CfnDeploymentV2(this, \"MyCfnDeploymentV2\", new CfnDeploymentV2Props {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    StageName = \"stageName\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentV2 cfnDeploymentV2 = CfnDeploymentV2.Builder.create(this, \"MyCfnDeploymentV2\")\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .stageName(\"stageName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDeploymentV2 := apigateway.NewCfnDeploymentV2(this, jsii.String(\"MyCfnDeploymentV2\"), &CfnDeploymentV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n\tStageName: jsii.String(\"stageName\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentV2 = new apigateway.CfnDeploymentV2(this, 'MyCfnDeploymentV2', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeploymentV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeploymentV2","@aws-cdk/aws-apigateway.CfnDeploymentV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentV2 = new apigateway.CfnDeploymentV2(this, 'MyCfnDeploymentV2', {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":7,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"ad8342ffe89c710992f6a861264d424eb38f0c4f2e33db14be382d1522b68604"},"ebbf766d3782c0c7daa07b01d377bc8da7a141f9aee5bc85a46f88f1794defcf":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_deployment_v2_props = apigateway.CfnDeploymentV2Props(\n    api_id=\"apiId\",\n\n    # the properties below are optional\n    description=\"description\",\n    stage_name=\"stageName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDeploymentV2Props = new CfnDeploymentV2Props {\n    ApiId = \"apiId\",\n\n    // the properties below are optional\n    Description = \"description\",\n    StageName = \"stageName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDeploymentV2Props cfnDeploymentV2Props = CfnDeploymentV2Props.builder()\n        .apiId(\"apiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .stageName(\"stageName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDeploymentV2Props := &CfnDeploymentV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n\tStageName: jsii.String(\"stageName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDeploymentV2Props: apigateway.CfnDeploymentV2Props = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDeploymentV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDeploymentV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentV2Props: apigateway.CfnDeploymentV2Props = {\n  apiId: 'apiId',\n\n  // the properties below are optional\n  description: 'description',\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"7afe2f2bc6e3f8640951b2c82a68b9025868de564511601831310356308fbcbd"},"29baa19f7c07fce9ba2357cd11e1d975e8774ae97da3c387348605f26d085550":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_part = apigateway.CfnDocumentationPart(self, \"MyCfnDocumentationPart\",\n    location=apigateway.CfnDocumentationPart.LocationProperty(\n        method=\"method\",\n        name=\"name\",\n        path=\"path\",\n        status_code=\"statusCode\",\n        type=\"type\"\n    ),\n    properties=\"properties\",\n    rest_api_id=\"restApiId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDocumentationPart = new CfnDocumentationPart(this, \"MyCfnDocumentationPart\", new CfnDocumentationPartProps {\n    Location = new LocationProperty {\n        Method = \"method\",\n        Name = \"name\",\n        Path = \"path\",\n        StatusCode = \"statusCode\",\n        Type = \"type\"\n    },\n    Properties = \"properties\",\n    RestApiId = \"restApiId\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationPart cfnDocumentationPart = CfnDocumentationPart.Builder.create(this, \"MyCfnDocumentationPart\")\n        .location(LocationProperty.builder()\n                .method(\"method\")\n                .name(\"name\")\n                .path(\"path\")\n                .statusCode(\"statusCode\")\n                .type(\"type\")\n                .build())\n        .properties(\"properties\")\n        .restApiId(\"restApiId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDocumentationPart := apigateway.NewCfnDocumentationPart(this, jsii.String(\"MyCfnDocumentationPart\"), &CfnDocumentationPartProps{\n\tLocation: &LocationProperty{\n\t\tMethod: jsii.String(\"method\"),\n\t\tName: jsii.String(\"name\"),\n\t\tPath: jsii.String(\"path\"),\n\t\tStatusCode: jsii.String(\"statusCode\"),\n\t\tType: jsii.String(\"type\"),\n\t},\n\tProperties: jsii.String(\"properties\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationPart = new apigateway.CfnDocumentationPart(this, 'MyCfnDocumentationPart', {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDocumentationPart"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDocumentationPart","@aws-cdk/aws-apigateway.CfnDocumentationPartProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationPart = new apigateway.CfnDocumentationPart(this, 'MyCfnDocumentationPart', {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":9,"75":12,"104":1,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":8,"290":1},"fqnsFingerprint":"0eec6b96205540cad9ab0572732668d8b902b38ce1baf612fe44554fdbe6ed00"},"354c99552f61a15a15862da2d4128fb7b561e5b169a8ea186777ae9eeac6227a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nlocation_property = apigateway.CfnDocumentationPart.LocationProperty(\n    method=\"method\",\n    name=\"name\",\n    path=\"path\",\n    status_code=\"statusCode\",\n    type=\"type\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar locationProperty = new LocationProperty {\n    Method = \"method\",\n    Name = \"name\",\n    Path = \"path\",\n    StatusCode = \"statusCode\",\n    Type = \"type\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nLocationProperty locationProperty = LocationProperty.builder()\n        .method(\"method\")\n        .name(\"name\")\n        .path(\"path\")\n        .statusCode(\"statusCode\")\n        .type(\"type\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nlocationProperty := &LocationProperty{\n\tMethod: jsii.String(\"method\"),\n\tName: jsii.String(\"name\"),\n\tPath: jsii.String(\"path\"),\n\tStatusCode: jsii.String(\"statusCode\"),\n\tType: jsii.String(\"type\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst locationProperty: apigateway.CfnDocumentationPart.LocationProperty = {\n  method: 'method',\n  name: 'name',\n  path: 'path',\n  statusCode: 'statusCode',\n  type: 'type',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDocumentationPart.LocationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDocumentationPart.LocationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst locationProperty: apigateway.CfnDocumentationPart.LocationProperty = {\n  method: 'method',\n  name: 'name',\n  path: 'path',\n  statusCode: 'statusCode',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":10,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"862211b753eb041e5fcfac4cd18890badb4e71a0114103951140496e2c484831"},"553f71e61d80d2b14e00e460c05bf77e5297b9ba0abb1457d338ef175cc43d5b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_part_props = apigateway.CfnDocumentationPartProps(\n    location=apigateway.CfnDocumentationPart.LocationProperty(\n        method=\"method\",\n        name=\"name\",\n        path=\"path\",\n        status_code=\"statusCode\",\n        type=\"type\"\n    ),\n    properties=\"properties\",\n    rest_api_id=\"restApiId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDocumentationPartProps = new CfnDocumentationPartProps {\n    Location = new LocationProperty {\n        Method = \"method\",\n        Name = \"name\",\n        Path = \"path\",\n        StatusCode = \"statusCode\",\n        Type = \"type\"\n    },\n    Properties = \"properties\",\n    RestApiId = \"restApiId\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationPartProps cfnDocumentationPartProps = CfnDocumentationPartProps.builder()\n        .location(LocationProperty.builder()\n                .method(\"method\")\n                .name(\"name\")\n                .path(\"path\")\n                .statusCode(\"statusCode\")\n                .type(\"type\")\n                .build())\n        .properties(\"properties\")\n        .restApiId(\"restApiId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDocumentationPartProps := &CfnDocumentationPartProps{\n\tLocation: &LocationProperty{\n\t\tMethod: jsii.String(\"method\"),\n\t\tName: jsii.String(\"name\"),\n\t\tPath: jsii.String(\"path\"),\n\t\tStatusCode: jsii.String(\"statusCode\"),\n\t\tType: jsii.String(\"type\"),\n\t},\n\tProperties: jsii.String(\"properties\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationPartProps: apigateway.CfnDocumentationPartProps = {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDocumentationPartProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDocumentationPartProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationPartProps: apigateway.CfnDocumentationPartProps = {\n  location: {\n    method: 'method',\n    name: 'name',\n    path: 'path',\n    statusCode: 'statusCode',\n    type: 'type',\n  },\n  properties: 'properties',\n  restApiId: 'restApiId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":8,"75":12,"153":1,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":8,"290":1},"fqnsFingerprint":"e72d81c6834370f233b7b427ed29c347ef0c02778c26912f497b154e68bee394"},"bc4a249075d9d49bd5ba191adb5d8cf13cd61706fa8729e4a7d2cf907ea115d2":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_version = apigateway.CfnDocumentationVersion(self, \"MyCfnDocumentationVersion\",\n    documentation_version=\"documentationVersion\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    description=\"description\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDocumentationVersion = new CfnDocumentationVersion(this, \"MyCfnDocumentationVersion\", new CfnDocumentationVersionProps {\n    DocumentationVersion = \"documentationVersion\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Description = \"description\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationVersion cfnDocumentationVersion = CfnDocumentationVersion.Builder.create(this, \"MyCfnDocumentationVersion\")\n        .documentationVersion(\"documentationVersion\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDocumentationVersion := apigateway.NewCfnDocumentationVersion(this, jsii.String(\"MyCfnDocumentationVersion\"), &CfnDocumentationVersionProps{\n\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationVersion = new apigateway.CfnDocumentationVersion(this, 'MyCfnDocumentationVersion', {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDocumentationVersion"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDocumentationVersion","@aws-cdk/aws-apigateway.CfnDocumentationVersionProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationVersion = new apigateway.CfnDocumentationVersion(this, 'MyCfnDocumentationVersion', {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":7,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"6531208e61ac028b29c3540933cf57030519d2746201c924428882cab8c5bc59"},"bec1e79e83b1260ee242383680c5ec47b430406c49e5e608e03a6fbe773fcdb1":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_documentation_version_props = apigateway.CfnDocumentationVersionProps(\n    documentation_version=\"documentationVersion\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    description=\"description\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDocumentationVersionProps = new CfnDocumentationVersionProps {\n    DocumentationVersion = \"documentationVersion\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Description = \"description\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDocumentationVersionProps cfnDocumentationVersionProps = CfnDocumentationVersionProps.builder()\n        .documentationVersion(\"documentationVersion\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDocumentationVersionProps := &CfnDocumentationVersionProps{\n\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDocumentationVersionProps: apigateway.CfnDocumentationVersionProps = {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDocumentationVersionProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDocumentationVersionProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDocumentationVersionProps: apigateway.CfnDocumentationVersionProps = {\n  documentationVersion: 'documentationVersion',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"dfe785d85665a6b7ce581deb6b1c928030e75ac93456085e65aeb22de84141d0"},"f94ed8c99a5dba89883e9e12e58827f7355b63b7ee58e93344cc6b440fa33520":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_domain_name = apigateway.CfnDomainName(self, \"MyCfnDomainName\",\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n    endpoint_configuration=apigateway.CfnDomainName.EndpointConfigurationProperty(\n        types=[\"types\"]\n    ),\n    mutual_tls_authentication=apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n        truststore_uri=\"truststoreUri\",\n        truststore_version=\"truststoreVersion\"\n    ),\n    ownership_verification_certificate_arn=\"ownershipVerificationCertificateArn\",\n    regional_certificate_arn=\"regionalCertificateArn\",\n    security_policy=\"securityPolicy\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDomainName = new CfnDomainName(this, \"MyCfnDomainName\", new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" }\n    },\n    MutualTlsAuthentication = new MutualTlsAuthenticationProperty {\n        TruststoreUri = \"truststoreUri\",\n        TruststoreVersion = \"truststoreVersion\"\n    },\n    OwnershipVerificationCertificateArn = \"ownershipVerificationCertificateArn\",\n    RegionalCertificateArn = \"regionalCertificateArn\",\n    SecurityPolicy = \"securityPolicy\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDomainName cfnDomainName = CfnDomainName.Builder.create(this, \"MyCfnDomainName\")\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .build())\n        .mutualTlsAuthentication(MutualTlsAuthenticationProperty.builder()\n                .truststoreUri(\"truststoreUri\")\n                .truststoreVersion(\"truststoreVersion\")\n                .build())\n        .ownershipVerificationCertificateArn(\"ownershipVerificationCertificateArn\")\n        .regionalCertificateArn(\"regionalCertificateArn\")\n        .securityPolicy(\"securityPolicy\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDomainName := apigateway.NewCfnDomainName(this, jsii.String(\"MyCfnDomainName\"), &CfnDomainNameProps{\n\tCertificateArn: jsii.String(\"certificateArn\"),\n\tDomainName: jsii.String(\"domainName\"),\n\tEndpointConfiguration: &EndpointConfigurationProperty{\n\t\tTypes: []*string{\n\t\t\tjsii.String(\"types\"),\n\t\t},\n\t},\n\tMutualTlsAuthentication: &MutualTlsAuthenticationProperty{\n\t\tTruststoreUri: jsii.String(\"truststoreUri\"),\n\t\tTruststoreVersion: jsii.String(\"truststoreVersion\"),\n\t},\n\tOwnershipVerificationCertificateArn: jsii.String(\"ownershipVerificationCertificateArn\"),\n\tRegionalCertificateArn: jsii.String(\"regionalCertificateArn\"),\n\tSecurityPolicy: jsii.String(\"securityPolicy\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDomainName = new apigateway.CfnDomainName(this, 'MyCfnDomainName', /* all optional props */ {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainName"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainName","@aws-cdk/aws-apigateway.CfnDomainNameProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainName = new apigateway.CfnDomainName(this, 'MyCfnDomainName', /* all optional props */ {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":12,"75":17,"104":1,"192":2,"193":4,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":13,"290":1},"fqnsFingerprint":"e41569cf33a00d87589e1f2a212cd946a2bc889244726c4f04b69c5fd254bf8b"},"8b272d3f217d633fff2eb35521c6fac2446da070dfd4a318f0ee37885222982f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nendpoint_configuration_property = apigateway.CfnDomainName.EndpointConfigurationProperty(\n    types=[\"types\"]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar endpointConfigurationProperty = new EndpointConfigurationProperty {\n    Types = new [] { \"types\" }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEndpointConfigurationProperty endpointConfigurationProperty = EndpointConfigurationProperty.builder()\n        .types(List.of(\"types\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nendpointConfigurationProperty := &EndpointConfigurationProperty{\n\tTypes: []*string{\n\t\tjsii.String(\"types\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst endpointConfigurationProperty: apigateway.CfnDomainName.EndpointConfigurationProperty = {\n  types: ['types'],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainName.EndpointConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainName.EndpointConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointConfigurationProperty: apigateway.CfnDomainName.EndpointConfigurationProperty = {\n  types: ['types'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":6,"153":2,"169":1,"192":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"ab51a9e664a74e124c5e2d1e9594526283c4947b9ad1cd8d5ade9259cfbbfb48"},"ecbbc898e5e855a933a2e1cf8b4c7a314c1e6a3d3725b3db83e3cc0ada7c942c":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmutual_tls_authentication_property = apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n    truststore_uri=\"truststoreUri\",\n    truststore_version=\"truststoreVersion\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar mutualTlsAuthenticationProperty = new MutualTlsAuthenticationProperty {\n    TruststoreUri = \"truststoreUri\",\n    TruststoreVersion = \"truststoreVersion\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMutualTlsAuthenticationProperty mutualTlsAuthenticationProperty = MutualTlsAuthenticationProperty.builder()\n        .truststoreUri(\"truststoreUri\")\n        .truststoreVersion(\"truststoreVersion\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nmutualTlsAuthenticationProperty := &MutualTlsAuthenticationProperty{\n\tTruststoreUri: jsii.String(\"truststoreUri\"),\n\tTruststoreVersion: jsii.String(\"truststoreVersion\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst mutualTlsAuthenticationProperty: apigateway.CfnDomainName.MutualTlsAuthenticationProperty = {\n  truststoreUri: 'truststoreUri',\n  truststoreVersion: 'truststoreVersion',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainName.MutualTlsAuthenticationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainName.MutualTlsAuthenticationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mutualTlsAuthenticationProperty: apigateway.CfnDomainName.MutualTlsAuthenticationProperty = {\n  truststoreUri: 'truststoreUri',\n  truststoreVersion: 'truststoreVersion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"2000944947b5af8fa62a359d8dfa8f13dcdfaa16e12d2811a8cdc341c73a9776"},"fd3ea502f1eed09cffa2bdbf145f25386591a3b28c69e086ff4267490ee13ed1":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_domain_name_props = apigateway.CfnDomainNameProps(\n    certificate_arn=\"certificateArn\",\n    domain_name=\"domainName\",\n    endpoint_configuration=apigateway.CfnDomainName.EndpointConfigurationProperty(\n        types=[\"types\"]\n    ),\n    mutual_tls_authentication=apigateway.CfnDomainName.MutualTlsAuthenticationProperty(\n        truststore_uri=\"truststoreUri\",\n        truststore_version=\"truststoreVersion\"\n    ),\n    ownership_verification_certificate_arn=\"ownershipVerificationCertificateArn\",\n    regional_certificate_arn=\"regionalCertificateArn\",\n    security_policy=\"securityPolicy\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnDomainNameProps = new CfnDomainNameProps {\n    CertificateArn = \"certificateArn\",\n    DomainName = \"domainName\",\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" }\n    },\n    MutualTlsAuthentication = new MutualTlsAuthenticationProperty {\n        TruststoreUri = \"truststoreUri\",\n        TruststoreVersion = \"truststoreVersion\"\n    },\n    OwnershipVerificationCertificateArn = \"ownershipVerificationCertificateArn\",\n    RegionalCertificateArn = \"regionalCertificateArn\",\n    SecurityPolicy = \"securityPolicy\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnDomainNameProps cfnDomainNameProps = CfnDomainNameProps.builder()\n        .certificateArn(\"certificateArn\")\n        .domainName(\"domainName\")\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .build())\n        .mutualTlsAuthentication(MutualTlsAuthenticationProperty.builder()\n                .truststoreUri(\"truststoreUri\")\n                .truststoreVersion(\"truststoreVersion\")\n                .build())\n        .ownershipVerificationCertificateArn(\"ownershipVerificationCertificateArn\")\n        .regionalCertificateArn(\"regionalCertificateArn\")\n        .securityPolicy(\"securityPolicy\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnDomainNameProps := &CfnDomainNameProps{\n\tCertificateArn: jsii.String(\"certificateArn\"),\n\tDomainName: jsii.String(\"domainName\"),\n\tEndpointConfiguration: &EndpointConfigurationProperty{\n\t\tTypes: []*string{\n\t\t\tjsii.String(\"types\"),\n\t\t},\n\t},\n\tMutualTlsAuthentication: &MutualTlsAuthenticationProperty{\n\t\tTruststoreUri: jsii.String(\"truststoreUri\"),\n\t\tTruststoreVersion: jsii.String(\"truststoreVersion\"),\n\t},\n\tOwnershipVerificationCertificateArn: jsii.String(\"ownershipVerificationCertificateArn\"),\n\tRegionalCertificateArn: jsii.String(\"regionalCertificateArn\"),\n\tSecurityPolicy: jsii.String(\"securityPolicy\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnDomainNameProps: apigateway.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainNameProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainNameProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameProps: apigateway.CfnDomainNameProps = {\n  certificateArn: 'certificateArn',\n  domainName: 'domainName',\n  endpointConfiguration: {\n    types: ['types'],\n  },\n  mutualTlsAuthentication: {\n    truststoreUri: 'truststoreUri',\n    truststoreVersion: 'truststoreVersion',\n  },\n  ownershipVerificationCertificateArn: 'ownershipVerificationCertificateArn',\n  regionalCertificateArn: 'regionalCertificateArn',\n  securityPolicy: 'securityPolicy',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":11,"75":17,"153":1,"169":1,"192":2,"193":4,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":13,"290":1},"fqnsFingerprint":"a09b9eef39b2dd98f6ee4cbd5f87d102bb173a31e4dbd701cbe82250fe6bfed5"},"1f49277153d18a43412cf8e2251d436d90522ce2e11203705f03445b5e1e8dd6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# tags: Any\n\ncfn_domain_name_v2 = apigateway.CfnDomainNameV2(self, \"MyCfnDomainNameV2\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    domain_name_configurations=[apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n        certificate_arn=\"certificateArn\",\n        certificate_name=\"certificateName\",\n        endpoint_type=\"endpointType\"\n    )],\n    tags=tags\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar tags;\n\nvar cfnDomainNameV2 = new CfnDomainNameV2(this, \"MyCfnDomainNameV2\", new CfnDomainNameV2Props {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    DomainNameConfigurations = new [] { new DomainNameConfigurationProperty {\n        CertificateArn = \"certificateArn\",\n        CertificateName = \"certificateName\",\n        EndpointType = \"endpointType\"\n    } },\n    Tags = tags\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject tags;\n\nCfnDomainNameV2 cfnDomainNameV2 = CfnDomainNameV2.Builder.create(this, \"MyCfnDomainNameV2\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .domainNameConfigurations(List.of(DomainNameConfigurationProperty.builder()\n                .certificateArn(\"certificateArn\")\n                .certificateName(\"certificateName\")\n                .endpointType(\"endpointType\")\n                .build()))\n        .tags(tags)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar tags interface{}\n\ncfnDomainNameV2 := apigateway.NewCfnDomainNameV2(this, jsii.String(\"MyCfnDomainNameV2\"), &CfnDomainNameV2Props{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tDomainNameConfigurations: []interface{}{\n\t\t&DomainNameConfigurationProperty{\n\t\t\tCertificateArn: jsii.String(\"certificateArn\"),\n\t\t\tCertificateName: jsii.String(\"certificateName\"),\n\t\t\tEndpointType: jsii.String(\"endpointType\"),\n\t\t},\n\t},\n\tTags: tags,\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\nconst cfnDomainNameV2 = new apigateway.CfnDomainNameV2(this, 'MyCfnDomainNameV2', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainNameV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainNameV2","@aws-cdk/aws-apigateway.CfnDomainNameV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameV2 = new apigateway.CfnDomainNameV2(this, 'MyCfnDomainNameV2', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":12,"104":1,"125":1,"130":1,"192":1,"193":2,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"bc40cdb628808bdb74f4ba89c803761070106cd5de6ad027b75a672958f2c9c4"},"ddae7ccbb6eb4053951b41164d9f017ecfc790d0f6afb7bbb03cb5128a917457":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndomain_name_configuration_property = apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n    certificate_arn=\"certificateArn\",\n    certificate_name=\"certificateName\",\n    endpoint_type=\"endpointType\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar domainNameConfigurationProperty = new DomainNameConfigurationProperty {\n    CertificateArn = \"certificateArn\",\n    CertificateName = \"certificateName\",\n    EndpointType = \"endpointType\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainNameConfigurationProperty domainNameConfigurationProperty = DomainNameConfigurationProperty.builder()\n        .certificateArn(\"certificateArn\")\n        .certificateName(\"certificateName\")\n        .endpointType(\"endpointType\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ndomainNameConfigurationProperty := &DomainNameConfigurationProperty{\n\tCertificateArn: jsii.String(\"certificateArn\"),\n\tCertificateName: jsii.String(\"certificateName\"),\n\tEndpointType: jsii.String(\"endpointType\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst domainNameConfigurationProperty: apigateway.CfnDomainNameV2.DomainNameConfigurationProperty = {\n  certificateArn: 'certificateArn',\n  certificateName: 'certificateName',\n  endpointType: 'endpointType',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainNameV2.DomainNameConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainNameV2.DomainNameConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainNameConfigurationProperty: apigateway.CfnDomainNameV2.DomainNameConfigurationProperty = {\n  certificateArn: 'certificateArn',\n  certificateName: 'certificateName',\n  endpointType: 'endpointType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"0ada0559d8402c38e9dff1c155e7bcc1302ca87dc0b17e410ba77da51044589e"},"2beea1c6eed794b55cbe7ead2f263a0f26b063fa01325db56691293dfdb3431f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# tags: Any\n\ncfn_domain_name_v2_props = apigateway.CfnDomainNameV2Props(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    domain_name_configurations=[apigateway.CfnDomainNameV2.DomainNameConfigurationProperty(\n        certificate_arn=\"certificateArn\",\n        certificate_name=\"certificateName\",\n        endpoint_type=\"endpointType\"\n    )],\n    tags=tags\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar tags;\n\nvar cfnDomainNameV2Props = new CfnDomainNameV2Props {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    DomainNameConfigurations = new [] { new DomainNameConfigurationProperty {\n        CertificateArn = \"certificateArn\",\n        CertificateName = \"certificateName\",\n        EndpointType = \"endpointType\"\n    } },\n    Tags = tags\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject tags;\n\nCfnDomainNameV2Props cfnDomainNameV2Props = CfnDomainNameV2Props.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .domainNameConfigurations(List.of(DomainNameConfigurationProperty.builder()\n                .certificateArn(\"certificateArn\")\n                .certificateName(\"certificateName\")\n                .endpointType(\"endpointType\")\n                .build()))\n        .tags(tags)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar tags interface{}\n\ncfnDomainNameV2Props := &CfnDomainNameV2Props{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tDomainNameConfigurations: []interface{}{\n\t\t&DomainNameConfigurationProperty{\n\t\t\tCertificateArn: jsii.String(\"certificateArn\"),\n\t\t\tCertificateName: jsii.String(\"certificateName\"),\n\t\t\tEndpointType: jsii.String(\"endpointType\"),\n\t\t},\n\t},\n\tTags: tags,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\nconst cfnDomainNameV2Props: apigateway.CfnDomainNameV2Props = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnDomainNameV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnDomainNameV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDomainNameV2Props: apigateway.CfnDomainNameV2Props = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  domainNameConfigurations: [{\n    certificateArn: 'certificateArn',\n    certificateName: 'certificateName',\n    endpointType: 'endpointType',\n  }],\n  tags: tags,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":12,"125":1,"130":1,"153":1,"169":1,"192":1,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"c10c5d6d8b0b129efc06861da6d0bf65a0ce0c5c497a0c954b78852b0d80c130"},"bb660e7395120dd4f37fbb018d07e092fe354bbbe73249d6099370658d19a956":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_gateway_response = apigateway.CfnGatewayResponse(self, \"MyCfnGatewayResponse\",\n    response_type=\"responseType\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    status_code=\"statusCode\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnGatewayResponse = new CfnGatewayResponse(this, \"MyCfnGatewayResponse\", new CfnGatewayResponseProps {\n    ResponseType = \"responseType\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    StatusCode = \"statusCode\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnGatewayResponse cfnGatewayResponse = CfnGatewayResponse.Builder.create(this, \"MyCfnGatewayResponse\")\n        .responseType(\"responseType\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .statusCode(\"statusCode\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnGatewayResponse := apigateway.NewCfnGatewayResponse(this, jsii.String(\"MyCfnGatewayResponse\"), &CfnGatewayResponseProps{\n\tResponseType: jsii.String(\"responseType\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tResponseParameters: map[string]*string{\n\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t},\n\tResponseTemplates: map[string]*string{\n\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t},\n\tStatusCode: jsii.String(\"statusCode\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnGatewayResponse = new apigateway.CfnGatewayResponse(this, 'MyCfnGatewayResponse', {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnGatewayResponse"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnGatewayResponse","@aws-cdk/aws-apigateway.CfnGatewayResponseProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayResponse = new apigateway.CfnGatewayResponse(this, 'MyCfnGatewayResponse', {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":7,"75":11,"104":1,"193":3,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"24a90d0e75080e936277d2f0c4f1d7166e30d3975670e4571aa759040e591db4"},"c840049ebc520c830f518904f0acc405fca3ce2ea3000b0e1e559b8372b17417":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_gateway_response_props = apigateway.CfnGatewayResponseProps(\n    response_type=\"responseType\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    status_code=\"statusCode\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnGatewayResponseProps = new CfnGatewayResponseProps {\n    ResponseType = \"responseType\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    StatusCode = \"statusCode\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnGatewayResponseProps cfnGatewayResponseProps = CfnGatewayResponseProps.builder()\n        .responseType(\"responseType\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .statusCode(\"statusCode\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnGatewayResponseProps := &CfnGatewayResponseProps{\n\tResponseType: jsii.String(\"responseType\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tResponseParameters: map[string]*string{\n\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t},\n\tResponseTemplates: map[string]*string{\n\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t},\n\tStatusCode: jsii.String(\"statusCode\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnGatewayResponseProps: apigateway.CfnGatewayResponseProps = {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnGatewayResponseProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnGatewayResponseProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnGatewayResponseProps: apigateway.CfnGatewayResponseProps = {\n  responseType: 'responseType',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  statusCode: 'statusCode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":11,"153":1,"169":1,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"e732b6b41e11501ad9d2e594ad224c4e7b26bafc5a7cd98f3f31dd155868175f"},"f434d9c3ebc9d7aacd75351732ac020aa0c50d3535a76df07deca313da59a2ab":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_parameters: Any\n# response_templates: Any\n\ncfn_integration_response_v2 = apigateway.CfnIntegrationResponseV2(self, \"MyCfnIntegrationResponseV2\",\n    api_id=\"apiId\",\n    integration_id=\"integrationId\",\n    integration_response_key=\"integrationResponseKey\",\n\n    # the properties below are optional\n    content_handling_strategy=\"contentHandlingStrategy\",\n    response_parameters=response_parameters,\n    response_templates=response_templates,\n    template_selection_expression=\"templateSelectionExpression\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseParameters;\nvar responseTemplates;\n\nvar cfnIntegrationResponseV2 = new CfnIntegrationResponseV2(this, \"MyCfnIntegrationResponseV2\", new CfnIntegrationResponseV2Props {\n    ApiId = \"apiId\",\n    IntegrationId = \"integrationId\",\n    IntegrationResponseKey = \"integrationResponseKey\",\n\n    // the properties below are optional\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    ResponseParameters = responseParameters,\n    ResponseTemplates = responseTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseParameters;\nObject responseTemplates;\n\nCfnIntegrationResponseV2 cfnIntegrationResponseV2 = CfnIntegrationResponseV2.Builder.create(this, \"MyCfnIntegrationResponseV2\")\n        .apiId(\"apiId\")\n        .integrationId(\"integrationId\")\n        .integrationResponseKey(\"integrationResponseKey\")\n\n        // the properties below are optional\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .responseParameters(responseParameters)\n        .responseTemplates(responseTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseParameters interface{}\nvar responseTemplates interface{}\n\ncfnIntegrationResponseV2 := apigateway.NewCfnIntegrationResponseV2(this, jsii.String(\"MyCfnIntegrationResponseV2\"), &CfnIntegrationResponseV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tIntegrationId: jsii.String(\"integrationId\"),\n\tIntegrationResponseKey: jsii.String(\"integrationResponseKey\"),\n\n\t// the properties below are optional\n\tContentHandlingStrategy: jsii.String(\"contentHandlingStrategy\"),\n\tResponseParameters: responseParameters,\n\tResponseTemplates: responseTemplates,\n\tTemplateSelectionExpression: jsii.String(\"templateSelectionExpression\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\nconst cfnIntegrationResponseV2 = new apigateway.CfnIntegrationResponseV2(this, 'MyCfnIntegrationResponseV2', {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnIntegrationResponseV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnIntegrationResponseV2","@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationResponseV2 = new apigateway.CfnIntegrationResponseV2(this, 'MyCfnIntegrationResponseV2', {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":7,"75":15,"104":1,"125":2,"130":2,"193":1,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"c94f6b418702cacfcbe761b98ba9c493570c8770f55e012609f39d24c422d3c6"},"6384e859e07c00045bbf97ec357ad4bd976084c046656ac496366917e7075c51":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_parameters: Any\n# response_templates: Any\n\ncfn_integration_response_v2_props = apigateway.CfnIntegrationResponseV2Props(\n    api_id=\"apiId\",\n    integration_id=\"integrationId\",\n    integration_response_key=\"integrationResponseKey\",\n\n    # the properties below are optional\n    content_handling_strategy=\"contentHandlingStrategy\",\n    response_parameters=response_parameters,\n    response_templates=response_templates,\n    template_selection_expression=\"templateSelectionExpression\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseParameters;\nvar responseTemplates;\n\nvar cfnIntegrationResponseV2Props = new CfnIntegrationResponseV2Props {\n    ApiId = \"apiId\",\n    IntegrationId = \"integrationId\",\n    IntegrationResponseKey = \"integrationResponseKey\",\n\n    // the properties below are optional\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    ResponseParameters = responseParameters,\n    ResponseTemplates = responseTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseParameters;\nObject responseTemplates;\n\nCfnIntegrationResponseV2Props cfnIntegrationResponseV2Props = CfnIntegrationResponseV2Props.builder()\n        .apiId(\"apiId\")\n        .integrationId(\"integrationId\")\n        .integrationResponseKey(\"integrationResponseKey\")\n\n        // the properties below are optional\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .responseParameters(responseParameters)\n        .responseTemplates(responseTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseParameters interface{}\nvar responseTemplates interface{}\n\ncfnIntegrationResponseV2Props := &CfnIntegrationResponseV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tIntegrationId: jsii.String(\"integrationId\"),\n\tIntegrationResponseKey: jsii.String(\"integrationResponseKey\"),\n\n\t// the properties below are optional\n\tContentHandlingStrategy: jsii.String(\"contentHandlingStrategy\"),\n\tResponseParameters: responseParameters,\n\tResponseTemplates: responseTemplates,\n\tTemplateSelectionExpression: jsii.String(\"templateSelectionExpression\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\nconst cfnIntegrationResponseV2Props: apigateway.CfnIntegrationResponseV2Props = {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnIntegrationResponseV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseParameters: any;\ndeclare const responseTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationResponseV2Props: apigateway.CfnIntegrationResponseV2Props = {\n  apiId: 'apiId',\n  integrationId: 'integrationId',\n  integrationResponseKey: 'integrationResponseKey',\n\n  // the properties below are optional\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  responseParameters: responseParameters,\n  responseTemplates: responseTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":15,"125":2,"130":2,"153":1,"169":1,"193":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"8e87cbef1fc8023712f187ce6d9ab088d521e111bb5f2c7227121ecd1684b1c1"},"c88ef54ee40a91e48884194d5ad8c86fe60e5cdd2ce598626f9e1690050a0d55":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_parameters: Any\n# request_templates: Any\n\ncfn_integration_v2 = apigateway.CfnIntegrationV2(self, \"MyCfnIntegrationV2\",\n    api_id=\"apiId\",\n    integration_type=\"integrationType\",\n\n    # the properties below are optional\n    connection_type=\"connectionType\",\n    content_handling_strategy=\"contentHandlingStrategy\",\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    integration_method=\"integrationMethod\",\n    integration_uri=\"integrationUri\",\n    passthrough_behavior=\"passthroughBehavior\",\n    payload_format_version=\"payloadFormatVersion\",\n    request_parameters=request_parameters,\n    request_templates=request_templates,\n    template_selection_expression=\"templateSelectionExpression\",\n    timeout_in_millis=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestParameters;\nvar requestTemplates;\n\nvar cfnIntegrationV2 = new CfnIntegrationV2(this, \"MyCfnIntegrationV2\", new CfnIntegrationV2Props {\n    ApiId = \"apiId\",\n    IntegrationType = \"integrationType\",\n\n    // the properties below are optional\n    ConnectionType = \"connectionType\",\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    IntegrationMethod = \"integrationMethod\",\n    IntegrationUri = \"integrationUri\",\n    PassthroughBehavior = \"passthroughBehavior\",\n    PayloadFormatVersion = \"payloadFormatVersion\",\n    RequestParameters = requestParameters,\n    RequestTemplates = requestTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\",\n    TimeoutInMillis = 123\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestParameters;\nObject requestTemplates;\n\nCfnIntegrationV2 cfnIntegrationV2 = CfnIntegrationV2.Builder.create(this, \"MyCfnIntegrationV2\")\n        .apiId(\"apiId\")\n        .integrationType(\"integrationType\")\n\n        // the properties below are optional\n        .connectionType(\"connectionType\")\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .integrationMethod(\"integrationMethod\")\n        .integrationUri(\"integrationUri\")\n        .passthroughBehavior(\"passthroughBehavior\")\n        .payloadFormatVersion(\"payloadFormatVersion\")\n        .requestParameters(requestParameters)\n        .requestTemplates(requestTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .timeoutInMillis(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar requestParameters interface{}\nvar requestTemplates interface{}\n\ncfnIntegrationV2 := apigateway.NewCfnIntegrationV2(this, jsii.String(\"MyCfnIntegrationV2\"), &CfnIntegrationV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tIntegrationType: jsii.String(\"integrationType\"),\n\n\t// the properties below are optional\n\tConnectionType: jsii.String(\"connectionType\"),\n\tContentHandlingStrategy: jsii.String(\"contentHandlingStrategy\"),\n\tCredentialsArn: jsii.String(\"credentialsArn\"),\n\tDescription: jsii.String(\"description\"),\n\tIntegrationMethod: jsii.String(\"integrationMethod\"),\n\tIntegrationUri: jsii.String(\"integrationUri\"),\n\tPassthroughBehavior: jsii.String(\"passthroughBehavior\"),\n\tPayloadFormatVersion: jsii.String(\"payloadFormatVersion\"),\n\tRequestParameters: requestParameters,\n\tRequestTemplates: requestTemplates,\n\tTemplateSelectionExpression: jsii.String(\"templateSelectionExpression\"),\n\tTimeoutInMillis: jsii.Number(123),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\nconst cfnIntegrationV2 = new apigateway.CfnIntegrationV2(this, 'MyCfnIntegrationV2', {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnIntegrationV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnIntegrationV2","@aws-cdk/aws-apigateway.CfnIntegrationV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationV2 = new apigateway.CfnIntegrationV2(this, 'MyCfnIntegrationV2', {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":13,"75":22,"104":1,"125":2,"130":2,"193":1,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":14,"290":1},"fqnsFingerprint":"69e020b6c65242967e0d6eb393fa2e2b5e23c408791f06fa55912ef4a5edd3bf"},"a3aa2ff758fda4d639c562337b6aafbe2292dc06179159d74ad2a41e6c616c4c":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_parameters: Any\n# request_templates: Any\n\ncfn_integration_v2_props = apigateway.CfnIntegrationV2Props(\n    api_id=\"apiId\",\n    integration_type=\"integrationType\",\n\n    # the properties below are optional\n    connection_type=\"connectionType\",\n    content_handling_strategy=\"contentHandlingStrategy\",\n    credentials_arn=\"credentialsArn\",\n    description=\"description\",\n    integration_method=\"integrationMethod\",\n    integration_uri=\"integrationUri\",\n    passthrough_behavior=\"passthroughBehavior\",\n    payload_format_version=\"payloadFormatVersion\",\n    request_parameters=request_parameters,\n    request_templates=request_templates,\n    template_selection_expression=\"templateSelectionExpression\",\n    timeout_in_millis=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestParameters;\nvar requestTemplates;\n\nvar cfnIntegrationV2Props = new CfnIntegrationV2Props {\n    ApiId = \"apiId\",\n    IntegrationType = \"integrationType\",\n\n    // the properties below are optional\n    ConnectionType = \"connectionType\",\n    ContentHandlingStrategy = \"contentHandlingStrategy\",\n    CredentialsArn = \"credentialsArn\",\n    Description = \"description\",\n    IntegrationMethod = \"integrationMethod\",\n    IntegrationUri = \"integrationUri\",\n    PassthroughBehavior = \"passthroughBehavior\",\n    PayloadFormatVersion = \"payloadFormatVersion\",\n    RequestParameters = requestParameters,\n    RequestTemplates = requestTemplates,\n    TemplateSelectionExpression = \"templateSelectionExpression\",\n    TimeoutInMillis = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestParameters;\nObject requestTemplates;\n\nCfnIntegrationV2Props cfnIntegrationV2Props = CfnIntegrationV2Props.builder()\n        .apiId(\"apiId\")\n        .integrationType(\"integrationType\")\n\n        // the properties below are optional\n        .connectionType(\"connectionType\")\n        .contentHandlingStrategy(\"contentHandlingStrategy\")\n        .credentialsArn(\"credentialsArn\")\n        .description(\"description\")\n        .integrationMethod(\"integrationMethod\")\n        .integrationUri(\"integrationUri\")\n        .passthroughBehavior(\"passthroughBehavior\")\n        .payloadFormatVersion(\"payloadFormatVersion\")\n        .requestParameters(requestParameters)\n        .requestTemplates(requestTemplates)\n        .templateSelectionExpression(\"templateSelectionExpression\")\n        .timeoutInMillis(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar requestParameters interface{}\nvar requestTemplates interface{}\n\ncfnIntegrationV2Props := &CfnIntegrationV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tIntegrationType: jsii.String(\"integrationType\"),\n\n\t// the properties below are optional\n\tConnectionType: jsii.String(\"connectionType\"),\n\tContentHandlingStrategy: jsii.String(\"contentHandlingStrategy\"),\n\tCredentialsArn: jsii.String(\"credentialsArn\"),\n\tDescription: jsii.String(\"description\"),\n\tIntegrationMethod: jsii.String(\"integrationMethod\"),\n\tIntegrationUri: jsii.String(\"integrationUri\"),\n\tPassthroughBehavior: jsii.String(\"passthroughBehavior\"),\n\tPayloadFormatVersion: jsii.String(\"payloadFormatVersion\"),\n\tRequestParameters: requestParameters,\n\tRequestTemplates: requestTemplates,\n\tTemplateSelectionExpression: jsii.String(\"templateSelectionExpression\"),\n\tTimeoutInMillis: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\nconst cfnIntegrationV2Props: apigateway.CfnIntegrationV2Props = {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnIntegrationV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnIntegrationV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestParameters: any;\ndeclare const requestTemplates: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnIntegrationV2Props: apigateway.CfnIntegrationV2Props = {\n  apiId: 'apiId',\n  integrationType: 'integrationType',\n\n  // the properties below are optional\n  connectionType: 'connectionType',\n  contentHandlingStrategy: 'contentHandlingStrategy',\n  credentialsArn: 'credentialsArn',\n  description: 'description',\n  integrationMethod: 'integrationMethod',\n  integrationUri: 'integrationUri',\n  passthroughBehavior: 'passthroughBehavior',\n  payloadFormatVersion: 'payloadFormatVersion',\n  requestParameters: requestParameters,\n  requestTemplates: requestTemplates,\n  templateSelectionExpression: 'templateSelectionExpression',\n  timeoutInMillis: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":12,"75":22,"125":2,"130":2,"153":1,"169":1,"193":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":14,"290":1},"fqnsFingerprint":"5fe989e90e73b4e55bfd2cd370551040345e50e48f46dac1285a95c8d4ce35bf"},"c08bbaa7578d8412113893800fc223d2ad6ba37fe50871b5f8c269b439dde670":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_method = apigateway.CfnMethod(self, \"MyCfnMethod\",\n    http_method=\"httpMethod\",\n    resource_id=\"resourceId\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    integration=apigateway.CfnMethod.IntegrationProperty(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_id=\"connectionId\",\n        connection_type=\"connectionType\",\n        content_handling=\"contentHandling\",\n        credentials=\"credentials\",\n        integration_http_method=\"integrationHttpMethod\",\n        integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=\"contentHandling\",\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=\"passthroughBehavior\",\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout_in_millis=123,\n        type=\"type\",\n        uri=\"uri\"\n    ),\n    method_responses=[apigateway.CfnMethod.MethodResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        response_models={\n            \"response_models_key\": \"responseModels\"\n        },\n        response_parameters={\n            \"response_parameters_key\": False\n        }\n    )],\n    operation_name=\"operationName\",\n    request_models={\n        \"request_models_key\": \"requestModels\"\n    },\n    request_parameters={\n        \"request_parameters_key\": False\n    },\n    request_validator_id=\"requestValidatorId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnMethod = new CfnMethod(this, \"MyCfnMethod\", new CfnMethodProps {\n    HttpMethod = \"httpMethod\",\n    ResourceId = \"resourceId\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    Integration = new IntegrationProperty {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionId = \"connectionId\",\n        ConnectionType = \"connectionType\",\n        ContentHandling = \"contentHandling\",\n        Credentials = \"credentials\",\n        IntegrationHttpMethod = \"integrationHttpMethod\",\n        IntegrationResponses = new [] { new IntegrationResponseProperty {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = \"contentHandling\",\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = \"passthroughBehavior\",\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        TimeoutInMillis = 123,\n        Type = \"type\",\n        Uri = \"uri\"\n    },\n    MethodResponses = new [] { new MethodResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ResponseModels = new Dictionary<string, string> {\n            { \"responseModelsKey\", \"responseModels\" }\n        },\n        ResponseParameters = new Dictionary<string, object> {\n            { \"responseParametersKey\", false }\n        }\n    } },\n    OperationName = \"operationName\",\n    RequestModels = new Dictionary<string, string> {\n        { \"requestModelsKey\", \"requestModels\" }\n    },\n    RequestParameters = new Dictionary<string, object> {\n        { \"requestParametersKey\", false }\n    },\n    RequestValidatorId = \"requestValidatorId\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnMethod cfnMethod = CfnMethod.Builder.create(this, \"MyCfnMethod\")\n        .httpMethod(\"httpMethod\")\n        .resourceId(\"resourceId\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .integration(IntegrationProperty.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionId(\"connectionId\")\n                .connectionType(\"connectionType\")\n                .contentHandling(\"contentHandling\")\n                .credentials(\"credentials\")\n                .integrationHttpMethod(\"integrationHttpMethod\")\n                .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(\"contentHandling\")\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(\"passthroughBehavior\")\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeoutInMillis(123)\n                .type(\"type\")\n                .uri(\"uri\")\n                .build())\n        .methodResponses(List.of(MethodResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .responseModels(Map.of(\n                        \"responseModelsKey\", \"responseModels\"))\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", false))\n                .build()))\n        .operationName(\"operationName\")\n        .requestModels(Map.of(\n                \"requestModelsKey\", \"requestModels\"))\n        .requestParameters(Map.of(\n                \"requestParametersKey\", false))\n        .requestValidatorId(\"requestValidatorId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnMethod := apigateway.NewCfnMethod(this, jsii.String(\"MyCfnMethod\"), &CfnMethodProps{\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tResourceId: jsii.String(\"resourceId\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tApiKeyRequired: jsii.Boolean(false),\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tAuthorizationType: jsii.String(\"authorizationType\"),\n\tAuthorizerId: jsii.String(\"authorizerId\"),\n\tIntegration: &IntegrationProperty{\n\t\tCacheKeyParameters: []*string{\n\t\t\tjsii.String(\"cacheKeyParameters\"),\n\t\t},\n\t\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\t\tConnectionId: jsii.String(\"connectionId\"),\n\t\tConnectionType: jsii.String(\"connectionType\"),\n\t\tContentHandling: jsii.String(\"contentHandling\"),\n\t\tCredentials: jsii.String(\"credentials\"),\n\t\tIntegrationHttpMethod: jsii.String(\"integrationHttpMethod\"),\n\t\tIntegrationResponses: []interface{}{\n\t\t\t&IntegrationResponseProperty{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tContentHandling: jsii.String(\"contentHandling\"),\n\t\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t\t},\n\t\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t\t},\n\t\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: jsii.String(\"passthroughBehavior\"),\n\t\tRequestParameters: map[string]*string{\n\t\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t\t},\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t\t},\n\t\tTimeoutInMillis: jsii.Number(123),\n\t\tType: jsii.String(\"type\"),\n\t\tUri: jsii.String(\"uri\"),\n\t},\n\tMethodResponses: []interface{}{\n\t\t&MethodResponseProperty{\n\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t// the properties below are optional\n\t\t\tResponseModels: map[string]*string{\n\t\t\t\t\"responseModelsKey\": jsii.String(\"responseModels\"),\n\t\t\t},\n\t\t\tResponseParameters: map[string]interface{}{\n\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\tOperationName: jsii.String(\"operationName\"),\n\tRequestModels: map[string]*string{\n\t\t\"requestModelsKey\": jsii.String(\"requestModels\"),\n\t},\n\tRequestParameters: map[string]interface{}{\n\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t},\n\tRequestValidatorId: jsii.String(\"requestValidatorId\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnMethod = new apigateway.CfnMethod(this, 'MyCfnMethod', {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnMethod"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnMethod","@aws-cdk/aws-apigateway.CfnMethodProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMethod = new apigateway.CfnMethod(this, 'MyCfnMethod', {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":30,"75":47,"91":3,"104":1,"192":4,"193":12,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":43,"290":1},"fqnsFingerprint":"bcd5a62defce2898c1339bffec6ad6b75620e063969c7621bf94025601a3f8e7"},"ee9cde04d82bf763c44baac2d6d23282397c376f0e76405e218589a95b47a5aa":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_property = apigateway.CfnMethod.IntegrationProperty(\n    cache_key_parameters=[\"cacheKeyParameters\"],\n    cache_namespace=\"cacheNamespace\",\n    connection_id=\"connectionId\",\n    connection_type=\"connectionType\",\n    content_handling=\"contentHandling\",\n    credentials=\"credentials\",\n    integration_http_method=\"integrationHttpMethod\",\n    integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        content_handling=\"contentHandling\",\n        response_parameters={\n            \"response_parameters_key\": \"responseParameters\"\n        },\n        response_templates={\n            \"response_templates_key\": \"responseTemplates\"\n        },\n        selection_pattern=\"selectionPattern\"\n    )],\n    passthrough_behavior=\"passthroughBehavior\",\n    request_parameters={\n        \"request_parameters_key\": \"requestParameters\"\n    },\n    request_templates={\n        \"request_templates_key\": \"requestTemplates\"\n    },\n    timeout_in_millis=123,\n    type=\"type\",\n    uri=\"uri\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar integrationProperty = new IntegrationProperty {\n    CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n    CacheNamespace = \"cacheNamespace\",\n    ConnectionId = \"connectionId\",\n    ConnectionType = \"connectionType\",\n    ContentHandling = \"contentHandling\",\n    Credentials = \"credentials\",\n    IntegrationHttpMethod = \"integrationHttpMethod\",\n    IntegrationResponses = new [] { new IntegrationResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ContentHandling = \"contentHandling\",\n        ResponseParameters = new Dictionary<string, string> {\n            { \"responseParametersKey\", \"responseParameters\" }\n        },\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"responseTemplatesKey\", \"responseTemplates\" }\n        },\n        SelectionPattern = \"selectionPattern\"\n    } },\n    PassthroughBehavior = \"passthroughBehavior\",\n    RequestParameters = new Dictionary<string, string> {\n        { \"requestParametersKey\", \"requestParameters\" }\n    },\n    RequestTemplates = new Dictionary<string, string> {\n        { \"requestTemplatesKey\", \"requestTemplates\" }\n    },\n    TimeoutInMillis = 123,\n    Type = \"type\",\n    Uri = \"uri\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationProperty integrationProperty = IntegrationProperty.builder()\n        .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n        .cacheNamespace(\"cacheNamespace\")\n        .connectionId(\"connectionId\")\n        .connectionType(\"connectionType\")\n        .contentHandling(\"contentHandling\")\n        .credentials(\"credentials\")\n        .integrationHttpMethod(\"integrationHttpMethod\")\n        .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .contentHandling(\"contentHandling\")\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", \"responseParameters\"))\n                .responseTemplates(Map.of(\n                        \"responseTemplatesKey\", \"responseTemplates\"))\n                .selectionPattern(\"selectionPattern\")\n                .build()))\n        .passthroughBehavior(\"passthroughBehavior\")\n        .requestParameters(Map.of(\n                \"requestParametersKey\", \"requestParameters\"))\n        .requestTemplates(Map.of(\n                \"requestTemplatesKey\", \"requestTemplates\"))\n        .timeoutInMillis(123)\n        .type(\"type\")\n        .uri(\"uri\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nintegrationProperty := &IntegrationProperty{\n\tCacheKeyParameters: []*string{\n\t\tjsii.String(\"cacheKeyParameters\"),\n\t},\n\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\tConnectionId: jsii.String(\"connectionId\"),\n\tConnectionType: jsii.String(\"connectionType\"),\n\tContentHandling: jsii.String(\"contentHandling\"),\n\tCredentials: jsii.String(\"credentials\"),\n\tIntegrationHttpMethod: jsii.String(\"integrationHttpMethod\"),\n\tIntegrationResponses: []interface{}{\n\t\t&IntegrationResponseProperty{\n\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t// the properties below are optional\n\t\t\tContentHandling: jsii.String(\"contentHandling\"),\n\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t},\n\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t},\n\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t},\n\t},\n\tPassthroughBehavior: jsii.String(\"passthroughBehavior\"),\n\tRequestParameters: map[string]*string{\n\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t},\n\tRequestTemplates: map[string]*string{\n\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t},\n\tTimeoutInMillis: jsii.Number(123),\n\tType: jsii.String(\"type\"),\n\tUri: jsii.String(\"uri\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationProperty: apigateway.CfnMethod.IntegrationProperty = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionId: 'connectionId',\n  connectionType: 'connectionType',\n  contentHandling: 'contentHandling',\n  credentials: 'credentials',\n  integrationHttpMethod: 'integrationHttpMethod',\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: 'contentHandling',\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: 'passthroughBehavior',\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeoutInMillis: 123,\n  type: 'type',\n  uri: 'uri',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnMethod.IntegrationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnMethod.IntegrationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationProperty: apigateway.CfnMethod.IntegrationProperty = {\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionId: 'connectionId',\n  connectionType: 'connectionType',\n  contentHandling: 'contentHandling',\n  credentials: 'credentials',\n  integrationHttpMethod: 'integrationHttpMethod',\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: 'contentHandling',\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: 'passthroughBehavior',\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeoutInMillis: 123,\n  type: 'type',\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":18,"75":28,"153":2,"169":1,"192":2,"193":6,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":23,"290":1},"fqnsFingerprint":"87cff9923ee51d0f36f06561c7a7908faa3eef426d392f8ee137272d42106f34"},"a72fedc38c6405685551f3e65d84bb55e0e9dbd7ca639bd8d71eb477df4ad8c5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_response_property = apigateway.CfnMethod.IntegrationResponseProperty(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    content_handling=\"contentHandling\",\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    selection_pattern=\"selectionPattern\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar integrationResponseProperty = new IntegrationResponseProperty {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ContentHandling = \"contentHandling\",\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    SelectionPattern = \"selectionPattern\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationResponseProperty integrationResponseProperty = IntegrationResponseProperty.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .contentHandling(\"contentHandling\")\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .selectionPattern(\"selectionPattern\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nintegrationResponseProperty := &IntegrationResponseProperty{\n\tStatusCode: jsii.String(\"statusCode\"),\n\n\t// the properties below are optional\n\tContentHandling: jsii.String(\"contentHandling\"),\n\tResponseParameters: map[string]*string{\n\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t},\n\tResponseTemplates: map[string]*string{\n\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t},\n\tSelectionPattern: jsii.String(\"selectionPattern\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationResponseProperty: apigateway.CfnMethod.IntegrationResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: 'contentHandling',\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnMethod.IntegrationResponseProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnMethod.IntegrationResponseProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationResponseProperty: apigateway.CfnMethod.IntegrationResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: 'contentHandling',\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":12,"153":2,"169":1,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"cd9be928a667cb424f4d7f426b91b534cd2318a380c87d5ba2fea7b81392c92c"},"845ef21258803fb69ebb2c30a73de7ddfed489c3b4b666faed4fae266880afc2":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_response_property = apigateway.CfnMethod.MethodResponseProperty(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    response_models={\n        \"response_models_key\": \"responseModels\"\n    },\n    response_parameters={\n        \"response_parameters_key\": False\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar methodResponseProperty = new MethodResponseProperty {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ResponseModels = new Dictionary<string, string> {\n        { \"responseModelsKey\", \"responseModels\" }\n    },\n    ResponseParameters = new Dictionary<string, object> {\n        { \"responseParametersKey\", false }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodResponseProperty methodResponseProperty = MethodResponseProperty.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .responseModels(Map.of(\n                \"responseModelsKey\", \"responseModels\"))\n        .responseParameters(Map.of(\n                \"responseParametersKey\", false))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nmethodResponseProperty := &MethodResponseProperty{\n\tStatusCode: jsii.String(\"statusCode\"),\n\n\t// the properties below are optional\n\tResponseModels: map[string]*string{\n\t\t\"responseModelsKey\": jsii.String(\"responseModels\"),\n\t},\n\tResponseParameters: map[string]interface{}{\n\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodResponseProperty: apigateway.CfnMethod.MethodResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: 'responseModels',\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnMethod.MethodResponseProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnMethod.MethodResponseProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodResponseProperty: apigateway.CfnMethod.MethodResponseProperty = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: 'responseModels',\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":10,"91":1,"153":2,"169":1,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"123ed13398d685cfa009728c3ec46a175185b17982d446f15409effa48aa17b4"},"3dec362f2ff3aa18fe6d70a59eefa3c8f67cd4072a7f8d80438169548b7d64d5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_method_props = apigateway.CfnMethodProps(\n    http_method=\"httpMethod\",\n    resource_id=\"resourceId\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    integration=apigateway.CfnMethod.IntegrationProperty(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_id=\"connectionId\",\n        connection_type=\"connectionType\",\n        content_handling=\"contentHandling\",\n        credentials=\"credentials\",\n        integration_http_method=\"integrationHttpMethod\",\n        integration_responses=[apigateway.CfnMethod.IntegrationResponseProperty(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=\"contentHandling\",\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=\"passthroughBehavior\",\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout_in_millis=123,\n        type=\"type\",\n        uri=\"uri\"\n    ),\n    method_responses=[apigateway.CfnMethod.MethodResponseProperty(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        response_models={\n            \"response_models_key\": \"responseModels\"\n        },\n        response_parameters={\n            \"response_parameters_key\": False\n        }\n    )],\n    operation_name=\"operationName\",\n    request_models={\n        \"request_models_key\": \"requestModels\"\n    },\n    request_parameters={\n        \"request_parameters_key\": False\n    },\n    request_validator_id=\"requestValidatorId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnMethodProps = new CfnMethodProps {\n    HttpMethod = \"httpMethod\",\n    ResourceId = \"resourceId\",\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    Integration = new IntegrationProperty {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionId = \"connectionId\",\n        ConnectionType = \"connectionType\",\n        ContentHandling = \"contentHandling\",\n        Credentials = \"credentials\",\n        IntegrationHttpMethod = \"integrationHttpMethod\",\n        IntegrationResponses = new [] { new IntegrationResponseProperty {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = \"contentHandling\",\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = \"passthroughBehavior\",\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        TimeoutInMillis = 123,\n        Type = \"type\",\n        Uri = \"uri\"\n    },\n    MethodResponses = new [] { new MethodResponseProperty {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ResponseModels = new Dictionary<string, string> {\n            { \"responseModelsKey\", \"responseModels\" }\n        },\n        ResponseParameters = new Dictionary<string, object> {\n            { \"responseParametersKey\", false }\n        }\n    } },\n    OperationName = \"operationName\",\n    RequestModels = new Dictionary<string, string> {\n        { \"requestModelsKey\", \"requestModels\" }\n    },\n    RequestParameters = new Dictionary<string, object> {\n        { \"requestParametersKey\", false }\n    },\n    RequestValidatorId = \"requestValidatorId\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnMethodProps cfnMethodProps = CfnMethodProps.builder()\n        .httpMethod(\"httpMethod\")\n        .resourceId(\"resourceId\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .integration(IntegrationProperty.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionId(\"connectionId\")\n                .connectionType(\"connectionType\")\n                .contentHandling(\"contentHandling\")\n                .credentials(\"credentials\")\n                .integrationHttpMethod(\"integrationHttpMethod\")\n                .integrationResponses(List.of(IntegrationResponseProperty.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(\"contentHandling\")\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(\"passthroughBehavior\")\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeoutInMillis(123)\n                .type(\"type\")\n                .uri(\"uri\")\n                .build())\n        .methodResponses(List.of(MethodResponseProperty.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .responseModels(Map.of(\n                        \"responseModelsKey\", \"responseModels\"))\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", false))\n                .build()))\n        .operationName(\"operationName\")\n        .requestModels(Map.of(\n                \"requestModelsKey\", \"requestModels\"))\n        .requestParameters(Map.of(\n                \"requestParametersKey\", false))\n        .requestValidatorId(\"requestValidatorId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnMethodProps := &CfnMethodProps{\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tResourceId: jsii.String(\"resourceId\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tApiKeyRequired: jsii.Boolean(false),\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tAuthorizationType: jsii.String(\"authorizationType\"),\n\tAuthorizerId: jsii.String(\"authorizerId\"),\n\tIntegration: &IntegrationProperty{\n\t\tCacheKeyParameters: []*string{\n\t\t\tjsii.String(\"cacheKeyParameters\"),\n\t\t},\n\t\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\t\tConnectionId: jsii.String(\"connectionId\"),\n\t\tConnectionType: jsii.String(\"connectionType\"),\n\t\tContentHandling: jsii.String(\"contentHandling\"),\n\t\tCredentials: jsii.String(\"credentials\"),\n\t\tIntegrationHttpMethod: jsii.String(\"integrationHttpMethod\"),\n\t\tIntegrationResponses: []interface{}{\n\t\t\t&IntegrationResponseProperty{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tContentHandling: jsii.String(\"contentHandling\"),\n\t\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t\t},\n\t\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t\t},\n\t\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: jsii.String(\"passthroughBehavior\"),\n\t\tRequestParameters: map[string]*string{\n\t\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t\t},\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t\t},\n\t\tTimeoutInMillis: jsii.Number(123),\n\t\tType: jsii.String(\"type\"),\n\t\tUri: jsii.String(\"uri\"),\n\t},\n\tMethodResponses: []interface{}{\n\t\t&MethodResponseProperty{\n\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t// the properties below are optional\n\t\t\tResponseModels: map[string]*string{\n\t\t\t\t\"responseModelsKey\": jsii.String(\"responseModels\"),\n\t\t\t},\n\t\t\tResponseParameters: map[string]interface{}{\n\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\tOperationName: jsii.String(\"operationName\"),\n\tRequestModels: map[string]*string{\n\t\t\"requestModelsKey\": jsii.String(\"requestModels\"),\n\t},\n\tRequestParameters: map[string]interface{}{\n\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t},\n\tRequestValidatorId: jsii.String(\"requestValidatorId\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnMethodProps: apigateway.CfnMethodProps = {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnMethodProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnMethodProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnMethodProps: apigateway.CfnMethodProps = {\n  httpMethod: 'httpMethod',\n  resourceId: 'resourceId',\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  integration: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionId: 'connectionId',\n    connectionType: 'connectionType',\n    contentHandling: 'contentHandling',\n    credentials: 'credentials',\n    integrationHttpMethod: 'integrationHttpMethod',\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: 'contentHandling',\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: 'passthroughBehavior',\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeoutInMillis: 123,\n    type: 'type',\n    uri: 'uri',\n  },\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: 'responseModels',\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: 'requestModels',\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidatorId: 'requestValidatorId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":29,"75":47,"91":3,"153":1,"169":1,"192":4,"193":12,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":43,"290":1},"fqnsFingerprint":"f7fedd42c97580b17a0774541517c02c2c1398a4e94e02d0fbd0c8b5e967b54c"},"d5f2d0f2101fa0a2858d5e9e3821fd48cd5ebae44ec5f43eecc1b26662c9a373":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model = apigateway.CfnModel(self, \"MyCfnModel\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    name=\"name\",\n    schema=schema\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nvar cfnModel = new CfnModel(this, \"MyCfnModel\", new CfnModelProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    Name = \"name\",\n    Schema = schema\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModel cfnModel = CfnModel.Builder.create(this, \"MyCfnModel\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .name(\"name\")\n        .schema(schema)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar schema interface{}\n\ncfnModel := apigateway.NewCfnModel(this, jsii.String(\"MyCfnModel\"), &CfnModelProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tContentType: jsii.String(\"contentType\"),\n\tDescription: jsii.String(\"description\"),\n\tName: jsii.String(\"name\"),\n\tSchema: schema,\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModel = new apigateway.CfnModel(this, 'MyCfnModel', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnModel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnModel","@aws-cdk/aws-apigateway.CfnModelProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModel = new apigateway.CfnModel(this, 'MyCfnModel', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":11,"104":1,"125":1,"130":1,"193":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"d24c058f565c8a9166f8172b5700cce172bc5773a5b815ecfba5c2fd1690d84f"},"dbbbd2037b0999353d851a0944b47ac81e0223a3cbb931ec934ce710c66e26ca":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_props = apigateway.CfnModelProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    name=\"name\",\n    schema=schema\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nvar cfnModelProps = new CfnModelProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    Name = \"name\",\n    Schema = schema\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelProps cfnModelProps = CfnModelProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .name(\"name\")\n        .schema(schema)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar schema interface{}\n\ncfnModelProps := &CfnModelProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tContentType: jsii.String(\"contentType\"),\n\tDescription: jsii.String(\"description\"),\n\tName: jsii.String(\"name\"),\n\tSchema: schema,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelProps: apigateway.CfnModelProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnModelProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnModelProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelProps: apigateway.CfnModelProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  name: 'name',\n  schema: schema,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":11,"125":1,"130":1,"153":1,"169":1,"193":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"61fec0d4950b4da4fe73e490a8d969f1522786e7816feab800ee9f60fbaeab1f"},"5ac138f1ae10288917a86ae227771b34f4199fd93aa56e137e074a1af5105c8f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_v2 = apigateway.CfnModelV2(self, \"MyCfnModelV2\",\n    api_id=\"apiId\",\n    name=\"name\",\n    schema=schema,\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nvar cfnModelV2 = new CfnModelV2(this, \"MyCfnModelV2\", new CfnModelV2Props {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Schema = schema,\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelV2 cfnModelV2 = CfnModelV2.Builder.create(this, \"MyCfnModelV2\")\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .schema(schema)\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar schema interface{}\n\ncfnModelV2 := apigateway.NewCfnModelV2(this, jsii.String(\"MyCfnModelV2\"), &CfnModelV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tName: jsii.String(\"name\"),\n\tSchema: schema,\n\n\t// the properties below are optional\n\tContentType: jsii.String(\"contentType\"),\n\tDescription: jsii.String(\"description\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelV2 = new apigateway.CfnModelV2(this, 'MyCfnModelV2', {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnModelV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnModelV2","@aws-cdk/aws-apigateway.CfnModelV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelV2 = new apigateway.CfnModelV2(this, 'MyCfnModelV2', {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":11,"104":1,"125":1,"130":1,"193":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"17ed12cc1e26fc4a0ea161a55fc550f0a43c8a64bb00608d701e5ed32afbabcc"},"2b0d4b04429f49355cf313caafeb6b38fc2e5dad4112b43bab5dbfd7575860fe":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# schema: Any\n\ncfn_model_v2_props = apigateway.CfnModelV2Props(\n    api_id=\"apiId\",\n    name=\"name\",\n    schema=schema,\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar schema;\n\nvar cfnModelV2Props = new CfnModelV2Props {\n    ApiId = \"apiId\",\n    Name = \"name\",\n    Schema = schema,\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject schema;\n\nCfnModelV2Props cfnModelV2Props = CfnModelV2Props.builder()\n        .apiId(\"apiId\")\n        .name(\"name\")\n        .schema(schema)\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar schema interface{}\n\ncfnModelV2Props := &CfnModelV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tName: jsii.String(\"name\"),\n\tSchema: schema,\n\n\t// the properties below are optional\n\tContentType: jsii.String(\"contentType\"),\n\tDescription: jsii.String(\"description\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\nconst cfnModelV2Props: apigateway.CfnModelV2Props = {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnModelV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnModelV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const schema: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnModelV2Props: apigateway.CfnModelV2Props = {\n  apiId: 'apiId',\n  name: 'name',\n  schema: schema,\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":11,"125":1,"130":1,"153":1,"169":1,"193":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"068f8095163b178fd19aa77301771867e69721193fbfd1f706252935d169f84c"},"44ad415e8167973f282d56e34d54f8638e2c9afdbeff5b71411e781bbe6997b7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_request_validator = apigateway.CfnRequestValidator(self, \"MyCfnRequestValidator\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    name=\"name\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnRequestValidator = new CfnRequestValidator(this, \"MyCfnRequestValidator\", new CfnRequestValidatorProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnRequestValidator cfnRequestValidator = CfnRequestValidator.Builder.create(this, \"MyCfnRequestValidator\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnRequestValidator := apigateway.NewCfnRequestValidator(this, jsii.String(\"MyCfnRequestValidator\"), &CfnRequestValidatorProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tName: jsii.String(\"name\"),\n\tValidateRequestBody: jsii.Boolean(false),\n\tValidateRequestParameters: jsii.Boolean(false),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnRequestValidator = new apigateway.CfnRequestValidator(this, 'MyCfnRequestValidator', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRequestValidator"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRequestValidator","@aws-cdk/aws-apigateway.CfnRequestValidatorProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRequestValidator = new apigateway.CfnRequestValidator(this, 'MyCfnRequestValidator', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"91":2,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"b874ec9ddc2c976d01994be82ce75ed86d71fde9fd635160b8d3fd72c605af28"},"ffb2fe7fc097edb6110b8b6ae2b837e92b1508d896c2c49d6166597ad3e8a1f3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_request_validator_props = apigateway.CfnRequestValidatorProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    name=\"name\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnRequestValidatorProps = new CfnRequestValidatorProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnRequestValidatorProps cfnRequestValidatorProps = CfnRequestValidatorProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnRequestValidatorProps := &CfnRequestValidatorProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tName: jsii.String(\"name\"),\n\tValidateRequestBody: jsii.Boolean(false),\n\tValidateRequestParameters: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnRequestValidatorProps: apigateway.CfnRequestValidatorProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRequestValidatorProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRequestValidatorProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRequestValidatorProps: apigateway.CfnRequestValidatorProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  name: 'name',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":8,"91":2,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"aea1577dbde6bdc09acbfda09fea7c10356d8b26c65936867a57516c2a26607e"},"b6e3b13f456ff6b6723f33425b97c4f0f2c777e57611c4f3b73521a3b2dca4c4":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_resource = apigateway.CfnResource(self, \"MyCfnResource\",\n    parent_id=\"parentId\",\n    path_part=\"pathPart\",\n    rest_api_id=\"restApiId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnResource = new CfnResource(this, \"MyCfnResource\", new CfnResourceProps {\n    ParentId = \"parentId\",\n    PathPart = \"pathPart\",\n    RestApiId = \"restApiId\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnResource cfnResource = CfnResource.Builder.create(this, \"MyCfnResource\")\n        .parentId(\"parentId\")\n        .pathPart(\"pathPart\")\n        .restApiId(\"restApiId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnResource := apigateway.NewCfnResource(this, jsii.String(\"MyCfnResource\"), &CfnResourceProps{\n\tParentId: jsii.String(\"parentId\"),\n\tPathPart: jsii.String(\"pathPart\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnResource = new apigateway.CfnResource(this, 'MyCfnResource', {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnResource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnResource","@aws-cdk/aws-apigateway.CfnResourceProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResource = new apigateway.CfnResource(this, 'MyCfnResource', {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":7,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"18a19bd65f75beea7ec8f6b3810d3eb9497e4b0f85cd57f7888ccacef2b5b495"},"c719302e5339b4f504c31051aa4a468fa3e23a22c0cf0039bda8ebd9e7e3b34f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_resource_props = apigateway.CfnResourceProps(\n    parent_id=\"parentId\",\n    path_part=\"pathPart\",\n    rest_api_id=\"restApiId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnResourceProps = new CfnResourceProps {\n    ParentId = \"parentId\",\n    PathPart = \"pathPart\",\n    RestApiId = \"restApiId\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnResourceProps cfnResourceProps = CfnResourceProps.builder()\n        .parentId(\"parentId\")\n        .pathPart(\"pathPart\")\n        .restApiId(\"restApiId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnResourceProps := &CfnResourceProps{\n\tParentId: jsii.String(\"parentId\"),\n\tPathPart: jsii.String(\"pathPart\"),\n\tRestApiId: jsii.String(\"restApiId\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnResourceProps: apigateway.CfnResourceProps = {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnResourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnResourceProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnResourceProps: apigateway.CfnResourceProps = {\n  parentId: 'parentId',\n  pathPart: 'pathPart',\n  restApiId: 'restApiId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"f84b00ad12a2c4cbd62ec19f633e43780c62b280d725a2b5008d7e2b662ead0e"},"331e53a69ccd41d54ad0669b633bc54495a5915fc84e068730db8e5980fe3a4b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# policy: Any\n\ncfn_rest_api = apigateway.CfnRestApi(self, \"MyCfnRestApi\",\n    api_key_source_type=\"apiKeySourceType\",\n    binary_media_types=[\"binaryMediaTypes\"],\n    body=body,\n    body_s3_location=apigateway.CfnRestApi.S3LocationProperty(\n        bucket=\"bucket\",\n        e_tag=\"eTag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    clone_from=\"cloneFrom\",\n    description=\"description\",\n    disable_execute_api_endpoint=False,\n    endpoint_configuration=apigateway.CfnRestApi.EndpointConfigurationProperty(\n        types=[\"types\"],\n        vpc_endpoint_ids=[\"vpcEndpointIds\"]\n    ),\n    fail_on_warnings=False,\n    minimum_compression_size=123,\n    mode=\"mode\",\n    name=\"name\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar policy;\n\nvar cfnRestApi = new CfnRestApi(this, \"MyCfnRestApi\", new CfnRestApiProps {\n    ApiKeySourceType = \"apiKeySourceType\",\n    BinaryMediaTypes = new [] { \"binaryMediaTypes\" },\n    Body = body,\n    BodyS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        ETag = \"eTag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CloneFrom = \"cloneFrom\",\n    Description = \"description\",\n    DisableExecuteApiEndpoint = false,\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" },\n        VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n    },\n    FailOnWarnings = false,\n    MinimumCompressionSize = 123,\n    Mode = \"mode\",\n    Name = \"name\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policy,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject policy;\n\nCfnRestApi cfnRestApi = CfnRestApi.Builder.create(this, \"MyCfnRestApi\")\n        .apiKeySourceType(\"apiKeySourceType\")\n        .binaryMediaTypes(List.of(\"binaryMediaTypes\"))\n        .body(body)\n        .bodyS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .eTag(\"eTag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .cloneFrom(\"cloneFrom\")\n        .description(\"description\")\n        .disableExecuteApiEndpoint(false)\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n                .build())\n        .failOnWarnings(false)\n        .minimumCompressionSize(123)\n        .mode(\"mode\")\n        .name(\"name\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policy)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar body interface{}\nvar policy interface{}\n\ncfnRestApi := apigateway.NewCfnRestApi(this, jsii.String(\"MyCfnRestApi\"), &CfnRestApiProps{\n\tApiKeySourceType: jsii.String(\"apiKeySourceType\"),\n\tBinaryMediaTypes: []*string{\n\t\tjsii.String(\"binaryMediaTypes\"),\n\t},\n\tBody: body,\n\tBodyS3Location: &S3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tETag: jsii.String(\"eTag\"),\n\t\tKey: jsii.String(\"key\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tCloneFrom: jsii.String(\"cloneFrom\"),\n\tDescription: jsii.String(\"description\"),\n\tDisableExecuteApiEndpoint: jsii.Boolean(false),\n\tEndpointConfiguration: &EndpointConfigurationProperty{\n\t\tTypes: []*string{\n\t\t\tjsii.String(\"types\"),\n\t\t},\n\t\tVpcEndpointIds: []*string{\n\t\t\tjsii.String(\"vpcEndpointIds\"),\n\t\t},\n\t},\n\tFailOnWarnings: jsii.Boolean(false),\n\tMinimumCompressionSize: jsii.Number(123),\n\tMode: jsii.String(\"mode\"),\n\tName: jsii.String(\"name\"),\n\tParameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\tPolicy: policy,\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\nconst cfnRestApi = new apigateway.CfnRestApi(this, 'MyCfnRestApi', /* all optional props */ {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRestApi"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRestApi","@aws-cdk/aws-apigateway.CfnRestApiProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRestApi = new apigateway.CfnRestApi(this, 'MyCfnRestApi', /* all optional props */ {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":17,"75":32,"91":2,"104":1,"125":2,"130":2,"192":4,"193":5,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":24,"290":1},"fqnsFingerprint":"5a3a56f57f344eae755f3339db25850bda9279a0431cb90a71fd330be9b71a93"},"c088bb1496c78f684d7e9ae23e65f619fba95394ef5dcbb2ab5014e2500cbd3d":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nendpoint_configuration_property = apigateway.CfnRestApi.EndpointConfigurationProperty(\n    types=[\"types\"],\n    vpc_endpoint_ids=[\"vpcEndpointIds\"]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar endpointConfigurationProperty = new EndpointConfigurationProperty {\n    Types = new [] { \"types\" },\n    VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEndpointConfigurationProperty endpointConfigurationProperty = EndpointConfigurationProperty.builder()\n        .types(List.of(\"types\"))\n        .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nendpointConfigurationProperty := &EndpointConfigurationProperty{\n\tTypes: []*string{\n\t\tjsii.String(\"types\"),\n\t},\n\tVpcEndpointIds: []*string{\n\t\tjsii.String(\"vpcEndpointIds\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst endpointConfigurationProperty: apigateway.CfnRestApi.EndpointConfigurationProperty = {\n  types: ['types'],\n  vpcEndpointIds: ['vpcEndpointIds'],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRestApi.EndpointConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRestApi.EndpointConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointConfigurationProperty: apigateway.CfnRestApi.EndpointConfigurationProperty = {\n  types: ['types'],\n  vpcEndpointIds: ['vpcEndpointIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"192":2,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"cfd836b4a474a11ec185a0078e201b7251c511c3c25f2da5a34014967b5e22c7"},"69a38222b27a8167b3c67e6baa9b6b02524d050d8358c8c2344d988a2e139b76":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ns3_location_property = apigateway.CfnRestApi.S3LocationProperty(\n    bucket=\"bucket\",\n    e_tag=\"eTag\",\n    key=\"key\",\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar s3LocationProperty = new S3LocationProperty {\n    Bucket = \"bucket\",\n    ETag = \"eTag\",\n    Key = \"key\",\n    Version = \"version\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nS3LocationProperty s3LocationProperty = S3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .eTag(\"eTag\")\n        .key(\"key\")\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ns3LocationProperty := &S3LocationProperty{\n\tBucket: jsii.String(\"bucket\"),\n\tETag: jsii.String(\"eTag\"),\n\tKey: jsii.String(\"key\"),\n\tVersion: jsii.String(\"version\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst s3LocationProperty: apigateway.CfnRestApi.S3LocationProperty = {\n  bucket: 'bucket',\n  eTag: 'eTag',\n  key: 'key',\n  version: 'version',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRestApi.S3LocationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRestApi.S3LocationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationProperty: apigateway.CfnRestApi.S3LocationProperty = {\n  bucket: 'bucket',\n  eTag: 'eTag',\n  key: 'key',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":9,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"47c865368e8305b07d3689bc88c1f978fce43bfde36cd2529ce05d7e67da3805"},"43399d152dfc7b3b85bb8deda23b0292ae6a008c3ac7807e01f934b375b763d5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# body: Any\n# policy: Any\n\ncfn_rest_api_props = apigateway.CfnRestApiProps(\n    api_key_source_type=\"apiKeySourceType\",\n    binary_media_types=[\"binaryMediaTypes\"],\n    body=body,\n    body_s3_location=apigateway.CfnRestApi.S3LocationProperty(\n        bucket=\"bucket\",\n        e_tag=\"eTag\",\n        key=\"key\",\n        version=\"version\"\n    ),\n    clone_from=\"cloneFrom\",\n    description=\"description\",\n    disable_execute_api_endpoint=False,\n    endpoint_configuration=apigateway.CfnRestApi.EndpointConfigurationProperty(\n        types=[\"types\"],\n        vpc_endpoint_ids=[\"vpcEndpointIds\"]\n    ),\n    fail_on_warnings=False,\n    minimum_compression_size=123,\n    mode=\"mode\",\n    name=\"name\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar body;\nvar policy;\n\nvar cfnRestApiProps = new CfnRestApiProps {\n    ApiKeySourceType = \"apiKeySourceType\",\n    BinaryMediaTypes = new [] { \"binaryMediaTypes\" },\n    Body = body,\n    BodyS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        ETag = \"eTag\",\n        Key = \"key\",\n        Version = \"version\"\n    },\n    CloneFrom = \"cloneFrom\",\n    Description = \"description\",\n    DisableExecuteApiEndpoint = false,\n    EndpointConfiguration = new EndpointConfigurationProperty {\n        Types = new [] { \"types\" },\n        VpcEndpointIds = new [] { \"vpcEndpointIds\" }\n    },\n    FailOnWarnings = false,\n    MinimumCompressionSize = 123,\n    Mode = \"mode\",\n    Name = \"name\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policy,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject body;\nObject policy;\n\nCfnRestApiProps cfnRestApiProps = CfnRestApiProps.builder()\n        .apiKeySourceType(\"apiKeySourceType\")\n        .binaryMediaTypes(List.of(\"binaryMediaTypes\"))\n        .body(body)\n        .bodyS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .eTag(\"eTag\")\n                .key(\"key\")\n                .version(\"version\")\n                .build())\n        .cloneFrom(\"cloneFrom\")\n        .description(\"description\")\n        .disableExecuteApiEndpoint(false)\n        .endpointConfiguration(EndpointConfigurationProperty.builder()\n                .types(List.of(\"types\"))\n                .vpcEndpointIds(List.of(\"vpcEndpointIds\"))\n                .build())\n        .failOnWarnings(false)\n        .minimumCompressionSize(123)\n        .mode(\"mode\")\n        .name(\"name\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policy)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar body interface{}\nvar policy interface{}\n\ncfnRestApiProps := &CfnRestApiProps{\n\tApiKeySourceType: jsii.String(\"apiKeySourceType\"),\n\tBinaryMediaTypes: []*string{\n\t\tjsii.String(\"binaryMediaTypes\"),\n\t},\n\tBody: body,\n\tBodyS3Location: &S3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tETag: jsii.String(\"eTag\"),\n\t\tKey: jsii.String(\"key\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tCloneFrom: jsii.String(\"cloneFrom\"),\n\tDescription: jsii.String(\"description\"),\n\tDisableExecuteApiEndpoint: jsii.Boolean(false),\n\tEndpointConfiguration: &EndpointConfigurationProperty{\n\t\tTypes: []*string{\n\t\t\tjsii.String(\"types\"),\n\t\t},\n\t\tVpcEndpointIds: []*string{\n\t\t\tjsii.String(\"vpcEndpointIds\"),\n\t\t},\n\t},\n\tFailOnWarnings: jsii.Boolean(false),\n\tMinimumCompressionSize: jsii.Number(123),\n\tMode: jsii.String(\"mode\"),\n\tName: jsii.String(\"name\"),\n\tParameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\tPolicy: policy,\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\nconst cfnRestApiProps: apigateway.CfnRestApiProps = {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRestApiProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRestApiProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const body: any;\ndeclare const policy: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRestApiProps: apigateway.CfnRestApiProps = {\n  apiKeySourceType: 'apiKeySourceType',\n  binaryMediaTypes: ['binaryMediaTypes'],\n  body: body,\n  bodyS3Location: {\n    bucket: 'bucket',\n    eTag: 'eTag',\n    key: 'key',\n    version: 'version',\n  },\n  cloneFrom: 'cloneFrom',\n  description: 'description',\n  disableExecuteApiEndpoint: false,\n  endpointConfiguration: {\n    types: ['types'],\n    vpcEndpointIds: ['vpcEndpointIds'],\n  },\n  failOnWarnings: false,\n  minimumCompressionSize: 123,\n  mode: 'mode',\n  name: 'name',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policy,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":16,"75":32,"91":2,"125":2,"130":2,"153":1,"169":1,"192":4,"193":5,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":24,"290":1},"fqnsFingerprint":"5798ba014c9754a7fe4cad981560e120bed6e2dea05d3b473615d67a7898fff8"},"f2e829d4b97ec6ae8b977a1b33803e754c917534c57bcb2f8bea37b64d136808":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_models: Any\n# response_parameters: Any\n\ncfn_route_response_v2 = apigateway.CfnRouteResponseV2(self, \"MyCfnRouteResponseV2\",\n    api_id=\"apiId\",\n    route_id=\"routeId\",\n    route_response_key=\"routeResponseKey\",\n\n    # the properties below are optional\n    model_selection_expression=\"modelSelectionExpression\",\n    response_models=response_models,\n    response_parameters=response_parameters\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseModels;\nvar responseParameters;\n\nvar cfnRouteResponseV2 = new CfnRouteResponseV2(this, \"MyCfnRouteResponseV2\", new CfnRouteResponseV2Props {\n    ApiId = \"apiId\",\n    RouteId = \"routeId\",\n    RouteResponseKey = \"routeResponseKey\",\n\n    // the properties below are optional\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    ResponseModels = responseModels,\n    ResponseParameters = responseParameters\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseModels;\nObject responseParameters;\n\nCfnRouteResponseV2 cfnRouteResponseV2 = CfnRouteResponseV2.Builder.create(this, \"MyCfnRouteResponseV2\")\n        .apiId(\"apiId\")\n        .routeId(\"routeId\")\n        .routeResponseKey(\"routeResponseKey\")\n\n        // the properties below are optional\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .responseModels(responseModels)\n        .responseParameters(responseParameters)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseModels interface{}\nvar responseParameters interface{}\n\ncfnRouteResponseV2 := apigateway.NewCfnRouteResponseV2(this, jsii.String(\"MyCfnRouteResponseV2\"), &CfnRouteResponseV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tRouteId: jsii.String(\"routeId\"),\n\tRouteResponseKey: jsii.String(\"routeResponseKey\"),\n\n\t// the properties below are optional\n\tModelSelectionExpression: jsii.String(\"modelSelectionExpression\"),\n\tResponseModels: responseModels,\n\tResponseParameters: responseParameters,\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\nconst cfnRouteResponseV2 = new apigateway.CfnRouteResponseV2(this, 'MyCfnRouteResponseV2', {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteResponseV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteResponseV2","@aws-cdk/aws-apigateway.CfnRouteResponseV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteResponseV2 = new apigateway.CfnRouteResponseV2(this, 'MyCfnRouteResponseV2', {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":14,"104":1,"125":2,"130":2,"193":1,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"3c6e1c3ed2770812c6f22a3ceb15ae51168c7e07fc5f967457aee1d9aeffe226"},"61bb569a759345f4a793a715e046642d1894116c19ca50cb5701b1e9cf093eb7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nparameter_constraints_property = apigateway.CfnRouteResponseV2.ParameterConstraintsProperty(\n    required=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar parameterConstraintsProperty = new ParameterConstraintsProperty {\n    Required = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nParameterConstraintsProperty parameterConstraintsProperty = ParameterConstraintsProperty.builder()\n        .required(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nparameterConstraintsProperty := &ParameterConstraintsProperty{\n\tRequired: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst parameterConstraintsProperty: apigateway.CfnRouteResponseV2.ParameterConstraintsProperty = {\n  required: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteResponseV2.ParameterConstraintsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteResponseV2.ParameterConstraintsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterConstraintsProperty: apigateway.CfnRouteResponseV2.ParameterConstraintsProperty = {\n  required: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"91":1,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"f7972e92ade30d241a86ed9f61803cb6cc1b437b0a73cfe33cceb64c9c62d3b5"},"75548fb54899727edad053e364b41f45b40ecd434db051cb47c6500cfe489250":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_models: Any\n# response_parameters: Any\n\ncfn_route_response_v2_props = apigateway.CfnRouteResponseV2Props(\n    api_id=\"apiId\",\n    route_id=\"routeId\",\n    route_response_key=\"routeResponseKey\",\n\n    # the properties below are optional\n    model_selection_expression=\"modelSelectionExpression\",\n    response_models=response_models,\n    response_parameters=response_parameters\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar responseModels;\nvar responseParameters;\n\nvar cfnRouteResponseV2Props = new CfnRouteResponseV2Props {\n    ApiId = \"apiId\",\n    RouteId = \"routeId\",\n    RouteResponseKey = \"routeResponseKey\",\n\n    // the properties below are optional\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    ResponseModels = responseModels,\n    ResponseParameters = responseParameters\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject responseModels;\nObject responseParameters;\n\nCfnRouteResponseV2Props cfnRouteResponseV2Props = CfnRouteResponseV2Props.builder()\n        .apiId(\"apiId\")\n        .routeId(\"routeId\")\n        .routeResponseKey(\"routeResponseKey\")\n\n        // the properties below are optional\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .responseModels(responseModels)\n        .responseParameters(responseParameters)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseModels interface{}\nvar responseParameters interface{}\n\ncfnRouteResponseV2Props := &CfnRouteResponseV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tRouteId: jsii.String(\"routeId\"),\n\tRouteResponseKey: jsii.String(\"routeResponseKey\"),\n\n\t// the properties below are optional\n\tModelSelectionExpression: jsii.String(\"modelSelectionExpression\"),\n\tResponseModels: responseModels,\n\tResponseParameters: responseParameters,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\nconst cfnRouteResponseV2Props: apigateway.CfnRouteResponseV2Props = {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteResponseV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteResponseV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseModels: any;\ndeclare const responseParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteResponseV2Props: apigateway.CfnRouteResponseV2Props = {\n  apiId: 'apiId',\n  routeId: 'routeId',\n  routeResponseKey: 'routeResponseKey',\n\n  // the properties below are optional\n  modelSelectionExpression: 'modelSelectionExpression',\n  responseModels: responseModels,\n  responseParameters: responseParameters,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":14,"125":2,"130":2,"153":1,"169":1,"193":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"024d59836e2aa69db10728fa415394c0e91f03366281b3f58edc05bf421d352a"},"1942c743178d77513627e8dbc9281908567787854a88657262c35f37bcc027ad":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_models: Any\n# request_parameters: Any\n\ncfn_route_v2 = apigateway.CfnRouteV2(self, \"MyCfnRouteV2\",\n    api_id=\"apiId\",\n    route_key=\"routeKey\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    model_selection_expression=\"modelSelectionExpression\",\n    operation_name=\"operationName\",\n    request_models=request_models,\n    request_parameters=request_parameters,\n    route_response_selection_expression=\"routeResponseSelectionExpression\",\n    target=\"target\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestModels;\nvar requestParameters;\n\nvar cfnRouteV2 = new CfnRouteV2(this, \"MyCfnRouteV2\", new CfnRouteV2Props {\n    ApiId = \"apiId\",\n    RouteKey = \"routeKey\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    OperationName = \"operationName\",\n    RequestModels = requestModels,\n    RequestParameters = requestParameters,\n    RouteResponseSelectionExpression = \"routeResponseSelectionExpression\",\n    Target = \"target\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestModels;\nObject requestParameters;\n\nCfnRouteV2 cfnRouteV2 = CfnRouteV2.Builder.create(this, \"MyCfnRouteV2\")\n        .apiId(\"apiId\")\n        .routeKey(\"routeKey\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .operationName(\"operationName\")\n        .requestModels(requestModels)\n        .requestParameters(requestParameters)\n        .routeResponseSelectionExpression(\"routeResponseSelectionExpression\")\n        .target(\"target\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar requestModels interface{}\nvar requestParameters interface{}\n\ncfnRouteV2 := apigateway.NewCfnRouteV2(this, jsii.String(\"MyCfnRouteV2\"), &CfnRouteV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tRouteKey: jsii.String(\"routeKey\"),\n\n\t// the properties below are optional\n\tApiKeyRequired: jsii.Boolean(false),\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tAuthorizationType: jsii.String(\"authorizationType\"),\n\tAuthorizerId: jsii.String(\"authorizerId\"),\n\tModelSelectionExpression: jsii.String(\"modelSelectionExpression\"),\n\tOperationName: jsii.String(\"operationName\"),\n\tRequestModels: requestModels,\n\tRequestParameters: requestParameters,\n\tRouteResponseSelectionExpression: jsii.String(\"routeResponseSelectionExpression\"),\n\tTarget: jsii.String(\"target\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\nconst cfnRouteV2 = new apigateway.CfnRouteV2(this, 'MyCfnRouteV2', {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteV2","@aws-cdk/aws-apigateway.CfnRouteV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteV2 = new apigateway.CfnRouteV2(this, 'MyCfnRouteV2', {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":11,"75":20,"91":1,"104":1,"125":2,"130":2,"192":1,"193":1,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"5e339fb296711c8bbd5a36f91bd8d26dfb670dd69ef41af473c1e09bcd8dc781"},"5513d3b06325d17c287f8efd78b8f49407e646afd42cad18b4935f0f25f31eae":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nparameter_constraints_property = apigateway.CfnRouteV2.ParameterConstraintsProperty(\n    required=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar parameterConstraintsProperty = new ParameterConstraintsProperty {\n    Required = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nParameterConstraintsProperty parameterConstraintsProperty = ParameterConstraintsProperty.builder()\n        .required(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nparameterConstraintsProperty := &ParameterConstraintsProperty{\n\tRequired: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst parameterConstraintsProperty: apigateway.CfnRouteV2.ParameterConstraintsProperty = {\n  required: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteV2.ParameterConstraintsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteV2.ParameterConstraintsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterConstraintsProperty: apigateway.CfnRouteV2.ParameterConstraintsProperty = {\n  required: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"91":1,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"6060ae848f0d24cbf5c3e4a4022e71fc8b6c4bc4868f7e8ae68e5f13c57abeb2"},"3bc5486744c44a1fe9d909ea05396e2f4c6ab07f28dbcbb10e3bc144657fdb30":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# request_models: Any\n# request_parameters: Any\n\ncfn_route_v2_props = apigateway.CfnRouteV2Props(\n    api_id=\"apiId\",\n    route_key=\"routeKey\",\n\n    # the properties below are optional\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=\"authorizationType\",\n    authorizer_id=\"authorizerId\",\n    model_selection_expression=\"modelSelectionExpression\",\n    operation_name=\"operationName\",\n    request_models=request_models,\n    request_parameters=request_parameters,\n    route_response_selection_expression=\"routeResponseSelectionExpression\",\n    target=\"target\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar requestModels;\nvar requestParameters;\n\nvar cfnRouteV2Props = new CfnRouteV2Props {\n    ApiId = \"apiId\",\n    RouteKey = \"routeKey\",\n\n    // the properties below are optional\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = \"authorizationType\",\n    AuthorizerId = \"authorizerId\",\n    ModelSelectionExpression = \"modelSelectionExpression\",\n    OperationName = \"operationName\",\n    RequestModels = requestModels,\n    RequestParameters = requestParameters,\n    RouteResponseSelectionExpression = \"routeResponseSelectionExpression\",\n    Target = \"target\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject requestModels;\nObject requestParameters;\n\nCfnRouteV2Props cfnRouteV2Props = CfnRouteV2Props.builder()\n        .apiId(\"apiId\")\n        .routeKey(\"routeKey\")\n\n        // the properties below are optional\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(\"authorizationType\")\n        .authorizerId(\"authorizerId\")\n        .modelSelectionExpression(\"modelSelectionExpression\")\n        .operationName(\"operationName\")\n        .requestModels(requestModels)\n        .requestParameters(requestParameters)\n        .routeResponseSelectionExpression(\"routeResponseSelectionExpression\")\n        .target(\"target\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar requestModels interface{}\nvar requestParameters interface{}\n\ncfnRouteV2Props := &CfnRouteV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tRouteKey: jsii.String(\"routeKey\"),\n\n\t// the properties below are optional\n\tApiKeyRequired: jsii.Boolean(false),\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tAuthorizationType: jsii.String(\"authorizationType\"),\n\tAuthorizerId: jsii.String(\"authorizerId\"),\n\tModelSelectionExpression: jsii.String(\"modelSelectionExpression\"),\n\tOperationName: jsii.String(\"operationName\"),\n\tRequestModels: requestModels,\n\tRequestParameters: requestParameters,\n\tRouteResponseSelectionExpression: jsii.String(\"routeResponseSelectionExpression\"),\n\tTarget: jsii.String(\"target\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\nconst cfnRouteV2Props: apigateway.CfnRouteV2Props = {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnRouteV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnRouteV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const requestModels: any;\ndeclare const requestParameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnRouteV2Props: apigateway.CfnRouteV2Props = {\n  apiId: 'apiId',\n  routeKey: 'routeKey',\n\n  // the properties below are optional\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: 'authorizationType',\n  authorizerId: 'authorizerId',\n  modelSelectionExpression: 'modelSelectionExpression',\n  operationName: 'operationName',\n  requestModels: requestModels,\n  requestParameters: requestParameters,\n  routeResponseSelectionExpression: 'routeResponseSelectionExpression',\n  target: 'target',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":10,"75":20,"91":1,"125":2,"130":2,"153":1,"169":1,"192":1,"193":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"8432b726c30dc9e45f511dd68af3dfd9a2a1b9358c83b7916810f1dc03ca5e66"},"5e28006b7bed0808f89ef751f643afb335de19b8d7ace86763707b4e451127f6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_stage = apigateway.CfnStage(self, \"MyCfnStage\",\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    access_log_setting=apigateway.CfnStage.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    canary_setting=apigateway.CfnStage.CanarySettingProperty(\n        deployment_id=\"deploymentId\",\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    method_settings=[apigateway.CfnStage.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    stage_name=\"stageName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnStage = new CfnStage(this, \"MyCfnStage\", new CfnStageProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CanarySetting = new CanarySettingProperty {\n        DeploymentId = \"deploymentId\",\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    StageName = \"stageName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnStage cfnStage = CfnStage.Builder.create(this, \"MyCfnStage\")\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .canarySetting(CanarySettingProperty.builder()\n                .deploymentId(\"deploymentId\")\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .stageName(\"stageName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnStage := apigateway.NewCfnStage(this, jsii.String(\"MyCfnStage\"), &CfnStageProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tAccessLogSetting: &AccessLogSettingProperty{\n\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\tFormat: jsii.String(\"format\"),\n\t},\n\tCacheClusterEnabled: jsii.Boolean(false),\n\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\tCanarySetting: &CanarySettingProperty{\n\t\tDeploymentId: jsii.String(\"deploymentId\"),\n\t\tPercentTraffic: jsii.Number(123),\n\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t},\n\t\tUseStageCache: jsii.Boolean(false),\n\t},\n\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\tDeploymentId: jsii.String(\"deploymentId\"),\n\tDescription: jsii.String(\"description\"),\n\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\tMethodSettings: []interface{}{\n\t\t&MethodSettingProperty{\n\t\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\t\tCachingEnabled: jsii.Boolean(false),\n\t\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\t\tHttpMethod: jsii.String(\"httpMethod\"),\n\t\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\t\tMetricsEnabled: jsii.Boolean(false),\n\t\t\tResourcePath: jsii.String(\"resourcePath\"),\n\t\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\t\tThrottlingRateLimit: jsii.Number(123),\n\t\t},\n\t},\n\tStageName: jsii.String(\"stageName\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tTracingEnabled: jsii.Boolean(false),\n\tVariables: map[string]*string{\n\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnStage = new apigateway.CfnStage(this, 'MyCfnStage', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStage"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStage","@aws-cdk/aws-apigateway.CfnStageProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStage = new apigateway.CfnStage(this, 'MyCfnStage', {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":4,"10":19,"75":38,"91":7,"104":1,"192":2,"193":7,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":34,"290":1},"fqnsFingerprint":"a0b5c2e99cdf1f818f8cf2accc89f588c7492d96327011d96fd9f5631edb21cb"},"41cbc4dd90a6d793d976f17cf62a602693fa2bef0d988ff2049794881d2657a6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_setting_property = apigateway.CfnStage.AccessLogSettingProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar accessLogSettingProperty = new AccessLogSettingProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingProperty accessLogSettingProperty = AccessLogSettingProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\naccessLogSettingProperty := &AccessLogSettingProperty{\n\tDestinationArn: jsii.String(\"destinationArn\"),\n\tFormat: jsii.String(\"format\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingProperty: apigateway.CfnStage.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStage.AccessLogSettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStage.AccessLogSettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingProperty: apigateway.CfnStage.AccessLogSettingProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"eaf04cf83b5fc0deb7bcdd945ef19a8bdc33159a40088c826de42b862e464eed"},"0ec4aa5134bbad7ae333f12ba92731a1f320dd74cb6e26190cb30a0e505c50b3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncanary_setting_property = apigateway.CfnStage.CanarySettingProperty(\n    deployment_id=\"deploymentId\",\n    percent_traffic=123,\n    stage_variable_overrides={\n        \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n    },\n    use_stage_cache=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar canarySettingProperty = new CanarySettingProperty {\n    DeploymentId = \"deploymentId\",\n    PercentTraffic = 123,\n    StageVariableOverrides = new Dictionary<string, string> {\n        { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n    },\n    UseStageCache = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCanarySettingProperty canarySettingProperty = CanarySettingProperty.builder()\n        .deploymentId(\"deploymentId\")\n        .percentTraffic(123)\n        .stageVariableOverrides(Map.of(\n                \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n        .useStageCache(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncanarySettingProperty := &CanarySettingProperty{\n\tDeploymentId: jsii.String(\"deploymentId\"),\n\tPercentTraffic: jsii.Number(123),\n\tStageVariableOverrides: map[string]*string{\n\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t},\n\tUseStageCache: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst canarySettingProperty: apigateway.CfnStage.CanarySettingProperty = {\n  deploymentId: 'deploymentId',\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStage.CanarySettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStage.CanarySettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst canarySettingProperty: apigateway.CfnStage.CanarySettingProperty = {\n  deploymentId: 'deploymentId',\n  percentTraffic: 123,\n  stageVariableOverrides: {\n    stageVariableOverridesKey: 'stageVariableOverrides',\n  },\n  useStageCache: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":3,"75":10,"91":1,"153":2,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"be725f3552039b3b77884e51f3502ddcd89951eb47eaa28b8c6a7cbf21a31170"},"ddff2cb37701ebaf128f319c9bbbd25619be5171fca6e3d4da1cb26f157cb1ec":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nmethod_setting_property = apigateway.CfnStage.MethodSettingProperty(\n    cache_data_encrypted=False,\n    cache_ttl_in_seconds=123,\n    caching_enabled=False,\n    data_trace_enabled=False,\n    http_method=\"httpMethod\",\n    logging_level=\"loggingLevel\",\n    metrics_enabled=False,\n    resource_path=\"resourcePath\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar methodSettingProperty = new MethodSettingProperty {\n    CacheDataEncrypted = false,\n    CacheTtlInSeconds = 123,\n    CachingEnabled = false,\n    DataTraceEnabled = false,\n    HttpMethod = \"httpMethod\",\n    LoggingLevel = \"loggingLevel\",\n    MetricsEnabled = false,\n    ResourcePath = \"resourcePath\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethodSettingProperty methodSettingProperty = MethodSettingProperty.builder()\n        .cacheDataEncrypted(false)\n        .cacheTtlInSeconds(123)\n        .cachingEnabled(false)\n        .dataTraceEnabled(false)\n        .httpMethod(\"httpMethod\")\n        .loggingLevel(\"loggingLevel\")\n        .metricsEnabled(false)\n        .resourcePath(\"resourcePath\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nmethodSettingProperty := &MethodSettingProperty{\n\tCacheDataEncrypted: jsii.Boolean(false),\n\tCacheTtlInSeconds: jsii.Number(123),\n\tCachingEnabled: jsii.Boolean(false),\n\tDataTraceEnabled: jsii.Boolean(false),\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\tMetricsEnabled: jsii.Boolean(false),\n\tResourcePath: jsii.String(\"resourcePath\"),\n\tThrottlingBurstLimit: jsii.Number(123),\n\tThrottlingRateLimit: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst methodSettingProperty: apigateway.CfnStage.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStage.MethodSettingProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStage.MethodSettingProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodSettingProperty: apigateway.CfnStage.MethodSettingProperty = {\n  cacheDataEncrypted: false,\n  cacheTtlInSeconds: 123,\n  cachingEnabled: false,\n  dataTraceEnabled: false,\n  httpMethod: 'httpMethod',\n  loggingLevel: 'loggingLevel',\n  metricsEnabled: false,\n  resourcePath: 'resourcePath',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":3,"10":4,"75":15,"91":4,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":10,"290":1},"fqnsFingerprint":"6c6edc371c7912f81765d1785e3c599e875b872123d9992b2cf295ee792f4e86"},"7b46a9999d70a71ad7d6c1ec8daea148e70a1c603aeb2e3b6fabae08d355a5db":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_stage_props = apigateway.CfnStageProps(\n    rest_api_id=\"restApiId\",\n\n    # the properties below are optional\n    access_log_setting=apigateway.CfnStage.AccessLogSettingProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    cache_cluster_enabled=False,\n    cache_cluster_size=\"cacheClusterSize\",\n    canary_setting=apigateway.CfnStage.CanarySettingProperty(\n        deployment_id=\"deploymentId\",\n        percent_traffic=123,\n        stage_variable_overrides={\n            \"stage_variable_overrides_key\": \"stageVariableOverrides\"\n        },\n        use_stage_cache=False\n    ),\n    client_certificate_id=\"clientCertificateId\",\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    documentation_version=\"documentationVersion\",\n    method_settings=[apigateway.CfnStage.MethodSettingProperty(\n        cache_data_encrypted=False,\n        cache_ttl_in_seconds=123,\n        caching_enabled=False,\n        data_trace_enabled=False,\n        http_method=\"httpMethod\",\n        logging_level=\"loggingLevel\",\n        metrics_enabled=False,\n        resource_path=\"resourcePath\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    )],\n    stage_name=\"stageName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_enabled=False,\n    variables={\n        \"variables_key\": \"variables\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnStageProps = new CfnStageProps {\n    RestApiId = \"restApiId\",\n\n    // the properties below are optional\n    AccessLogSetting = new AccessLogSettingProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    CacheClusterEnabled = false,\n    CacheClusterSize = \"cacheClusterSize\",\n    CanarySetting = new CanarySettingProperty {\n        DeploymentId = \"deploymentId\",\n        PercentTraffic = 123,\n        StageVariableOverrides = new Dictionary<string, string> {\n            { \"stageVariableOverridesKey\", \"stageVariableOverrides\" }\n        },\n        UseStageCache = false\n    },\n    ClientCertificateId = \"clientCertificateId\",\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    DocumentationVersion = \"documentationVersion\",\n    MethodSettings = new [] { new MethodSettingProperty {\n        CacheDataEncrypted = false,\n        CacheTtlInSeconds = 123,\n        CachingEnabled = false,\n        DataTraceEnabled = false,\n        HttpMethod = \"httpMethod\",\n        LoggingLevel = \"loggingLevel\",\n        MetricsEnabled = false,\n        ResourcePath = \"resourcePath\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    } },\n    StageName = \"stageName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingEnabled = false,\n    Variables = new Dictionary<string, string> {\n        { \"variablesKey\", \"variables\" }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnStageProps cfnStageProps = CfnStageProps.builder()\n        .restApiId(\"restApiId\")\n\n        // the properties below are optional\n        .accessLogSetting(AccessLogSettingProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .cacheClusterEnabled(false)\n        .cacheClusterSize(\"cacheClusterSize\")\n        .canarySetting(CanarySettingProperty.builder()\n                .deploymentId(\"deploymentId\")\n                .percentTraffic(123)\n                .stageVariableOverrides(Map.of(\n                        \"stageVariableOverridesKey\", \"stageVariableOverrides\"))\n                .useStageCache(false)\n                .build())\n        .clientCertificateId(\"clientCertificateId\")\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .documentationVersion(\"documentationVersion\")\n        .methodSettings(List.of(MethodSettingProperty.builder()\n                .cacheDataEncrypted(false)\n                .cacheTtlInSeconds(123)\n                .cachingEnabled(false)\n                .dataTraceEnabled(false)\n                .httpMethod(\"httpMethod\")\n                .loggingLevel(\"loggingLevel\")\n                .metricsEnabled(false)\n                .resourcePath(\"resourcePath\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build()))\n        .stageName(\"stageName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingEnabled(false)\n        .variables(Map.of(\n                \"variablesKey\", \"variables\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnStageProps := &CfnStageProps{\n\tRestApiId: jsii.String(\"restApiId\"),\n\n\t// the properties below are optional\n\tAccessLogSetting: &AccessLogSettingProperty{\n\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\tFormat: jsii.String(\"format\"),\n\t},\n\tCacheClusterEnabled: jsii.Boolean(false),\n\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\tCanarySetting: &CanarySettingProperty{\n\t\tDeploymentId: jsii.String(\"deploymentId\"),\n\t\tPercentTraffic: jsii.Number(123),\n\t\tStageVariableOverrides: map[string]*string{\n\t\t\t\"stageVariableOverridesKey\": jsii.String(\"stageVariableOverrides\"),\n\t\t},\n\t\tUseStageCache: jsii.Boolean(false),\n\t},\n\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\tDeploymentId: jsii.String(\"deploymentId\"),\n\tDescription: jsii.String(\"description\"),\n\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\tMethodSettings: []interface{}{\n\t\t&MethodSettingProperty{\n\t\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\t\tCacheTtlInSeconds: jsii.Number(123),\n\t\t\tCachingEnabled: jsii.Boolean(false),\n\t\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\t\tHttpMethod: jsii.String(\"httpMethod\"),\n\t\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\t\tMetricsEnabled: jsii.Boolean(false),\n\t\t\tResourcePath: jsii.String(\"resourcePath\"),\n\t\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\t\tThrottlingRateLimit: jsii.Number(123),\n\t\t},\n\t},\n\tStageName: jsii.String(\"stageName\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tTracingEnabled: jsii.Boolean(false),\n\tVariables: map[string]*string{\n\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnStageProps: apigateway.CfnStageProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStageProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStageProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageProps: apigateway.CfnStageProps = {\n  restApiId: 'restApiId',\n\n  // the properties below are optional\n  accessLogSetting: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  cacheClusterEnabled: false,\n  cacheClusterSize: 'cacheClusterSize',\n  canarySetting: {\n    deploymentId: 'deploymentId',\n    percentTraffic: 123,\n    stageVariableOverrides: {\n      stageVariableOverridesKey: 'stageVariableOverrides',\n    },\n    useStageCache: false,\n  },\n  clientCertificateId: 'clientCertificateId',\n  deploymentId: 'deploymentId',\n  description: 'description',\n  documentationVersion: 'documentationVersion',\n  methodSettings: [{\n    cacheDataEncrypted: false,\n    cacheTtlInSeconds: 123,\n    cachingEnabled: false,\n    dataTraceEnabled: false,\n    httpMethod: 'httpMethod',\n    loggingLevel: 'loggingLevel',\n    metricsEnabled: false,\n    resourcePath: 'resourcePath',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  }],\n  stageName: 'stageName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingEnabled: false,\n  variables: {\n    variablesKey: 'variables',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":4,"10":18,"75":38,"91":7,"153":1,"169":1,"192":2,"193":7,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":34,"290":1},"fqnsFingerprint":"a7b02eff8dd944564472668030c5f0135fd46d219f36f2ecdf6bffb0d9456fed"},"53ae99ddd09f1cf5accf4cdf38060fdb31d67cd7602b035e4110d89d0134176a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# route_settings: Any\n# stage_variables: Any\n# tags: Any\n\ncfn_stage_v2 = apigateway.CfnStageV2(self, \"MyCfnStageV2\",\n    api_id=\"apiId\",\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    access_log_settings=apigateway.CfnStageV2.AccessLogSettingsProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    auto_deploy=False,\n    client_certificate_id=\"clientCertificateId\",\n    default_route_settings=apigateway.CfnStageV2.RouteSettingsProperty(\n        data_trace_enabled=False,\n        detailed_metrics_enabled=False,\n        logging_level=\"loggingLevel\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    ),\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    route_settings=route_settings,\n    stage_variables=stage_variables,\n    tags=tags\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar routeSettings;\nvar stageVariables;\nvar tags;\n\nvar cfnStageV2 = new CfnStageV2(this, \"MyCfnStageV2\", new CfnStageV2Props {\n    ApiId = \"apiId\",\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    AccessLogSettings = new AccessLogSettingsProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    AutoDeploy = false,\n    ClientCertificateId = \"clientCertificateId\",\n    DefaultRouteSettings = new RouteSettingsProperty {\n        DataTraceEnabled = false,\n        DetailedMetricsEnabled = false,\n        LoggingLevel = \"loggingLevel\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    },\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    RouteSettings = routeSettings,\n    StageVariables = stageVariables,\n    Tags = tags\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject routeSettings;\nObject stageVariables;\nObject tags;\n\nCfnStageV2 cfnStageV2 = CfnStageV2.Builder.create(this, \"MyCfnStageV2\")\n        .apiId(\"apiId\")\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .accessLogSettings(AccessLogSettingsProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .autoDeploy(false)\n        .clientCertificateId(\"clientCertificateId\")\n        .defaultRouteSettings(RouteSettingsProperty.builder()\n                .dataTraceEnabled(false)\n                .detailedMetricsEnabled(false)\n                .loggingLevel(\"loggingLevel\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build())\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .routeSettings(routeSettings)\n        .stageVariables(stageVariables)\n        .tags(tags)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar routeSettings interface{}\nvar stageVariables interface{}\nvar tags interface{}\n\ncfnStageV2 := apigateway.NewCfnStageV2(this, jsii.String(\"MyCfnStageV2\"), &CfnStageV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tStageName: jsii.String(\"stageName\"),\n\n\t// the properties below are optional\n\tAccessLogSettings: &AccessLogSettingsProperty{\n\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\tFormat: jsii.String(\"format\"),\n\t},\n\tAutoDeploy: jsii.Boolean(false),\n\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\tDefaultRouteSettings: &RouteSettingsProperty{\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDetailedMetricsEnabled: jsii.Boolean(false),\n\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t},\n\tDeploymentId: jsii.String(\"deploymentId\"),\n\tDescription: jsii.String(\"description\"),\n\tRouteSettings: routeSettings,\n\tStageVariables: stageVariables,\n\tTags: tags,\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\nconst cfnStageV2 = new apigateway.CfnStageV2(this, 'MyCfnStageV2', {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStageV2"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStageV2","@aws-cdk/aws-apigateway.CfnStageV2Props","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageV2 = new apigateway.CfnStageV2(this, 'MyCfnStageV2', {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":10,"75":28,"91":3,"104":1,"125":3,"130":3,"193":3,"194":1,"197":1,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":18,"290":1},"fqnsFingerprint":"de8bede37ef450d377af1cc2fb682d9a73d0646a1226a034c8c542b255d6050b"},"ca21c35e4324a2fb2a33592211257aa97df061ae477cc7644dbd92ff00cd3418":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\naccess_log_settings_property = apigateway.CfnStageV2.AccessLogSettingsProperty(\n    destination_arn=\"destinationArn\",\n    format=\"format\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar accessLogSettingsProperty = new AccessLogSettingsProperty {\n    DestinationArn = \"destinationArn\",\n    Format = \"format\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAccessLogSettingsProperty accessLogSettingsProperty = AccessLogSettingsProperty.builder()\n        .destinationArn(\"destinationArn\")\n        .format(\"format\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\naccessLogSettingsProperty := &AccessLogSettingsProperty{\n\tDestinationArn: jsii.String(\"destinationArn\"),\n\tFormat: jsii.String(\"format\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst accessLogSettingsProperty: apigateway.CfnStageV2.AccessLogSettingsProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStageV2.AccessLogSettingsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStageV2.AccessLogSettingsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLogSettingsProperty: apigateway.CfnStageV2.AccessLogSettingsProperty = {\n  destinationArn: 'destinationArn',\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"fd27004566bcaa64b726b725025faa328063655e6fe1ff90258ae596855acb95"},"c93e28fe7361ad1b59e258286cb05baf220730fae49f9d3b28072a10197f7745":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nroute_settings_property = apigateway.CfnStageV2.RouteSettingsProperty(\n    data_trace_enabled=False,\n    detailed_metrics_enabled=False,\n    logging_level=\"loggingLevel\",\n    throttling_burst_limit=123,\n    throttling_rate_limit=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar routeSettingsProperty = new RouteSettingsProperty {\n    DataTraceEnabled = false,\n    DetailedMetricsEnabled = false,\n    LoggingLevel = \"loggingLevel\",\n    ThrottlingBurstLimit = 123,\n    ThrottlingRateLimit = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRouteSettingsProperty routeSettingsProperty = RouteSettingsProperty.builder()\n        .dataTraceEnabled(false)\n        .detailedMetricsEnabled(false)\n        .loggingLevel(\"loggingLevel\")\n        .throttlingBurstLimit(123)\n        .throttlingRateLimit(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nrouteSettingsProperty := &RouteSettingsProperty{\n\tDataTraceEnabled: jsii.Boolean(false),\n\tDetailedMetricsEnabled: jsii.Boolean(false),\n\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\tThrottlingBurstLimit: jsii.Number(123),\n\tThrottlingRateLimit: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst routeSettingsProperty: apigateway.CfnStageV2.RouteSettingsProperty = {\n  dataTraceEnabled: false,\n  detailedMetricsEnabled: false,\n  loggingLevel: 'loggingLevel',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStageV2.RouteSettingsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStageV2.RouteSettingsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst routeSettingsProperty: apigateway.CfnStageV2.RouteSettingsProperty = {\n  dataTraceEnabled: false,\n  detailedMetricsEnabled: false,\n  loggingLevel: 'loggingLevel',\n  throttlingBurstLimit: 123,\n  throttlingRateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":2,"75":10,"91":2,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"f2cf9148ca12dad3c9b0fc98259f4de49d50b086b3320a7d678641d675c61f75"},"f250f9813b76f588f2f5316975b6cc4bf5c286a8c68d051c18ea13c42e34c14a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# route_settings: Any\n# stage_variables: Any\n# tags: Any\n\ncfn_stage_v2_props = apigateway.CfnStageV2Props(\n    api_id=\"apiId\",\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    access_log_settings=apigateway.CfnStageV2.AccessLogSettingsProperty(\n        destination_arn=\"destinationArn\",\n        format=\"format\"\n    ),\n    auto_deploy=False,\n    client_certificate_id=\"clientCertificateId\",\n    default_route_settings=apigateway.CfnStageV2.RouteSettingsProperty(\n        data_trace_enabled=False,\n        detailed_metrics_enabled=False,\n        logging_level=\"loggingLevel\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123\n    ),\n    deployment_id=\"deploymentId\",\n    description=\"description\",\n    route_settings=route_settings,\n    stage_variables=stage_variables,\n    tags=tags\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar routeSettings;\nvar stageVariables;\nvar tags;\n\nvar cfnStageV2Props = new CfnStageV2Props {\n    ApiId = \"apiId\",\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    AccessLogSettings = new AccessLogSettingsProperty {\n        DestinationArn = \"destinationArn\",\n        Format = \"format\"\n    },\n    AutoDeploy = false,\n    ClientCertificateId = \"clientCertificateId\",\n    DefaultRouteSettings = new RouteSettingsProperty {\n        DataTraceEnabled = false,\n        DetailedMetricsEnabled = false,\n        LoggingLevel = \"loggingLevel\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123\n    },\n    DeploymentId = \"deploymentId\",\n    Description = \"description\",\n    RouteSettings = routeSettings,\n    StageVariables = stageVariables,\n    Tags = tags\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject routeSettings;\nObject stageVariables;\nObject tags;\n\nCfnStageV2Props cfnStageV2Props = CfnStageV2Props.builder()\n        .apiId(\"apiId\")\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .accessLogSettings(AccessLogSettingsProperty.builder()\n                .destinationArn(\"destinationArn\")\n                .format(\"format\")\n                .build())\n        .autoDeploy(false)\n        .clientCertificateId(\"clientCertificateId\")\n        .defaultRouteSettings(RouteSettingsProperty.builder()\n                .dataTraceEnabled(false)\n                .detailedMetricsEnabled(false)\n                .loggingLevel(\"loggingLevel\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .build())\n        .deploymentId(\"deploymentId\")\n        .description(\"description\")\n        .routeSettings(routeSettings)\n        .stageVariables(stageVariables)\n        .tags(tags)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar routeSettings interface{}\nvar stageVariables interface{}\nvar tags interface{}\n\ncfnStageV2Props := &CfnStageV2Props{\n\tApiId: jsii.String(\"apiId\"),\n\tStageName: jsii.String(\"stageName\"),\n\n\t// the properties below are optional\n\tAccessLogSettings: &AccessLogSettingsProperty{\n\t\tDestinationArn: jsii.String(\"destinationArn\"),\n\t\tFormat: jsii.String(\"format\"),\n\t},\n\tAutoDeploy: jsii.Boolean(false),\n\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\tDefaultRouteSettings: &RouteSettingsProperty{\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDetailedMetricsEnabled: jsii.Boolean(false),\n\t\tLoggingLevel: jsii.String(\"loggingLevel\"),\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t},\n\tDeploymentId: jsii.String(\"deploymentId\"),\n\tDescription: jsii.String(\"description\"),\n\tRouteSettings: routeSettings,\n\tStageVariables: stageVariables,\n\tTags: tags,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\nconst cfnStageV2Props: apigateway.CfnStageV2Props = {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnStageV2Props"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnStageV2Props"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const routeSettings: any;\ndeclare const stageVariables: any;\ndeclare const tags: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStageV2Props: apigateway.CfnStageV2Props = {\n  apiId: 'apiId',\n  stageName: 'stageName',\n\n  // the properties below are optional\n  accessLogSettings: {\n    destinationArn: 'destinationArn',\n    format: 'format',\n  },\n  autoDeploy: false,\n  clientCertificateId: 'clientCertificateId',\n  defaultRouteSettings: {\n    dataTraceEnabled: false,\n    detailedMetricsEnabled: false,\n    loggingLevel: 'loggingLevel',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n  },\n  deploymentId: 'deploymentId',\n  description: 'description',\n  routeSettings: routeSettings,\n  stageVariables: stageVariables,\n  tags: tags,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":9,"75":28,"91":3,"125":3,"130":3,"153":1,"169":1,"193":3,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":18,"290":1},"fqnsFingerprint":"704280cf47ea573265dc727b02228692dc5763e977c906b5f009ac981be71256"},"763f7df1f662b3a7b0e92eccc918fd0c6bb63e60ec0220234f77cf1d74e1dc94":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan = apigateway.CfnUsagePlan(self, \"MyCfnUsagePlan\",\n    api_stages=[apigateway.CfnUsagePlan.ApiStageProperty(\n        api_id=\"apiId\",\n        stage=\"stage\",\n        throttle={\n            \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n                burst_limit=123,\n                rate_limit=123\n            )\n        }\n    )],\n    description=\"description\",\n    quota=apigateway.CfnUsagePlan.QuotaSettingsProperty(\n        limit=123,\n        offset=123,\n        period=\"period\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttle=apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n        burst_limit=123,\n        rate_limit=123\n    ),\n    usage_plan_name=\"usagePlanName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnUsagePlan = new CfnUsagePlan(this, \"MyCfnUsagePlan\", new CfnUsagePlanProps {\n    ApiStages = new [] { new ApiStageProperty {\n        ApiId = \"apiId\",\n        Stage = \"stage\",\n        Throttle = new Dictionary<string, object> {\n            { \"throttleKey\", new ThrottleSettingsProperty {\n                BurstLimit = 123,\n                RateLimit = 123\n            } }\n        }\n    } },\n    Description = \"description\",\n    Quota = new QuotaSettingsProperty {\n        Limit = 123,\n        Offset = 123,\n        Period = \"period\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throttle = new ThrottleSettingsProperty {\n        BurstLimit = 123,\n        RateLimit = 123\n    },\n    UsagePlanName = \"usagePlanName\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlan cfnUsagePlan = CfnUsagePlan.Builder.create(this, \"MyCfnUsagePlan\")\n        .apiStages(List.of(ApiStageProperty.builder()\n                .apiId(\"apiId\")\n                .stage(\"stage\")\n                .throttle(Map.of(\n                        \"throttleKey\", ThrottleSettingsProperty.builder()\n                                .burstLimit(123)\n                                .rateLimit(123)\n                                .build()))\n                .build()))\n        .description(\"description\")\n        .quota(QuotaSettingsProperty.builder()\n                .limit(123)\n                .offset(123)\n                .period(\"period\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttle(ThrottleSettingsProperty.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .usagePlanName(\"usagePlanName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnUsagePlan := apigateway.NewCfnUsagePlan(this, jsii.String(\"MyCfnUsagePlan\"), &CfnUsagePlanProps{\n\tApiStages: []interface{}{\n\t\t&ApiStageProperty{\n\t\t\tApiId: jsii.String(\"apiId\"),\n\t\t\tStage: jsii.String(\"stage\"),\n\t\t\tThrottle: map[string]interface{}{\n\t\t\t\t\"throttleKey\": &ThrottleSettingsProperty{\n\t\t\t\t\t\"burstLimit\": jsii.Number(123),\n\t\t\t\t\t\"rateLimit\": jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tDescription: jsii.String(\"description\"),\n\tQuota: &QuotaSettingsProperty{\n\t\tLimit: jsii.Number(123),\n\t\tOffset: jsii.Number(123),\n\t\tPeriod: jsii.String(\"period\"),\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tThrottle: &ThrottleSettingsProperty{\n\t\tBurstLimit: jsii.Number(123),\n\t\tRateLimit: jsii.Number(123),\n\t},\n\tUsagePlanName: jsii.String(\"usagePlanName\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlan = new apigateway.CfnUsagePlan(this, 'MyCfnUsagePlan', /* all optional props */ {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlan"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlan","@aws-cdk/aws-apigateway.CfnUsagePlanProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlan = new apigateway.CfnUsagePlan(this, 'MyCfnUsagePlan', /* all optional props */ {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":6,"10":9,"75":23,"104":1,"192":2,"193":7,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":19,"290":1},"fqnsFingerprint":"cfa9fe39cb5c78198144e64502cae9b9a5d01382deb63122aca60d1d3e34cbae"},"56d648d8feeea84fad3883c98c7731c1dd0cf514c647192e43bf1f092e560146":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\napi_stage_property = apigateway.CfnUsagePlan.ApiStageProperty(\n    api_id=\"apiId\",\n    stage=\"stage\",\n    throttle={\n        \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n            burst_limit=123,\n            rate_limit=123\n        )\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar apiStageProperty = new ApiStageProperty {\n    ApiId = \"apiId\",\n    Stage = \"stage\",\n    Throttle = new Dictionary<string, object> {\n        { \"throttleKey\", new ThrottleSettingsProperty {\n            BurstLimit = 123,\n            RateLimit = 123\n        } }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nApiStageProperty apiStageProperty = ApiStageProperty.builder()\n        .apiId(\"apiId\")\n        .stage(\"stage\")\n        .throttle(Map.of(\n                \"throttleKey\", ThrottleSettingsProperty.builder()\n                        .burstLimit(123)\n                        .rateLimit(123)\n                        .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\napiStageProperty := &ApiStageProperty{\n\tApiId: jsii.String(\"apiId\"),\n\tStage: jsii.String(\"stage\"),\n\tThrottle: map[string]interface{}{\n\t\t\"throttleKey\": &ThrottleSettingsProperty{\n\t\t\t\"burstLimit\": jsii.Number(123),\n\t\t\t\"rateLimit\": jsii.Number(123),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst apiStageProperty: apigateway.CfnUsagePlan.ApiStageProperty = {\n  apiId: 'apiId',\n  stage: 'stage',\n  throttle: {\n    throttleKey: {\n      burstLimit: 123,\n      rateLimit: 123,\n    },\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlan.ApiStageProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlan.ApiStageProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiStageProperty: apigateway.CfnUsagePlan.ApiStageProperty = {\n  apiId: 'apiId',\n  stage: 'stage',\n  throttle: {\n    throttleKey: {\n      burstLimit: 123,\n      rateLimit: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":3,"75":11,"153":2,"169":1,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"c4f23d727071160f438f96655713dd29ee9a9579ce0623a6ab3b6acbafeb6064"},"021da9eec76e79626f2fc5e0159e3b90ec1eb447d43941300e64cb39d25211cd":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nquota_settings_property = apigateway.CfnUsagePlan.QuotaSettingsProperty(\n    limit=123,\n    offset=123,\n    period=\"period\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar quotaSettingsProperty = new QuotaSettingsProperty {\n    Limit = 123,\n    Offset = 123,\n    Period = \"period\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nQuotaSettingsProperty quotaSettingsProperty = QuotaSettingsProperty.builder()\n        .limit(123)\n        .offset(123)\n        .period(\"period\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nquotaSettingsProperty := &QuotaSettingsProperty{\n\tLimit: jsii.Number(123),\n\tOffset: jsii.Number(123),\n\tPeriod: jsii.String(\"period\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst quotaSettingsProperty: apigateway.CfnUsagePlan.QuotaSettingsProperty = {\n  limit: 123,\n  offset: 123,\n  period: 'period',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlan.QuotaSettingsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlan.QuotaSettingsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst quotaSettingsProperty: apigateway.CfnUsagePlan.QuotaSettingsProperty = {\n  limit: 123,\n  offset: 123,\n  period: 'period',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":2,"75":8,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"38cbc95986601407854e148cfbf9160a0ed7702f3b48468f3f9417cce6d07b3e"},"1b2aa917d9bc4cf5d42d465f32443aae9bd6da3ee319d27330925bd94b74d82e":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nthrottle_settings_property = apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n    burst_limit=123,\n    rate_limit=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar throttleSettingsProperty = new ThrottleSettingsProperty {\n    BurstLimit = 123,\n    RateLimit = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nThrottleSettingsProperty throttleSettingsProperty = ThrottleSettingsProperty.builder()\n        .burstLimit(123)\n        .rateLimit(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nthrottleSettingsProperty := &ThrottleSettingsProperty{\n\tBurstLimit: jsii.Number(123),\n\tRateLimit: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst throttleSettingsProperty: apigateway.CfnUsagePlan.ThrottleSettingsProperty = {\n  burstLimit: 123,\n  rateLimit: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlan.ThrottleSettingsProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlan.ThrottleSettingsProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throttleSettingsProperty: apigateway.CfnUsagePlan.ThrottleSettingsProperty = {\n  burstLimit: 123,\n  rateLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":1,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"d822040f73ac8b563b9fe4c034eda8a83a153ee7666f5e3e9e91c23ccc7bc6ea"},"dc10e3beab3c954582c2a55d20e5fa58deff5990ccb41664f2416e0794853698":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_key = apigateway.CfnUsagePlanKey(self, \"MyCfnUsagePlanKey\",\n    key_id=\"keyId\",\n    key_type=\"keyType\",\n    usage_plan_id=\"usagePlanId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnUsagePlanKey = new CfnUsagePlanKey(this, \"MyCfnUsagePlanKey\", new CfnUsagePlanKeyProps {\n    KeyId = \"keyId\",\n    KeyType = \"keyType\",\n    UsagePlanId = \"usagePlanId\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanKey cfnUsagePlanKey = CfnUsagePlanKey.Builder.create(this, \"MyCfnUsagePlanKey\")\n        .keyId(\"keyId\")\n        .keyType(\"keyType\")\n        .usagePlanId(\"usagePlanId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnUsagePlanKey := apigateway.NewCfnUsagePlanKey(this, jsii.String(\"MyCfnUsagePlanKey\"), &CfnUsagePlanKeyProps{\n\tKeyId: jsii.String(\"keyId\"),\n\tKeyType: jsii.String(\"keyType\"),\n\tUsagePlanId: jsii.String(\"usagePlanId\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanKey = new apigateway.CfnUsagePlanKey(this, 'MyCfnUsagePlanKey', {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlanKey"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlanKey","@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanKey = new apigateway.CfnUsagePlanKey(this, 'MyCfnUsagePlanKey', {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":7,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"474dc518f621aafa6b1aa19dd678145931a900e34c14f2308fc70be37232df5b"},"42b723f30e4417a22b0aad194538fbcc11d62c0ca088ee0d71e8520c49b27677":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_key_props = apigateway.CfnUsagePlanKeyProps(\n    key_id=\"keyId\",\n    key_type=\"keyType\",\n    usage_plan_id=\"usagePlanId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnUsagePlanKeyProps = new CfnUsagePlanKeyProps {\n    KeyId = \"keyId\",\n    KeyType = \"keyType\",\n    UsagePlanId = \"usagePlanId\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanKeyProps cfnUsagePlanKeyProps = CfnUsagePlanKeyProps.builder()\n        .keyId(\"keyId\")\n        .keyType(\"keyType\")\n        .usagePlanId(\"usagePlanId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnUsagePlanKeyProps := &CfnUsagePlanKeyProps{\n\tKeyId: jsii.String(\"keyId\"),\n\tKeyType: jsii.String(\"keyType\"),\n\tUsagePlanId: jsii.String(\"usagePlanId\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanKeyProps: apigateway.CfnUsagePlanKeyProps = {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlanKeyProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanKeyProps: apigateway.CfnUsagePlanKeyProps = {\n  keyId: 'keyId',\n  keyType: 'keyType',\n  usagePlanId: 'usagePlanId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"fab3815f399dfd4b1054666c0dd0cf2057a94ffb708a5eeb8d53826deee8dcef"},"f8d249c0466f7c291944e74495dc14f82e1d37f485d6a5859de3293e92abb68b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_usage_plan_props = apigateway.CfnUsagePlanProps(\n    api_stages=[apigateway.CfnUsagePlan.ApiStageProperty(\n        api_id=\"apiId\",\n        stage=\"stage\",\n        throttle={\n            \"throttle_key\": apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n                burst_limit=123,\n                rate_limit=123\n            )\n        }\n    )],\n    description=\"description\",\n    quota=apigateway.CfnUsagePlan.QuotaSettingsProperty(\n        limit=123,\n        offset=123,\n        period=\"period\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    throttle=apigateway.CfnUsagePlan.ThrottleSettingsProperty(\n        burst_limit=123,\n        rate_limit=123\n    ),\n    usage_plan_name=\"usagePlanName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnUsagePlanProps = new CfnUsagePlanProps {\n    ApiStages = new [] { new ApiStageProperty {\n        ApiId = \"apiId\",\n        Stage = \"stage\",\n        Throttle = new Dictionary<string, object> {\n            { \"throttleKey\", new ThrottleSettingsProperty {\n                BurstLimit = 123,\n                RateLimit = 123\n            } }\n        }\n    } },\n    Description = \"description\",\n    Quota = new QuotaSettingsProperty {\n        Limit = 123,\n        Offset = 123,\n        Period = \"period\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Throttle = new ThrottleSettingsProperty {\n        BurstLimit = 123,\n        RateLimit = 123\n    },\n    UsagePlanName = \"usagePlanName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnUsagePlanProps cfnUsagePlanProps = CfnUsagePlanProps.builder()\n        .apiStages(List.of(ApiStageProperty.builder()\n                .apiId(\"apiId\")\n                .stage(\"stage\")\n                .throttle(Map.of(\n                        \"throttleKey\", ThrottleSettingsProperty.builder()\n                                .burstLimit(123)\n                                .rateLimit(123)\n                                .build()))\n                .build()))\n        .description(\"description\")\n        .quota(QuotaSettingsProperty.builder()\n                .limit(123)\n                .offset(123)\n                .period(\"period\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .throttle(ThrottleSettingsProperty.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .usagePlanName(\"usagePlanName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnUsagePlanProps := &CfnUsagePlanProps{\n\tApiStages: []interface{}{\n\t\t&ApiStageProperty{\n\t\t\tApiId: jsii.String(\"apiId\"),\n\t\t\tStage: jsii.String(\"stage\"),\n\t\t\tThrottle: map[string]interface{}{\n\t\t\t\t\"throttleKey\": &ThrottleSettingsProperty{\n\t\t\t\t\t\"burstLimit\": jsii.Number(123),\n\t\t\t\t\t\"rateLimit\": jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tDescription: jsii.String(\"description\"),\n\tQuota: &QuotaSettingsProperty{\n\t\tLimit: jsii.Number(123),\n\t\tOffset: jsii.Number(123),\n\t\tPeriod: jsii.String(\"period\"),\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tThrottle: &ThrottleSettingsProperty{\n\t\tBurstLimit: jsii.Number(123),\n\t\tRateLimit: jsii.Number(123),\n\t},\n\tUsagePlanName: jsii.String(\"usagePlanName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnUsagePlanProps: apigateway.CfnUsagePlanProps = {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnUsagePlanProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnUsagePlanProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnUsagePlanProps: apigateway.CfnUsagePlanProps = {\n  apiStages: [{\n    apiId: 'apiId',\n    stage: 'stage',\n    throttle: {\n      throttleKey: {\n        burstLimit: 123,\n        rateLimit: 123,\n      },\n    },\n  }],\n  description: 'description',\n  quota: {\n    limit: 123,\n    offset: 123,\n    period: 'period',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n  usagePlanName: 'usagePlanName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":6,"10":8,"75":23,"153":1,"169":1,"192":2,"193":7,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":19,"290":1},"fqnsFingerprint":"979cfb9287782e6f2cd7e56311dcbe58af2a045089a741abb0b8519b44fabacf"},"2efc3f1ea69a5791acf8168871d48f49d704ec8c22aacdd02dbb28f9dbf8ec54":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_vpc_link = apigateway.CfnVpcLink(self, \"MyCfnVpcLink\",\n    name=\"name\",\n    target_arns=[\"targetArns\"],\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnVpcLink = new CfnVpcLink(this, \"MyCfnVpcLink\", new CfnVpcLinkProps {\n    Name = \"name\",\n    TargetArns = new [] { \"targetArns\" },\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnVpcLink cfnVpcLink = CfnVpcLink.Builder.create(this, \"MyCfnVpcLink\")\n        .name(\"name\")\n        .targetArns(List.of(\"targetArns\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnVpcLink := apigateway.NewCfnVpcLink(this, jsii.String(\"MyCfnVpcLink\"), &CfnVpcLinkProps{\n\tName: jsii.String(\"name\"),\n\tTargetArns: []*string{\n\t\tjsii.String(\"targetArns\"),\n\t},\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnVpcLink = new apigateway.CfnVpcLink(this, 'MyCfnVpcLink', {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnVpcLink"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnVpcLink","@aws-cdk/aws-apigateway.CfnVpcLinkProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcLink = new apigateway.CfnVpcLink(this, 'MyCfnVpcLink', {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":7,"75":10,"104":1,"192":2,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"d2e2a2d2870d2e767d79d4316db19979ec2aabec79fc4db4590a1ddb4518310c"},"c0c75ba5917e126d26bfc402967973c7ddc6a6f0176c0a322d153aa15b091a6d":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ncfn_vpc_link_props = apigateway.CfnVpcLinkProps(\n    name=\"name\",\n    target_arns=[\"targetArns\"],\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar cfnVpcLinkProps = new CfnVpcLinkProps {\n    Name = \"name\",\n    TargetArns = new [] { \"targetArns\" },\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nCfnVpcLinkProps cfnVpcLinkProps = CfnVpcLinkProps.builder()\n        .name(\"name\")\n        .targetArns(List.of(\"targetArns\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ncfnVpcLinkProps := &CfnVpcLinkProps{\n\tName: jsii.String(\"name\"),\n\tTargetArns: []*string{\n\t\tjsii.String(\"targetArns\"),\n\t},\n\n\t// the properties below are optional\n\tDescription: jsii.String(\"description\"),\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst cfnVpcLinkProps: apigateway.CfnVpcLinkProps = {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CfnVpcLinkProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CfnVpcLinkProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnVpcLinkProps: apigateway.CfnVpcLinkProps = {\n  name: 'name',\n  targetArns: ['targetArns'],\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":10,"153":1,"169":1,"192":2,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"3ee6e277b8e9829f5282c318ff26ac6832b4433db936adf4b43869fdbc03ea5e"},"d73fc0e20e76314d7b0fe38b45bdea2e2394253bb291b2af35c775ff1bd39f4e":{"translations":{"python":{"source":"# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)","version":"2"},"csharp":{"source":"Resource books;\nvar userPool = new UserPool(this, \"UserPool\");\n\nvar auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});","version":"1"},"java":{"source":"Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());","version":"1"},"go":{"source":"var books resource\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauth := apigateway.NewCognitoUserPoolsAuthorizer(this, jsii.String(\"booksAuthorizer\"), &CognitoUserPoolsAuthorizerProps{\n\tCognitoUserPools: []iUserPool{\n\t\tuserPool,\n\t},\n})\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n\tAuthorizationType: apigateway.AuthorizationType_COGNITO,\n})","version":"1"},"$":{"source":"const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#COGNITO","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-cognito.UserPool","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":2,"130":1,"153":1,"169":1,"192":1,"193":2,"194":6,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"59b0c018ec6ada498004d63b9259746ce79c8bc2344cfd9c79e45c5e86389fbc"},"b1d85685fc34a8f01b4c27420dda33f728294cb4c9ee2805580e07d7491667c4":{"translations":{"python":{"source":"# books: apigateway.Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)","version":"2"},"csharp":{"source":"Resource books;\nvar userPool = new UserPool(this, \"UserPool\");\n\nvar auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});","version":"1"},"java":{"source":"Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());","version":"1"},"go":{"source":"var books resource\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauth := apigateway.NewCognitoUserPoolsAuthorizer(this, jsii.String(\"booksAuthorizer\"), &CognitoUserPoolsAuthorizerProps{\n\tCognitoUserPools: []iUserPool{\n\t\tuserPool,\n\t},\n})\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n\tAuthorizationType: apigateway.AuthorizationType_COGNITO,\n})","version":"1"},"$":{"source":"const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#COGNITO","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer","@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-cognito.UserPool","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":2,"130":1,"153":1,"169":1,"192":1,"193":2,"194":6,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"59b0c018ec6ada498004d63b9259746ce79c8bc2344cfd9c79e45c5e86389fbc"},"119e57157e0efa1b9623e1c0db0cce9381ea5317e1433c0bf7ca4be4a5d5718a":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ConnectionType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"},"fa668ade48035ced59548cbba2d64008b4b452aad0e00a741a94246445fb7a84":{"translations":{"python":{"source":"# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)","version":"2"},"csharp":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nvar getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});","version":"1"},"java":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();","version":"1"},"go":{"source":"var getBookHandler function\nvar getBookIntegration lambdaIntegration\n\n\ngetBookIntegration := apigateway.NewLambdaIntegration(getBookHandler, &LambdaIntegrationOptions{\n\tContentHandling: apigateway.ContentHandling_CONVERT_TO_TEXT,\n\t // convert to base64\n\tCredentialsPassthrough: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ContentHandling"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.LambdaIntegrationOptions","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":15,"106":1,"130":2,"153":2,"169":2,"193":1,"194":3,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6b94f8e090b115464f10d64b8a3f0677009e29a06ef46c8273800c5757b29775"},"cc4847886860c06c0bb24ae45782f5a353ba97ad7ead73a9d4d8bc2d9bbeba43":{"translations":{"python":{"source":"apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)","version":"2"},"csharp":{"source":"new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});","version":"1"},"java":{"source":"RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();","version":"1"},"go":{"source":"apigateway.NewRestApi(this, jsii.String(\"api\"), &RestApiProps{\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: apigateway.Cors_ALL_ORIGINS(),\n\t\tAllowMethods: apigateway.Cors_ALL_METHODS(),\n\t},\n})","version":"1"},"$":{"source":"new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Cors"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Cors","@aws-cdk/aws-apigateway.Cors#ALL_METHODS","@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"104":1,"193":2,"194":5,"197":1,"226":1,"281":3},"fqnsFingerprint":"b1b3a4f206b188ac696f20d353566026585cd9a1170b50f2ebdffbcbc98e87ea"},"b8b473831ecffa3816682650f03479780d116f750f3b256d9365e205873b1521":{"translations":{"python":{"source":"# my_resource: apigateway.Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)","version":"2"},"csharp":{"source":"Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});","version":"1"},"java":{"source":"Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());","version":"1"},"go":{"source":"var myResource resource\n\n\nmyResource.AddCorsPreflight(&CorsOptions{\n\tAllowOrigins: []*string{\n\t\tjsii.String(\"https://amazon.com\"),\n\t},\n\tAllowMethods: []*string{\n\t\tjsii.String(\"GET\"),\n\t\tjsii.String(\"PUT\"),\n\t},\n})","version":"1"},"$":{"source":"declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.CorsOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":7,"130":1,"153":1,"169":1,"192":2,"193":1,"194":1,"196":1,"225":1,"226":1,"242":1,"243":1,"281":2,"290":1},"fqnsFingerprint":"03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"},"982f4673255df7895703893d5a00f8805683e22af3fc280c0dcbd9db5b3d03a2":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Deployment"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"b601ac6caa83f15d45a7e2c0de2b12a34c0b7671264df5700705d1c47a80c806":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.DeploymentProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"61feee2fe6f303fe07dfe5c0a697c8215ff87fee861648db06340b04d7597163":{"translations":{"python":{"source":"# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)","version":"2"},"csharp":{"source":"var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});","version":"1"},"java":{"source":"Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();","version":"1"},"go":{"source":"var acm interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"domain-name\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acm.certificate_FromCertificateArn(this, jsii.String(\"cert\"), jsii.String(\"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\")),\n\tMtls: &MTLSConfig{\n\t\tBucket: s3.NewBucket(this, jsii.String(\"bucket\")),\n\t\tKey: jsii.String(\"truststore.pem\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n})","version":"1"},"$":{"source":"declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.DomainName"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.IBucket","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":14,"104":3,"125":1,"130":1,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":6,"290":1},"fqnsFingerprint":"0df508b27559a3376320ad826a9a63bf20edbb87de670e825859789476dd6adf"},"59f95fae42f5080ff7d1084de6913990b5cd731f608a35ca76ad200fd8fe2721":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\ndomain_name_attributes = apigateway.DomainNameAttributes(\n    domain_name=\"domainName\",\n    domain_name_alias_hosted_zone_id=\"domainNameAliasHostedZoneId\",\n    domain_name_alias_target=\"domainNameAliasTarget\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar domainNameAttributes = new DomainNameAttributes {\n    DomainName = \"domainName\",\n    DomainNameAliasHostedZoneId = \"domainNameAliasHostedZoneId\",\n    DomainNameAliasTarget = \"domainNameAliasTarget\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nDomainNameAttributes domainNameAttributes = DomainNameAttributes.builder()\n        .domainName(\"domainName\")\n        .domainNameAliasHostedZoneId(\"domainNameAliasHostedZoneId\")\n        .domainNameAliasTarget(\"domainNameAliasTarget\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\ndomainNameAttributes := &DomainNameAttributes{\n\tDomainName: jsii.String(\"domainName\"),\n\tDomainNameAliasHostedZoneId: jsii.String(\"domainNameAliasHostedZoneId\"),\n\tDomainNameAliasTarget: jsii.String(\"domainNameAliasTarget\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst domainNameAttributes: apigateway.DomainNameAttributes = {\n  domainName: 'domainName',\n  domainNameAliasHostedZoneId: 'domainNameAliasHostedZoneId',\n  domainNameAliasTarget: 'domainNameAliasTarget',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.DomainNameAttributes"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainNameAttributes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainNameAttributes: apigateway.DomainNameAttributes = {\n  domainName: 'domainName',\n  domainNameAliasHostedZoneId: 'domainNameAliasHostedZoneId',\n  domainNameAliasTarget: 'domainNameAliasTarget',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"cd77bcbb0b10e87ed66a4a22c83362c4b68425090bc1240709f952926d216842"},"e748f71a2fcb59985735f2f0576c35644ded962a84f579661841d59d02e437ba":{"translations":{"python":{"source":"# acm_certificate_for_example_com: Any\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)","version":"2"},"csharp":{"source":"var acmCertificateForExampleCom;\n\n\nvar api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});","version":"1"},"java":{"source":"Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();","version":"1"},"go":{"source":"var acmCertificateForExampleCom interface{}\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"MyDomain\"), &RestApiProps{\n\tDomainName: &DomainNameOptions{\n\t\tDomainName: jsii.String(\"example.com\"),\n\t\tCertificate: acmCertificateForExampleCom,\n\t},\n})","version":"1"},"$":{"source":"declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.DomainNameOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainNameOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-certificatemanager.ICertificate","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":8,"104":1,"125":1,"130":1,"193":2,"194":1,"197":1,"225":2,"242":2,"243":2,"281":3,"290":1},"fqnsFingerprint":"00670d691fa7aeed31340680efd81ae172d4fa4ed9602ca6f6bebac912d73eb3"},"8959deca8b2a7bff7509fb1169b6d5ca0e7f8f0bc24499935be314a6953c6ba9":{"translations":{"python":{"source":"# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)","version":"2"},"csharp":{"source":"var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});","version":"1"},"java":{"source":"Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();","version":"1"},"go":{"source":"var acm interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"domain-name\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acm.certificate_FromCertificateArn(this, jsii.String(\"cert\"), jsii.String(\"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\")),\n\tMtls: &MTLSConfig{\n\t\tBucket: s3.NewBucket(this, jsii.String(\"bucket\")),\n\t\tKey: jsii.String(\"truststore.pem\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n})","version":"1"},"$":{"source":"declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.DomainNameProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.IBucket","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":14,"104":3,"125":1,"130":1,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":6,"290":1},"fqnsFingerprint":"0df508b27559a3376320ad826a9a63bf20edbb87de670e825859789476dd6adf"},"6d25fe1b8fab480d20ebb19bb44d095e42a56a3c53856ebd5c0b245c5e005b71":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nempty_model = apigateway.EmptyModel()","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar emptyModel = new EmptyModel();","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nEmptyModel emptyModel = new EmptyModel();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nemptyModel := apigateway.NewEmptyModel()","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst emptyModel = new apigateway.EmptyModel();","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.EmptyModel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.EmptyModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst emptyModel = new apigateway.EmptyModel();\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":4,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"c90bb3c62fdfefd69b10087b2d743e23e58f932694c68a54be4f0e600184b41a"},"df373a627eea39c84a6a7a81ef92541b314ebe854f1279ec44dd33320087e1e2":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});","version":"1"},"java":{"source":"RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"api\"), &RestApiProps{\n\tEndpointConfiguration: &EndpointConfiguration{\n\t\tTypes: []endpointType{\n\t\t\tapigateway.*endpointType_EDGE,\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.EndpointConfiguration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.EndpointConfiguration","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":8,"104":1,"192":1,"193":2,"194":3,"197":1,"225":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"adb39de5c25d0049df9e8b9abdda807adef1b4c3b0abab97fd8159c91900b767"},"d53cbc8a78ff6cea28b66c588941fffadd429f4306f8889fc64461eef109a29f":{"translations":{"python":{"source":"# api_definition: apigateway.ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)","version":"2"},"csharp":{"source":"ApiDefinition apiDefinition;\n\n\nvar api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});","version":"1"},"java":{"source":"ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();","version":"1"},"go":{"source":"var apiDefinition apiDefinition\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"ExampleRestApi\"), &SpecRestApiProps{\n\tApiDefinition: ApiDefinition,\n\tEndpointTypes: []endpointType{\n\t\tapigateway.*endpointType_PRIVATE,\n\t},\n})","version":"1"},"$":{"source":"declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.EndpointType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#PRIVATE","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"104":1,"130":1,"153":1,"169":1,"192":1,"193":1,"194":3,"197":1,"225":2,"242":2,"243":2,"281":1,"282":1,"290":1},"fqnsFingerprint":"1c31c9de12960ce1fed311214615dc84fb9d86918e5217b5e5261b29996eb5f0"},"f12dde4ec4bcb9749bfd7edc8a4026eaf7fc6f87fc3ee95ae5820a76bc7060ca":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nerror_model = apigateway.ErrorModel()","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar errorModel = new ErrorModel();","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nErrorModel errorModel = new ErrorModel();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nerrorModel := apigateway.NewErrorModel()","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst errorModel = new apigateway.ErrorModel();","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ErrorModel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ErrorModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst errorModel = new apigateway.ErrorModel();\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":4,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"f83c711721553433e19b9fdff6af419b67ad39b608634d94ba7d658f9a5d79ee"},"6867492cfac69e230dfff141acbbe797f72b49c9954aceb717c58ae1fb4470ed":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_type: apigateway.ResponseType\n# rest_api: apigateway.RestApi\n\ngateway_response = apigateway.GatewayResponse(self, \"MyGatewayResponse\",\n    rest_api=rest_api,\n    type=response_type,\n\n    # the properties below are optional\n    response_headers={\n        \"response_headers_key\": \"responseHeaders\"\n    },\n    status_code=\"statusCode\",\n    templates={\n        \"templates_key\": \"templates\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nResponseType responseType;\nRestApi restApi;\n\nvar gatewayResponse = new GatewayResponse(this, \"MyGatewayResponse\", new GatewayResponseProps {\n    RestApi = restApi,\n    Type = responseType,\n\n    // the properties below are optional\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"responseHeadersKey\", \"responseHeaders\" }\n    },\n    StatusCode = \"statusCode\",\n    Templates = new Dictionary<string, string> {\n        { \"templatesKey\", \"templates\" }\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponse gatewayResponse = GatewayResponse.Builder.create(this, \"MyGatewayResponse\")\n        .restApi(restApi)\n        .type(responseType)\n\n        // the properties below are optional\n        .responseHeaders(Map.of(\n                \"responseHeadersKey\", \"responseHeaders\"))\n        .statusCode(\"statusCode\")\n        .templates(Map.of(\n                \"templatesKey\", \"templates\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseType responseType\nvar restApi restApi\n\ngatewayResponse := apigateway.NewGatewayResponse(this, jsii.String(\"MyGatewayResponse\"), &GatewayResponseProps{\n\tRestApi: restApi,\n\tType: responseType,\n\n\t// the properties below are optional\n\tResponseHeaders: map[string]*string{\n\t\t\"responseHeadersKey\": jsii.String(\"responseHeaders\"),\n\t},\n\tStatusCode: jsii.String(\"statusCode\"),\n\tTemplates: map[string]*string{\n\t\t\"templatesKey\": jsii.String(\"templates\"),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\nconst gatewayResponse = new apigateway.GatewayResponse(this, 'MyGatewayResponse', {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.GatewayResponse"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.GatewayResponse","@aws-cdk/aws-apigateway.GatewayResponseProps","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.ResponseType","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayResponse = new apigateway.GatewayResponse(this, 'MyGatewayResponse', {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":19,"104":1,"130":2,"153":2,"169":2,"193":3,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"0483c23cc1ee3de2ae8692f7550a3202e23a03a08a2568ecb7b632c84879ca11"},"7b172229469aface363a6f4b8b3794c351d8a5e3ec2db039423a2afb8f852111":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books-api\"))\napi.AddGatewayResponse(jsii.String(\"test-response\"), &GatewayResponseOptions{\n\tType: apigateway.ResponseType_ACCESS_DENIED(),\n\tStatusCode: jsii.String(\"500\"),\n\tResponseHeaders: map[string]*string{\n\t\t\"Access-Control-Allow-Origin\": jsii.String(\"test.com\"),\n\t\t\"test-key\": jsii.String(\"test-value\"),\n\t},\n\tTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"),\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.GatewayResponseOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.GatewayResponseOptions","@aws-cdk/aws-apigateway.ResponseType","@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":9,"75":12,"104":1,"193":3,"194":4,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":7},"fqnsFingerprint":"5d6f7cf981188a35fc89c19ccbd12bbd47497f628a63ce08102ba48362fcee72"},"c285a6a5457990717d09f1049c53a13852ff896b79beb0b0e5dd92bbdedc5ef6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# response_type: apigateway.ResponseType\n# rest_api: apigateway.RestApi\n\ngateway_response_props = apigateway.GatewayResponseProps(\n    rest_api=rest_api,\n    type=response_type,\n\n    # the properties below are optional\n    response_headers={\n        \"response_headers_key\": \"responseHeaders\"\n    },\n    status_code=\"statusCode\",\n    templates={\n        \"templates_key\": \"templates\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nResponseType responseType;\nRestApi restApi;\n\nvar gatewayResponseProps = new GatewayResponseProps {\n    RestApi = restApi,\n    Type = responseType,\n\n    // the properties below are optional\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"responseHeadersKey\", \"responseHeaders\" }\n    },\n    StatusCode = \"statusCode\",\n    Templates = new Dictionary<string, string> {\n        { \"templatesKey\", \"templates\" }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nResponseType responseType;\nRestApi restApi;\n\nGatewayResponseProps gatewayResponseProps = GatewayResponseProps.builder()\n        .restApi(restApi)\n        .type(responseType)\n\n        // the properties below are optional\n        .responseHeaders(Map.of(\n                \"responseHeadersKey\", \"responseHeaders\"))\n        .statusCode(\"statusCode\")\n        .templates(Map.of(\n                \"templatesKey\", \"templates\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar responseType responseType\nvar restApi restApi\n\ngatewayResponseProps := &GatewayResponseProps{\n\tRestApi: restApi,\n\tType: responseType,\n\n\t// the properties below are optional\n\tResponseHeaders: map[string]*string{\n\t\t\"responseHeadersKey\": jsii.String(\"responseHeaders\"),\n\t},\n\tStatusCode: jsii.String(\"statusCode\"),\n\tTemplates: map[string]*string{\n\t\t\"templatesKey\": jsii.String(\"templates\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\nconst gatewayResponseProps: apigateway.GatewayResponseProps = {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.GatewayResponseProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.GatewayResponseProps","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.ResponseType"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const responseType: apigateway.ResponseType;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gatewayResponseProps: apigateway.GatewayResponseProps = {\n  restApi: restApi,\n  type: responseType,\n\n  // the properties below are optional\n  responseHeaders: {\n    responseHeadersKey: 'responseHeaders',\n  },\n  statusCode: 'statusCode',\n  templates: {\n    templatesKey: 'templates',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":19,"130":2,"153":3,"169":3,"193":3,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"4ead77b528a2805bae7a6ed599bdb730909d64e12e8de69a15c8fcbfea11418a"},"91fa7128ae8cb030ec582672a404d0feef42cc1f6c9138ed37d3a8ff0af404e9":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewRequestAuthorizer(this, jsii.String(\"booksAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authFn,\n\tIdentitySources: []*string{\n\t\tapigateway.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t},\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.HttpIntegration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IdentitySource","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":2,"153":2,"169":2,"192":1,"193":2,"194":5,"196":2,"197":2,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"97e9cce7a61bbe3cb25665bfc8f9b30b004442bc6eb1da2efa7e742d738b774c"},"f6c953c70c85e05b3e7a65b552f3350e5d4b529b0de296a7df20fc40b18cfc4c":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nhttp_integration_props = apigateway.HttpIntegrationProps(\n    http_method=\"httpMethod\",\n    options=apigateway.IntegrationOptions(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_type=apigateway.ConnectionType.INTERNET,\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        credentials_passthrough=False,\n        credentials_role=role,\n        integration_responses=[apigateway.IntegrationResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    ),\n    proxy=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nvar httpIntegrationProps = new HttpIntegrationProps {\n    HttpMethod = \"httpMethod\",\n    Options = new IntegrationOptions {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionType = ConnectionType.INTERNET,\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        CredentialsPassthrough = false,\n        CredentialsRole = role,\n        IntegrationResponses = new [] { new IntegrationResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        Timeout = Duration.Minutes(30),\n        VpcLink = vpcLink\n    },\n    Proxy = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nHttpIntegrationProps httpIntegrationProps = HttpIntegrationProps.builder()\n        .httpMethod(\"httpMethod\")\n        .options(IntegrationOptions.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionType(ConnectionType.INTERNET)\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .credentialsPassthrough(false)\n                .credentialsRole(role)\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeout(Duration.minutes(30))\n                .vpcLink(vpcLink)\n                .build())\n        .proxy(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar role role\nvar vpcLink vpcLink\n\nhttpIntegrationProps := &HttpIntegrationProps{\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tOptions: &IntegrationOptions{\n\t\tCacheKeyParameters: []*string{\n\t\t\tjsii.String(\"cacheKeyParameters\"),\n\t\t},\n\t\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\t\tConnectionType: apigateway.ConnectionType_INTERNET,\n\t\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\t\tCredentialsPassthrough: jsii.Boolean(false),\n\t\tCredentialsRole: role,\n\t\tIntegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\t\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t\t},\n\t\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t\t},\n\t\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: apigateway.PassthroughBehavior_WHEN_NO_MATCH,\n\t\tRequestParameters: map[string]*string{\n\t\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t\t},\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t\t},\n\t\tTimeout: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tVpcLink: vpcLink,\n\t},\n\tProxy: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst httpIntegrationProps: apigateway.HttpIntegrationProps = {\n  httpMethod: 'httpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  proxy: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.HttpIntegrationProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#INTERNET","@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY","@aws-cdk/aws-apigateway.HttpIntegrationProps","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH","@aws-cdk/aws-iam.IRole","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpIntegrationProps: apigateway.HttpIntegrationProps = {\n  httpMethod: 'httpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  proxy: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":12,"75":53,"91":2,"130":2,"153":3,"169":3,"192":2,"193":7,"194":10,"196":1,"225":3,"242":3,"243":3,"254":3,"255":3,"256":3,"281":24,"290":1},"fqnsFingerprint":"a3eec58a187ca74814bf9867a586fe35709f190ed2ca6d510e25ccc3b640de36"},"5f83b0be83ec75b43eb18466df101a4ae15ce0bd65408a825df9db372951494a":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewRequestAuthorizer(this, jsii.String(\"booksAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authFn,\n\tIdentitySources: []*string{\n\t\tapigateway.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t},\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IdentitySource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IdentitySource","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":2,"153":2,"169":2,"192":1,"193":2,"194":5,"196":2,"197":2,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"97e9cce7a61bbe3cb25665bfc8f9b30b004442bc6eb1da2efa7e742d738b774c"},"29489b426cbfc285cb909324efef20bae21a14baaffaf71a1da89019c4e845f6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# definition: Any\n\ninline_api_definition = apigateway.InlineApiDefinition(definition)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar definition;\n\nvar inlineApiDefinition = new InlineApiDefinition(definition);","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject definition;\n\nInlineApiDefinition inlineApiDefinition = new InlineApiDefinition(definition);","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar definition interface{}\n\ninlineApiDefinition := apigateway.NewInlineApiDefinition(definition)","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const definition: any;\nconst inlineApiDefinition = new apigateway.InlineApiDefinition(definition);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.InlineApiDefinition"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.InlineApiDefinition"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const definition: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inlineApiDefinition = new apigateway.InlineApiDefinition(definition);\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"125":1,"130":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"3af2274aca445ad0ef1fe43fa99bf90fd5ef14880c02bfd28dc3b025a83a4290"},"de1258e93fd8259c85b48c1630963bf0430c7dfc2967a71ef4d71482a9255df2":{"translations":{"python":{"source":"# books: apigateway.Resource\n# iam_user: iam.User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))","version":"2"},"csharp":{"source":"Resource books;\nUser iamUser;\n\n\nvar getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));","version":"1"},"java":{"source":"Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());","version":"1"},"go":{"source":"var books resource\nvar iamUser user\n\n\ngetBooks := books.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizationType: apigateway.AuthorizationType_IAM,\n})\n\niamUser.AttachInlinePolicy(iam.NewPolicy(this, jsii.String(\"AllowBooks\"), &PolicyProps{\n\tStatements: []policyStatement{\n\t\tiam.NewPolicyStatement(&PolicyStatementProps{\n\t\t\tActions: []*string{\n\t\t\t\tjsii.String(\"execute-api:Invoke\"),\n\t\t\t},\n\t\t\tEffect: iam.Effect_ALLOW,\n\t\t\tResources: []*string{\n\t\t\t\tgetBooks.methodArn,\n\t\t\t},\n\t\t}),\n\t},\n}))","version":"1"},"$":{"source":"declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Integration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#IAM","@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-iam.Effect","@aws-cdk/aws-iam.Effect#ALLOW","@aws-cdk/aws-iam.Policy","@aws-cdk/aws-iam.PolicyProps","@aws-cdk/aws-iam.PolicyStatement","@aws-cdk/aws-iam.PolicyStatementProps","@aws-cdk/aws-iam.User#attachInlinePolicy","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":30,"104":1,"130":2,"153":2,"169":2,"192":3,"193":3,"194":10,"196":2,"197":3,"225":3,"226":1,"242":3,"243":3,"281":5,"290":1},"fqnsFingerprint":"dd381b2eef4d08015a809df67a76fe1b72deabfd19903a200b61adcb96ac1bc2"},"ad0528929121d67b4762809d74b36e277c6860deddcb15d3487a6507c06f146b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nintegration_config = apigateway.IntegrationConfig(\n    type=apigateway.IntegrationType.AWS,\n\n    # the properties below are optional\n    deployment_token=\"deploymentToken\",\n    integration_http_method=\"integrationHttpMethod\",\n    options=apigateway.IntegrationOptions(\n        cache_key_parameters=[\"cacheKeyParameters\"],\n        cache_namespace=\"cacheNamespace\",\n        connection_type=apigateway.ConnectionType.INTERNET,\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        credentials_passthrough=False,\n        credentials_role=role,\n        integration_responses=[apigateway.IntegrationResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n            response_parameters={\n                \"response_parameters_key\": \"responseParameters\"\n            },\n            response_templates={\n                \"response_templates_key\": \"responseTemplates\"\n            },\n            selection_pattern=\"selectionPattern\"\n        )],\n        passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n        request_parameters={\n            \"request_parameters_key\": \"requestParameters\"\n        },\n        request_templates={\n            \"request_templates_key\": \"requestTemplates\"\n        },\n        timeout=cdk.Duration.minutes(30),\n        vpc_link=vpc_link\n    ),\n    uri=\"uri\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nvar integrationConfig = new IntegrationConfig {\n    Type = IntegrationType.AWS,\n\n    // the properties below are optional\n    DeploymentToken = \"deploymentToken\",\n    IntegrationHttpMethod = \"integrationHttpMethod\",\n    Options = new IntegrationOptions {\n        CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n        CacheNamespace = \"cacheNamespace\",\n        ConnectionType = ConnectionType.INTERNET,\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        CredentialsPassthrough = false,\n        CredentialsRole = role,\n        IntegrationResponses = new [] { new IntegrationResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n            ResponseParameters = new Dictionary<string, string> {\n                { \"responseParametersKey\", \"responseParameters\" }\n            },\n            ResponseTemplates = new Dictionary<string, string> {\n                { \"responseTemplatesKey\", \"responseTemplates\" }\n            },\n            SelectionPattern = \"selectionPattern\"\n        } },\n        PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n        RequestParameters = new Dictionary<string, string> {\n            { \"requestParametersKey\", \"requestParameters\" }\n        },\n        RequestTemplates = new Dictionary<string, string> {\n            { \"requestTemplatesKey\", \"requestTemplates\" }\n        },\n        Timeout = Duration.Minutes(30),\n        VpcLink = vpcLink\n    },\n    Uri = \"uri\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nIntegrationConfig integrationConfig = IntegrationConfig.builder()\n        .type(IntegrationType.AWS)\n\n        // the properties below are optional\n        .deploymentToken(\"deploymentToken\")\n        .integrationHttpMethod(\"integrationHttpMethod\")\n        .options(IntegrationOptions.builder()\n                .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n                .cacheNamespace(\"cacheNamespace\")\n                .connectionType(ConnectionType.INTERNET)\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .credentialsPassthrough(false)\n                .credentialsRole(role)\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", \"responseParameters\"))\n                        .responseTemplates(Map.of(\n                                \"responseTemplatesKey\", \"responseTemplates\"))\n                        .selectionPattern(\"selectionPattern\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", \"requestParameters\"))\n                .requestTemplates(Map.of(\n                        \"requestTemplatesKey\", \"requestTemplates\"))\n                .timeout(Duration.minutes(30))\n                .vpcLink(vpcLink)\n                .build())\n        .uri(\"uri\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar role role\nvar vpcLink vpcLink\n\nintegrationConfig := &IntegrationConfig{\n\tType: apigateway.IntegrationType_AWS,\n\n\t// the properties below are optional\n\tDeploymentToken: jsii.String(\"deploymentToken\"),\n\tIntegrationHttpMethod: jsii.String(\"integrationHttpMethod\"),\n\tOptions: &IntegrationOptions{\n\t\tCacheKeyParameters: []*string{\n\t\t\tjsii.String(\"cacheKeyParameters\"),\n\t\t},\n\t\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\t\tConnectionType: apigateway.ConnectionType_INTERNET,\n\t\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\t\tCredentialsPassthrough: jsii.Boolean(false),\n\t\tCredentialsRole: role,\n\t\tIntegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\t\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t\t},\n\t\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t\t},\n\t\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: apigateway.PassthroughBehavior_WHEN_NO_MATCH,\n\t\tRequestParameters: map[string]*string{\n\t\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t\t},\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t\t},\n\t\tTimeout: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tVpcLink: vpcLink,\n\t},\n\tUri: jsii.String(\"uri\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst integrationConfig: apigateway.IntegrationConfig = {\n  type: apigateway.IntegrationType.AWS,\n\n  // the properties below are optional\n  deploymentToken: 'deploymentToken',\n  integrationHttpMethod: 'integrationHttpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  uri: 'uri',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IntegrationConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#INTERNET","@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.IntegrationConfig","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#AWS","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH","@aws-cdk/aws-iam.IRole","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationConfig: apigateway.IntegrationConfig = {\n  type: apigateway.IntegrationType.AWS,\n\n  // the properties below are optional\n  deploymentToken: 'deploymentToken',\n  integrationHttpMethod: 'integrationHttpMethod',\n  options: {\n    cacheKeyParameters: ['cacheKeyParameters'],\n    cacheNamespace: 'cacheNamespace',\n    connectionType: apigateway.ConnectionType.INTERNET,\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentialsPassthrough: false,\n    credentialsRole: role,\n    integrationResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n      responseParameters: {\n        responseParametersKey: 'responseParameters',\n      },\n      responseTemplates: {\n        responseTemplatesKey: 'responseTemplates',\n      },\n      selectionPattern: 'selectionPattern',\n    }],\n    passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    requestParameters: {\n      requestParametersKey: 'requestParameters',\n    },\n    requestTemplates: {\n      requestTemplatesKey: 'requestTemplates',\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpcLink: vpcLink,\n  },\n  uri: 'uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":14,"75":58,"91":1,"130":2,"153":3,"169":3,"192":2,"193":7,"194":12,"196":1,"225":3,"242":3,"243":3,"254":3,"255":3,"256":3,"281":26,"290":1},"fqnsFingerprint":"6d5951696eff5008bf1deb6e0ffc98052fb997d74e73b388039293c6b7dba1bc"},"0c72c35ee2e0e2794c7934cf82a295ff6713494ba8860ae1086ca42cd005be07":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nvar app = new App();\nvar stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nvar authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nvar restapi = new RestApi(stack, \"MyRestApi\");\n\nvar authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/lib\"\nimport \"github.com/aws-samples/dummy/lib/authorizers\"\nimport \"github.com/aws-samples/dummy/lib/authorizers/identitysource\"\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp := awscdkcore.NewApp()\nstack := awscdkcore.NewStack(app, jsii.String(\"RequestAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"index.handler\"),\n\tCode: lambda.AssetCode_FromAsset(path.join(__dirname, jsii.String(\"integ.request-authorizer.handler\"))),\n})\n\nrestapi := lib.NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := libauthorizers.NewRequestAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authorizerFn,\n\tIdentitySources: []*string{\n\t\tlibauthorizersidentitysource.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t\t*libauthorizersidentitysource.IdentitySource_QueryString(jsii.String(\"allow\")),\n\t},\n})\n\nrestapi.Root.AddMethod(jsii.String(\"ANY\"), lib.NewMockIntegration(&IntegrationOptions{\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\tRequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &MethodOptions{\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tAuthorizer: Authorizer,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IntegrationOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.IdentitySource#queryString","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.AssetCode","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n","syntaxKindCounter":{"10":19,"75":56,"192":3,"193":7,"194":11,"196":5,"197":6,"225":5,"226":1,"242":5,"243":5,"254":6,"255":6,"256":2,"257":4,"258":7,"281":12,"282":1,"290":1},"fqnsFingerprint":"b416a7dc987a83457af5271c03a6d75c6cbcc4462580256a560d02517a73eab2"},"82ab37307cd316e237643fac024bceb792a510ce2747af1eaeafb5308e8939f2":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IntegrationProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"},"6befc9bc803f12ef597e46d3191bf9dfee26815443aa21ebb2b91a620a522d8c":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\nintegration_response = apigateway.IntegrationResponse(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n    response_parameters={\n        \"response_parameters_key\": \"responseParameters\"\n    },\n    response_templates={\n        \"response_templates_key\": \"responseTemplates\"\n    },\n    selection_pattern=\"selectionPattern\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar integrationResponse = new IntegrationResponse {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n    ResponseParameters = new Dictionary<string, string> {\n        { \"responseParametersKey\", \"responseParameters\" }\n    },\n    ResponseTemplates = new Dictionary<string, string> {\n        { \"responseTemplatesKey\", \"responseTemplates\" }\n    },\n    SelectionPattern = \"selectionPattern\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nIntegrationResponse integrationResponse = IntegrationResponse.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n        .responseParameters(Map.of(\n                \"responseParametersKey\", \"responseParameters\"))\n        .responseTemplates(Map.of(\n                \"responseTemplatesKey\", \"responseTemplates\"))\n        .selectionPattern(\"selectionPattern\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nintegrationResponse := &IntegrationResponse{\n\tStatusCode: jsii.String(\"statusCode\"),\n\n\t// the properties below are optional\n\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\tResponseParameters: map[string]*string{\n\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t},\n\tResponseTemplates: map[string]*string{\n\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t},\n\tSelectionPattern: jsii.String(\"selectionPattern\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nconst integrationResponse: apigateway.IntegrationResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IntegrationResponse"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY","@aws-cdk/aws-apigateway.IntegrationResponse"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integrationResponse: apigateway.IntegrationResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  responseParameters: {\n    responseParametersKey: 'responseParameters',\n  },\n  responseTemplates: {\n    responseTemplatesKey: 'responseTemplates',\n  },\n  selectionPattern: 'selectionPattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":14,"153":1,"169":1,"193":3,"194":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":7,"290":1},"fqnsFingerprint":"90700203a8a9eee93ba815f1736267e6ccbb8dda724dcbfb50dda27803717c18"},"13b4f88e62b7732df11016e75b4c70d8d06b7e63bb1097a824c8c77242c0ab83":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.IntegrationType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"},"82d15f03520da4e56864310985d1dd83bdff9ccdfd84bb702c4791fda1a3aed7":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.JsonSchema"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"52277df4eca10a66e169dd752d300835fe2717eccee3f72ffe9c26a86b5b7a5d":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.JsonSchemaType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"31e240e18d9a48d8e2f25b0651bd1e52ac6d5ce42360f4922c873d8d3be5b314":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.JsonSchemaVersion"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"d3764085ac9d5168d552100a9a418f9b9f257961786db1fff6ed54072861b024":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.JsonWithStandardFieldProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"f05c19167180e36c4a17a857f1ddcf469064ff0234df1b8e1367ca43aca95eb9":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.core as cdk\n\n# function_: lambda.Function\n# role: iam.Role\n\nlambda_authorizer_props = apigateway.LambdaAuthorizerProps(\n    handler=function_,\n\n    # the properties below are optional\n    assume_role=role,\n    authorizer_name=\"authorizerName\",\n    results_cache_ttl=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\n\nFunction function_;\nRole role;\nvar lambdaAuthorizerProps = new LambdaAuthorizerProps {\n    Handler = function_,\n\n    // the properties below are optional\n    AssumeRole = role,\n    AuthorizerName = \"authorizerName\",\n    ResultsCacheTtl = Duration.Minutes(30)\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.*;\n\nFunction function_;\nRole role;\n\nLambdaAuthorizerProps lambdaAuthorizerProps = LambdaAuthorizerProps.builder()\n        .handler(function_)\n\n        // the properties below are optional\n        .assumeRole(role)\n        .authorizerName(\"authorizerName\")\n        .resultsCacheTtl(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar function_ function\nvar role role\n\nlambdaAuthorizerProps := &LambdaAuthorizerProps{\n\tHandler: function_,\n\n\t// the properties below are optional\n\tAssumeRole: role,\n\tAuthorizerName: jsii.String(\"authorizerName\"),\n\tResultsCacheTtl: cdk.Duration_Minutes(jsii.Number(30)),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const role: iam.Role;\nconst lambdaAuthorizerProps: apigateway.LambdaAuthorizerProps = {\n  handler: function_,\n\n  // the properties below are optional\n  assumeRole: role,\n  authorizerName: 'authorizerName',\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LambdaAuthorizerProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.LambdaAuthorizerProps","@aws-cdk/aws-iam.IRole","@aws-cdk/aws-lambda.IFunction","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const function_: lambda.Function;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaAuthorizerProps: apigateway.LambdaAuthorizerProps = {\n  handler: function_,\n\n  // the properties below are optional\n  assumeRole: role,\n  authorizerName: 'authorizerName',\n  resultsCacheTtl: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":5,"75":22,"130":2,"153":3,"169":3,"193":1,"194":2,"196":1,"225":3,"242":3,"243":3,"254":4,"255":4,"256":4,"281":4,"290":1},"fqnsFingerprint":"7d2545d20f5bcba9e465c82649626a44a4a06a7e6c6e73a00d5b05191892f52e"},"719d9af1810f936230d7f03d2faea03667cd9818de3651aea5874208b80cd65d":{"translations":{"python":{"source":"# resource: apigateway.Resource\n# handler: lambda.Function\n\nresource.add_method(\"GET\", apigateway.LambdaIntegration(handler))","version":"2"},"csharp":{"source":"Resource resource;\nFunction handler;\n\nresource.AddMethod(\"GET\", new LambdaIntegration(handler));","version":"1"},"java":{"source":"Resource resource;\nFunction handler;\n\nresource.addMethod(\"GET\", new LambdaIntegration(handler));","version":"1"},"go":{"source":"var resource resource\nvar handler function\n\nresource.AddMethod(jsii.String(\"GET\"), apigateway.NewLambdaIntegration(handler))","version":"1"},"$":{"source":"   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LambdaIntegration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"130":2,"153":2,"169":2,"194":2,"196":1,"197":1,"225":2,"226":1,"242":2,"243":2,"290":1},"fqnsFingerprint":"0bcc7f00f8a3a60791b97250e6a688b33e81494aa149bd4ee9b92bbeec9419c5"},"0f577520710fdc1b706e7c2ffaf7a3bdc6b975973f144854df0d43af7d93c753":{"translations":{"python":{"source":"# get_book_handler: lambda.Function\n# get_book_integration: apigateway.LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)","version":"2"},"csharp":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nvar getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});","version":"1"},"java":{"source":"Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();","version":"1"},"go":{"source":"var getBookHandler function\nvar getBookIntegration lambdaIntegration\n\n\ngetBookIntegration := apigateway.NewLambdaIntegration(getBookHandler, &LambdaIntegrationOptions{\n\tContentHandling: apigateway.ContentHandling_CONVERT_TO_TEXT,\n\t // convert to base64\n\tCredentialsPassthrough: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LambdaIntegrationOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.LambdaIntegrationOptions","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":15,"106":1,"130":2,"153":2,"169":2,"193":1,"194":3,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6b94f8e090b115464f10d64b8a3f0677009e29a06ef46c8273800c5757b29775"},"e659a8ae22d9d799945c3bc6d0eaf442d55a3eed8041bd8862e0104ae731f725":{"translations":{"python":{"source":"# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))","version":"2"},"csharp":{"source":"Function backend;\n\nvar api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nvar items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nvar item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"java":{"source":"Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"go":{"source":"var backend function\n\napi := apigateway.NewLambdaRestApi(this, jsii.String(\"myapi\"), &LambdaRestApiProps{\n\tHandler: backend,\n\tProxy: jsii.Boolean(false),\n})\n\nitems := api.Root.AddResource(jsii.String(\"items\"))\nitems.AddMethod(jsii.String(\"GET\")) // GET /items\nitems.AddMethod(jsii.String(\"POST\")) // POST /items\n\nitem := items.AddResource(jsii.String(\"{item}\"))\nitem.AddMethod(jsii.String(\"GET\")) // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(jsii.String(\"DELETE\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")))","version":"1"},"$":{"source":"declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LambdaRestApi"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaRestApi","@aws-cdk/aws-apigateway.LambdaRestApiProps","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":26,"91":1,"104":1,"130":1,"153":1,"169":1,"193":1,"194":9,"196":6,"197":2,"225":4,"226":4,"242":4,"243":4,"281":2,"290":1},"fqnsFingerprint":"1572ad9057c4e93fa763116070b3d2b930b613b2fb0275bdcad2854df4f1a049"},"7f38565073340f1ad668f744f4e19fd7e929564835bbbba7e1f6d566c93d166b":{"translations":{"python":{"source":"# backend: lambda.Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))","version":"2"},"csharp":{"source":"Function backend;\n\nvar api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nvar items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nvar item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"java":{"source":"Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));","version":"1"},"go":{"source":"var backend function\n\napi := apigateway.NewLambdaRestApi(this, jsii.String(\"myapi\"), &LambdaRestApiProps{\n\tHandler: backend,\n\tProxy: jsii.Boolean(false),\n})\n\nitems := api.Root.AddResource(jsii.String(\"items\"))\nitems.AddMethod(jsii.String(\"GET\")) // GET /items\nitems.AddMethod(jsii.String(\"POST\")) // POST /items\n\nitem := items.AddResource(jsii.String(\"{item}\"))\nitem.AddMethod(jsii.String(\"GET\")) // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(jsii.String(\"DELETE\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")))","version":"1"},"$":{"source":"declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LambdaRestApiProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaRestApi","@aws-cdk/aws-apigateway.LambdaRestApiProps","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":26,"91":1,"104":1,"130":1,"153":1,"169":1,"193":1,"194":9,"196":6,"197":2,"225":4,"226":4,"242":4,"243":4,"281":2,"290":1},"fqnsFingerprint":"1572ad9057c4e93fa763116070b3d2b930b613b2fb0275bdcad2854df4f1a049"},"a87e3a2583b8ced0f40aca4194ecf0caa3ec9d41419b227a125450ab1d5514e7":{"translations":{"python":{"source":"log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)","version":"2"},"csharp":{"source":"var logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});","version":"1"},"java":{"source":"LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();","version":"1"},"go":{"source":"logGroup := logs.NewLogGroup(this, jsii.String(\"ApiGatewayAccessLogs\"))\napigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(logGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_Custom(\n\t\tfmt.Sprintf(\"%v %v %v\", apigateway.AccessLogField_ContextRequestId(), apigateway.AccessLogField_ContextErrorMessage(), apigateway.AccessLogField_ContextErrorMessageString())),\n\t},\n})","version":"1"},"$":{"source":"const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.LogGroupLogDestination"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#custom","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"15":1,"16":2,"17":1,"75":23,"104":2,"193":2,"194":11,"196":4,"197":3,"211":1,"221":3,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"9e11b5905305feb5d1a7076564f2c97c6b4edb404bb6a6af8e8a83444d5265d8"},"47477d7f0526bf0371ab6464c5446fef4c6b1ea07fd80ac9f22b2c0a480b3886":{"translations":{"python":{"source":"# acm: Any\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)","version":"2"},"csharp":{"source":"var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});","version":"1"},"java":{"source":"Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();","version":"1"},"go":{"source":"var acm interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"domain-name\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acm.certificate_FromCertificateArn(this, jsii.String(\"cert\"), jsii.String(\"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\")),\n\tMtls: &MTLSConfig{\n\t\tBucket: s3.NewBucket(this, jsii.String(\"bucket\")),\n\t\tKey: jsii.String(\"truststore.pem\"),\n\t\tVersion: jsii.String(\"version\"),\n\t},\n})","version":"1"},"$":{"source":"declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MTLSConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.IBucket","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":14,"104":3,"125":1,"130":1,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":6,"290":1},"fqnsFingerprint":"0df508b27559a3376320ad826a9a63bf20edbb87de670e825859789476dd6adf"},"9d72f083c60fa79e8acd20e13625b6b0fbbef6d6780be2ae916060d52b94ae2d":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\n\n\nvar api = new RestApi(this, \"hello-api\");\n\nvar v1 = api.Root.AddResource(\"v1\");\nvar echo = v1.AddResource(\"echo\");\nvar echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nvar plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nvar key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);","version":"1"},"java":{"source":"LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);","version":"1"},"go":{"source":"var integration lambdaIntegration\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"))\n\nv1 := api.Root.AddResource(jsii.String(\"v1\"))\necho := v1.AddResource(jsii.String(\"echo\"))\nechoMethod := echo.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(true),\n})\n\nplan := api.AddUsagePlan(jsii.String(\"UsagePlan\"), &UsagePlanProps{\n\tName: jsii.String(\"Easy\"),\n\tThrottle: &ThrottleSettings{\n\t\tRateLimit: jsii.Number(10),\n\t\tBurstLimit: jsii.Number(2),\n\t},\n})\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"))\nplan.addApiKey(key)","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Method"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiBase#addApiKey","@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlanProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":7,"75":31,"104":1,"106":1,"130":1,"153":1,"169":1,"193":3,"194":8,"196":6,"197":1,"225":7,"226":1,"242":7,"243":7,"281":5,"290":1},"fqnsFingerprint":"b5eccba18bba8328a1c6cb6b3407303e7b97dc1db5e0b987c053c629a84c218a"},"efbad89941b47c00c1486986148281930c00f341df6ed37266f6d45527182818":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books\");\nvar deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nvar stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books\"))\ndeployment := apigateway.NewDeployment(this, jsii.String(\"my-deployment\"), &DeploymentProps{\n\tApi: Api,\n})\nstage := apigateway.NewStage(this, jsii.String(\"my-stage\"), &StageProps{\n\tDeployment: Deployment,\n\tMethodOptions: map[string]methodDeploymentOptions{\n\t\t\"/*/*\": &methodDeploymentOptions{\n\t\t\t // This special path applies to all resource paths and all HTTP methods\n\t\t\t\"throttlingRateLimit\": jsii.Number(100),\n\t\t\t\"throttlingBurstLimit\": jsii.Number(200),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MethodDeploymentOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.MethodDeploymentOptions","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":4,"75":14,"104":3,"193":4,"194":3,"197":3,"225":3,"242":3,"243":3,"281":4,"282":2},"fqnsFingerprint":"93712bd612b9f2d8183f8b0a5c8eced6bd1f8ba358b03d3cab65b9d9ac822254"},"a6c16c26c37f2c798c6029848246421810e3ea0d555ed6d637849c57fa3b0356":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});","version":"1"},"java":{"source":"RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tLoggingLevel: apigateway.MethodLoggingLevel_INFO,\n\t\tDataTraceEnabled: jsii.Boolean(true),\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MethodLoggingLevel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.MethodLoggingLevel","@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":9,"104":1,"106":1,"193":2,"194":3,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"cc68cbfeabed5a790dc2c3c0e33c179d28a506459921215febe5b81cf1abf2c9"},"fd2c4667764954cd23868dbb95585e4658fcd30d298bf3b7c66e294b479b0c37":{"translations":{"python":{"source":"# api: apigateway.RestApi\n# user_lambda: lambda.Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )","version":"2"},"csharp":{"source":"RestApi api;\nFunction userLambda;\n\n\nvar userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());","version":"1"},"go":{"source":"var api restApi\nvar userLambda function\n\n\nuserModel := api.AddModel(jsii.String(\"UserModel\"), &ModelOptions{\n\tSchema: &JsonSchema{\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"userId\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"name\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t\tRequired: []*string{\n\t\t\tjsii.String(\"userId\"),\n\t\t},\n\t},\n})\napi.Root.AddResource(jsii.String(\"user\")).AddMethod(jsii.String(\"POST\"),\napigateway.NewLambdaIntegration(userLambda), &MethodOptions{\n\tRequestModels: map[string]iModel{\n\t\t\"application/json\": userModel,\n\t},\n})","version":"1"},"$":{"source":"    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MethodOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.RestApi#addModel","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":37,"130":2,"153":3,"169":3,"192":1,"193":7,"194":11,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":10,"290":1},"fqnsFingerprint":"7d95b4b1c96ffdc63959a90bf21046f73bf917138a2cb355cca3c8e6eff721b9"},"942e9aafe432b880714083f905eb96a1d7a318250e0af15fdeb2202645b6af91":{"translations":{"python":{"source":"# api: apigateway.RestApi\n# user_lambda: lambda.Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )","version":"2"},"csharp":{"source":"RestApi api;\nFunction userLambda;\n\n\nvar userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());","version":"1"},"go":{"source":"var api restApi\nvar userLambda function\n\n\nuserModel := api.AddModel(jsii.String(\"UserModel\"), &ModelOptions{\n\tSchema: &JsonSchema{\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"userId\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"name\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t\tRequired: []*string{\n\t\t\tjsii.String(\"userId\"),\n\t\t},\n\t},\n})\napi.Root.AddResource(jsii.String(\"user\")).AddMethod(jsii.String(\"POST\"),\napigateway.NewLambdaIntegration(userLambda), &MethodOptions{\n\tRequestModels: map[string]iModel{\n\t\t\"application/json\": userModel,\n\t},\n})","version":"1"},"$":{"source":"    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-apigateway.MethodOptions","memberName":"requestModels"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.RestApi#addModel","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":37,"130":2,"153":3,"169":3,"192":1,"193":7,"194":11,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":10,"290":1},"fqnsFingerprint":"7d95b4b1c96ffdc63959a90bf21046f73bf917138a2cb355cca3c8e6eff721b9"},"0f7d8cbeb16b97c1fafd149fb50c48c3f244d85e4ff80c984fd79212533d3108":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nmethod_props = apigateway.MethodProps(\n    http_method=\"httpMethod\",\n    resource=resource,\n\n    # the properties below are optional\n    integration=integration,\n    options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nvar methodProps = new MethodProps {\n    HttpMethod = \"httpMethod\",\n    Resource = resource,\n\n    // the properties below are optional\n    Integration = integration,\n    Options = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nMethodProps methodProps = MethodProps.builder()\n        .httpMethod(\"httpMethod\")\n        .resource(resource)\n\n        // the properties below are optional\n        .integration(integration)\n        .options(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar authorizer authorizer\nvar integration integration\nvar model model\nvar requestValidator requestValidator\nvar resource resource\n\nmethodProps := &MethodProps{\n\tHttpMethod: jsii.String(\"httpMethod\"),\n\tResource: resource,\n\n\t// the properties below are optional\n\tIntegration: integration,\n\tOptions: &MethodOptions{\n\t\tApiKeyRequired: jsii.Boolean(false),\n\t\tAuthorizationScopes: []*string{\n\t\t\tjsii.String(\"authorizationScopes\"),\n\t\t},\n\t\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\t\tAuthorizer: authorizer,\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\t\"responseModelsKey\": model,\n\t\t\t\t},\n\t\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tOperationName: jsii.String(\"operationName\"),\n\t\tRequestModels: map[string]*iModel{\n\t\t\t\"requestModelsKey\": model,\n\t\t},\n\t\tRequestParameters: map[string]*bool{\n\t\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t\t},\n\t\tRequestValidator: requestValidator,\n\t\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\t\tValidateRequestBody: jsii.Boolean(false),\n\t\t\tValidateRequestParameters: jsii.Boolean(false),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst methodProps: apigateway.MethodProps = {\n  httpMethod: 'httpMethod',\n  resource: resource,\n\n  // the properties below are optional\n  integration: integration,\n  options: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MethodProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.IResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MethodProps","@aws-cdk/aws-apigateway.RequestValidatorOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodProps: apigateway.MethodProps = {\n  httpMethod: 'httpMethod',\n  resource: resource,\n\n  // the properties below are optional\n  integration: integration,\n  options: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":6,"75":52,"91":5,"130":5,"153":6,"169":6,"192":2,"193":8,"194":2,"225":6,"242":6,"243":6,"254":1,"255":1,"256":1,"281":24,"290":1},"fqnsFingerprint":"35903460f857ef2c70167561ef4871d7b3baa8d1b1b2a052f22572ccdf479121"},"d8339b82625ac04d35d90c552b193a41f754cabf682ec4064f40693025ff3d50":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# model: apigateway.Model\n\nmethod_response = apigateway.MethodResponse(\n    status_code=\"statusCode\",\n\n    # the properties below are optional\n    response_models={\n        \"response_models_key\": model\n    },\n    response_parameters={\n        \"response_parameters_key\": False\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nModel model;\n\nvar methodResponse = new MethodResponse {\n    StatusCode = \"statusCode\",\n\n    // the properties below are optional\n    ResponseModels = new Dictionary<string, IModel> {\n        { \"responseModelsKey\", model }\n    },\n    ResponseParameters = new Dictionary<string, boolean> {\n        { \"responseParametersKey\", false }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nModel model;\n\nMethodResponse methodResponse = MethodResponse.builder()\n        .statusCode(\"statusCode\")\n\n        // the properties below are optional\n        .responseModels(Map.of(\n                \"responseModelsKey\", model))\n        .responseParameters(Map.of(\n                \"responseParametersKey\", false))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar model model\n\nmethodResponse := &MethodResponse{\n\tStatusCode: jsii.String(\"statusCode\"),\n\n\t// the properties below are optional\n\tResponseModels: map[string]iModel{\n\t\t\"responseModelsKey\": model,\n\t},\n\tResponseParameters: map[string]*bool{\n\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const model: apigateway.Model;\nconst methodResponse: apigateway.MethodResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: model,\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MethodResponse"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.MethodResponse"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const model: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst methodResponse: apigateway.MethodResponse = {\n  statusCode: 'statusCode',\n\n  // the properties below are optional\n  responseModels: {\n    responseModelsKey: model,\n  },\n  responseParameters: {\n    responseParametersKey: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":13,"91":1,"130":1,"153":2,"169":2,"193":3,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"ada7e92dc1840b6a7f0792d7ab0c41bbca3f3cbf94502330b0362a6aaefd3b88"},"3f7d371fe759afc5f8c95277870f2cabcc18571bf3fa9ec943cdaf9cbf040b8c":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nvar app = new App();\nvar stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nvar authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nvar restapi = new RestApi(stack, \"MyRestApi\");\n\nvar authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/lib\"\nimport \"github.com/aws-samples/dummy/lib/authorizers\"\nimport \"github.com/aws-samples/dummy/lib/authorizers/identitysource\"\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp := awscdkcore.NewApp()\nstack := awscdkcore.NewStack(app, jsii.String(\"RequestAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"index.handler\"),\n\tCode: lambda.AssetCode_FromAsset(path.join(__dirname, jsii.String(\"integ.request-authorizer.handler\"))),\n})\n\nrestapi := lib.NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := libauthorizers.NewRequestAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authorizerFn,\n\tIdentitySources: []*string{\n\t\tlibauthorizersidentitysource.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t\t*libauthorizersidentitysource.IdentitySource_QueryString(jsii.String(\"allow\")),\n\t},\n})\n\nrestapi.Root.AddMethod(jsii.String(\"ANY\"), lib.NewMockIntegration(&IntegrationOptions{\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\tRequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &MethodOptions{\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tAuthorizer: Authorizer,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.MockIntegration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.IdentitySource#queryString","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.AssetCode","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n","syntaxKindCounter":{"10":19,"75":56,"192":3,"193":7,"194":11,"196":5,"197":6,"225":5,"226":1,"242":5,"243":5,"254":6,"255":6,"256":2,"257":4,"258":7,"281":12,"282":1,"290":1},"fqnsFingerprint":"b416a7dc987a83457af5271c03a6d75c6cbcc4462580256a560d02517a73eab2"},"4c5ea291cefcfe1c4f31c5d47774dcd54cf511cafd8188840b26eaa39c85f464":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Model"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"e6735a31f958984220f7e6c4bdf43d78f3a7393f137472a3f5b494406c878874":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nvar responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nvar errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());","version":"1"},"go":{"source":"var api restApi\n\n\n// We define the JSON Schema for the transformed valid response\nresponseModel := api.AddModel(jsii.String(\"ResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ResponseModel\"),\n\tSchema: &JsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"pollResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"greeting\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})\n\n// We define the JSON Schema for the transformed error response\nerrorResponseModel := api.AddModel(jsii.String(\"ErrorResponseModel\"), &ModelOptions{\n\tContentType: jsii.String(\"application/json\"),\n\tModelName: jsii.String(\"ErrorResponseModel\"),\n\tSchema: &jsonSchema{\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"errorResponse\"),\n\t\tType: apigateway.JsonSchemaType_OBJECT,\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"state\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t\t\"message\": &jsonSchema{\n\t\t\t\t\"type\": apigateway.JsonSchemaType_STRING,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ModelOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT","@aws-cdk/aws-apigateway.JsonSchemaType#STRING","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.Model","@aws-cdk/aws-apigateway.ModelOptions","@aws-cdk/aws-apigateway.RestApi#addModel"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":8,"75":55,"130":1,"153":1,"169":1,"193":10,"194":18,"196":2,"225":3,"242":3,"243":3,"281":22,"290":1},"fqnsFingerprint":"30c991b4cb3869d374ef1c7d9bdcad0d7fdce5d6386b1d6222b3933fea46bb46"},"f1ac3b1ebbf5134dc0b82813aeb2b49d02ad58530539eb8eb7ec02df338598f5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# default_: Any\n# enum_: Any\n# json_schema_: apigateway.JsonSchema\n# rest_api: apigateway.RestApi\n\nmodel_props = apigateway.ModelProps(\n    rest_api=rest_api,\n    schema=apigateway.JsonSchema(\n        additional_items=[json_schema_],\n        additional_properties=False,\n        all_of=[json_schema_],\n        any_of=[json_schema_],\n        contains=json_schema_,\n        default=default_,\n        definitions={\n            \"definitions_key\": json_schema_\n        },\n        dependencies={\n            \"dependencies_key\": [\"dependencies\"]\n        },\n        description=\"description\",\n        enum=[enum_],\n        exclusive_maximum=False,\n        exclusive_minimum=False,\n        format=\"format\",\n        id=\"id\",\n        items=json_schema_,\n        maximum=123,\n        max_items=123,\n        max_length=123,\n        max_properties=123,\n        minimum=123,\n        min_items=123,\n        min_length=123,\n        min_properties=123,\n        multiple_of=123,\n        not=json_schema_,\n        one_of=[json_schema_],\n        pattern=\"pattern\",\n        pattern_properties={\n            \"pattern_properties_key\": json_schema_\n        },\n        properties={\n            \"properties_key\": json_schema_\n        },\n        property_names=json_schema_,\n        ref=\"ref\",\n        required=[\"required\"],\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"title\",\n        type=apigateway.JsonSchemaType.NULL,\n        unique_items=False\n    ),\n\n    # the properties below are optional\n    content_type=\"contentType\",\n    description=\"description\",\n    model_name=\"modelName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nvar default_;\nvar enum_;\nJsonSchema jsonSchema_;\nRestApi restApi;\n\nvar modelProps = new ModelProps {\n    RestApi = restApi,\n    Schema = new JsonSchema {\n        AdditionalItems = new [] { jsonSchema_ },\n        AdditionalProperties = false,\n        AllOf = new [] { jsonSchema_ },\n        AnyOf = new [] { jsonSchema_ },\n        Contains = jsonSchema_,\n        Default = default_,\n        Definitions = new Dictionary<string, JsonSchema> {\n            { \"definitionsKey\", jsonSchema_ }\n        },\n        Dependencies = new Dictionary<string, object> {\n            { \"dependenciesKey\", new [] { \"dependencies\" } }\n        },\n        Description = \"description\",\n        Enum = new [] { enum_ },\n        ExclusiveMaximum = false,\n        ExclusiveMinimum = false,\n        Format = \"format\",\n        Id = \"id\",\n        Items = jsonSchema_,\n        Maximum = 123,\n        MaxItems = 123,\n        MaxLength = 123,\n        MaxProperties = 123,\n        Minimum = 123,\n        MinItems = 123,\n        MinLength = 123,\n        MinProperties = 123,\n        MultipleOf = 123,\n        Not = jsonSchema_,\n        OneOf = new [] { jsonSchema_ },\n        Pattern = \"pattern\",\n        PatternProperties = new Dictionary<string, JsonSchema> {\n            { \"patternPropertiesKey\", jsonSchema_ }\n        },\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"propertiesKey\", jsonSchema_ }\n        },\n        PropertyNames = jsonSchema_,\n        Ref = \"ref\",\n        Required = new [] { \"required\" },\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"title\",\n        Type = JsonSchemaType.NULL,\n        UniqueItems = false\n    },\n\n    // the properties below are optional\n    ContentType = \"contentType\",\n    Description = \"description\",\n    ModelName = \"modelName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nObject default_;\nObject enum_;\nJsonSchema jsonSchema_;\nRestApi restApi;\n\nModelProps modelProps = ModelProps.builder()\n        .restApi(restApi)\n        .schema(JsonSchema.builder()\n                .additionalItems(List.of(jsonSchema_))\n                .additionalProperties(false)\n                .allOf(List.of(jsonSchema_))\n                .anyOf(List.of(jsonSchema_))\n                .contains(jsonSchema_)\n                .default(default_)\n                .definitions(Map.of(\n                        \"definitionsKey\", jsonSchema_))\n                .dependencies(Map.of(\n                        \"dependenciesKey\", List.of(\"dependencies\")))\n                .description(\"description\")\n                .enum(List.of(enum_))\n                .exclusiveMaximum(false)\n                .exclusiveMinimum(false)\n                .format(\"format\")\n                .id(\"id\")\n                .items(jsonSchema_)\n                .maximum(123)\n                .maxItems(123)\n                .maxLength(123)\n                .maxProperties(123)\n                .minimum(123)\n                .minItems(123)\n                .minLength(123)\n                .minProperties(123)\n                .multipleOf(123)\n                .not(jsonSchema_)\n                .oneOf(List.of(jsonSchema_))\n                .pattern(\"pattern\")\n                .patternProperties(Map.of(\n                        \"patternPropertiesKey\", jsonSchema_))\n                .properties(Map.of(\n                        \"propertiesKey\", jsonSchema_))\n                .propertyNames(jsonSchema_)\n                .ref(\"ref\")\n                .required(List.of(\"required\"))\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"title\")\n                .type(JsonSchemaType.NULL)\n                .uniqueItems(false)\n                .build())\n\n        // the properties below are optional\n        .contentType(\"contentType\")\n        .description(\"description\")\n        .modelName(\"modelName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar default_ interface{}\nvar enum_ interface{}\nvar jsonSchema_ jsonSchema\nvar restApi restApi\n\nmodelProps := &ModelProps{\n\tRestApi: restApi,\n\tSchema: &jsonSchema{\n\t\tAdditionalItems: []*jsonSchema{\n\t\t\tjsonSchema_,\n\t\t},\n\t\tAdditionalProperties: jsii.Boolean(false),\n\t\tAllOf: []*jsonSchema{\n\t\t\tjsonSchema_,\n\t\t},\n\t\tAnyOf: []*jsonSchema{\n\t\t\tjsonSchema_,\n\t\t},\n\t\tContains: jsonSchema_,\n\t\tDefault: default_,\n\t\tDefinitions: map[string]*jsonSchema{\n\t\t\t\"definitionsKey\": jsonSchema_,\n\t\t},\n\t\tDependencies: map[string]interface{}{\n\t\t\t\"dependenciesKey\": []interface{}{\n\t\t\t\tjsii.String(\"dependencies\"),\n\t\t\t},\n\t\t},\n\t\tDescription: jsii.String(\"description\"),\n\t\tEnum: []interface{}{\n\t\t\tenum_,\n\t\t},\n\t\tExclusiveMaximum: jsii.Boolean(false),\n\t\tExclusiveMinimum: jsii.Boolean(false),\n\t\tFormat: jsii.String(\"format\"),\n\t\tId: jsii.String(\"id\"),\n\t\tItems: jsonSchema_,\n\t\tMaximum: jsii.Number(123),\n\t\tMaxItems: jsii.Number(123),\n\t\tMaxLength: jsii.Number(123),\n\t\tMaxProperties: jsii.Number(123),\n\t\tMinimum: jsii.Number(123),\n\t\tMinItems: jsii.Number(123),\n\t\tMinLength: jsii.Number(123),\n\t\tMinProperties: jsii.Number(123),\n\t\tMultipleOf: jsii.Number(123),\n\t\tNot: jsonSchema_,\n\t\tOneOf: []*jsonSchema{\n\t\t\tjsonSchema_,\n\t\t},\n\t\tPattern: jsii.String(\"pattern\"),\n\t\tPatternProperties: map[string]*jsonSchema{\n\t\t\t\"patternPropertiesKey\": jsonSchema_,\n\t\t},\n\t\tProperties: map[string]*jsonSchema{\n\t\t\t\"propertiesKey\": jsonSchema_,\n\t\t},\n\t\tPropertyNames: jsonSchema_,\n\t\tRef: jsii.String(\"ref\"),\n\t\tRequired: []*string{\n\t\t\tjsii.String(\"required\"),\n\t\t},\n\t\tSchema: apigateway.JsonSchemaVersion_DRAFT4,\n\t\tTitle: jsii.String(\"title\"),\n\t\tType: apigateway.JsonSchemaType_NULL,\n\t\tUniqueItems: jsii.Boolean(false),\n\t},\n\n\t// the properties below are optional\n\tContentType: jsii.String(\"contentType\"),\n\tDescription: jsii.String(\"description\"),\n\tModelName: jsii.String(\"modelName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const default_: any;\ndeclare const enum_: any;\ndeclare const jsonSchema_: apigateway.JsonSchema;\ndeclare const restApi: apigateway.RestApi;\nconst modelProps: apigateway.ModelProps = {\n  restApi: restApi,\n  schema: {\n    additionalItems: [jsonSchema_],\n    additionalProperties: false,\n    allOf: [jsonSchema_],\n    anyOf: [jsonSchema_],\n    contains: jsonSchema_,\n    default: default_,\n    definitions: {\n      definitionsKey: jsonSchema_,\n    },\n    dependencies: {\n      dependenciesKey: ['dependencies'],\n    },\n    description: 'description',\n    enum: [enum_],\n    exclusiveMaximum: false,\n    exclusiveMinimum: false,\n    format: 'format',\n    id: 'id',\n    items: jsonSchema_,\n    maximum: 123,\n    maxItems: 123,\n    maxLength: 123,\n    maxProperties: 123,\n    minimum: 123,\n    minItems: 123,\n    minLength: 123,\n    minProperties: 123,\n    multipleOf: 123,\n    not: jsonSchema_,\n    oneOf: [jsonSchema_],\n    pattern: 'pattern',\n    patternProperties: {\n      patternPropertiesKey: jsonSchema_,\n    },\n    properties: {\n      propertiesKey: jsonSchema_,\n    },\n    propertyNames: jsonSchema_,\n    ref: 'ref',\n    required: ['required'],\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'title',\n    type: apigateway.JsonSchemaType.NULL,\n    uniqueItems: false,\n  },\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  modelName: 'modelName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ModelProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonSchema","@aws-cdk/aws-apigateway.JsonSchemaType","@aws-cdk/aws-apigateway.JsonSchemaType#NULL","@aws-cdk/aws-apigateway.JsonSchemaVersion","@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4","@aws-cdk/aws-apigateway.ModelProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const default_: any;\ndeclare const enum_: any;\ndeclare const jsonSchema_: apigateway.JsonSchema;\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst modelProps: apigateway.ModelProps = {\n  restApi: restApi,\n  schema: {\n    additionalItems: [jsonSchema_],\n    additionalProperties: false,\n    allOf: [jsonSchema_],\n    anyOf: [jsonSchema_],\n    contains: jsonSchema_,\n    default: default_,\n    definitions: {\n      definitionsKey: jsonSchema_,\n    },\n    dependencies: {\n      dependenciesKey: ['dependencies'],\n    },\n    description: 'description',\n    enum: [enum_],\n    exclusiveMaximum: false,\n    exclusiveMinimum: false,\n    format: 'format',\n    id: 'id',\n    items: jsonSchema_,\n    maximum: 123,\n    maxItems: 123,\n    maxLength: 123,\n    maxProperties: 123,\n    minimum: 123,\n    minItems: 123,\n    minLength: 123,\n    minProperties: 123,\n    multipleOf: 123,\n    not: jsonSchema_,\n    oneOf: [jsonSchema_],\n    pattern: 'pattern',\n    patternProperties: {\n      patternPropertiesKey: jsonSchema_,\n    },\n    properties: {\n      propertiesKey: jsonSchema_,\n    },\n    propertyNames: jsonSchema_,\n    ref: 'ref',\n    required: ['required'],\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'title',\n    type: apigateway.JsonSchemaType.NULL,\n    uniqueItems: false,\n  },\n\n  // the properties below are optional\n  contentType: 'contentType',\n  description: 'description',\n  modelName: 'modelName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":9,"10":12,"75":77,"91":4,"125":2,"130":4,"153":3,"169":3,"192":7,"193":6,"194":4,"225":5,"242":5,"243":5,"254":1,"255":1,"256":1,"281":45,"290":1},"fqnsFingerprint":"f1d2c0ec6502b8637590f569dee69336cbb648436a1312d1ffe97fe35dad0ee0"},"7380491354bf13610bbcb2c16fd2e8f6c4193bd7ede4a42144cb00c9e66af72c":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)","version":"2"},"csharp":{"source":"using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nvar app = new App();\nvar stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nvar authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nvar restapi = new RestApi(stack, \"MyRestApi\");\n\nvar authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});","version":"1"},"java":{"source":"import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());","version":"1"},"go":{"source":"import path \"github.com/aws-samples/dummy/path\"\nimport \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/lib\"\nimport \"github.com/aws-samples/dummy/lib/authorizers\"\nimport \"github.com/aws-samples/dummy/lib/authorizers/identitysource\"\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp := awscdkcore.NewApp()\nstack := awscdkcore.NewStack(app, jsii.String(\"RequestAuthorizerInteg\"))\n\nauthorizerFn := lambda.NewFunction(stack, jsii.String(\"MyAuthorizerFunction\"), &FunctionProps{\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tHandler: jsii.String(\"index.handler\"),\n\tCode: lambda.AssetCode_FromAsset(path.join(__dirname, jsii.String(\"integ.request-authorizer.handler\"))),\n})\n\nrestapi := lib.NewRestApi(stack, jsii.String(\"MyRestApi\"))\n\nauthorizer := libauthorizers.NewRequestAuthorizer(stack, jsii.String(\"MyAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authorizerFn,\n\tIdentitySources: []*string{\n\t\tlibauthorizersidentitysource.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t\t*libauthorizersidentitysource.IdentitySource_QueryString(jsii.String(\"allow\")),\n\t},\n})\n\nrestapi.Root.AddMethod(jsii.String(\"ANY\"), lib.NewMockIntegration(&IntegrationOptions{\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\tRequestTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t},\n}), &MethodOptions{\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t},\n\t},\n\tAuthorizer: Authorizer,\n})","version":"1"},"$":{"source":"import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.PassthroughBehavior"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.IdentitySource#queryString","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-lambda.AssetCode","@aws-cdk/aws-lambda.Code","@aws-cdk/aws-lambda.Code#fromAsset","@aws-cdk/aws-lambda.Function","@aws-cdk/aws-lambda.FunctionProps","@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n","syntaxKindCounter":{"10":19,"75":56,"192":3,"193":7,"194":11,"196":5,"197":6,"225":5,"226":1,"242":5,"243":5,"254":6,"255":6,"256":2,"257":4,"258":7,"281":12,"282":1,"290":1},"fqnsFingerprint":"b416a7dc987a83457af5271c03a6d75c6cbcc4462580256a560d02517a73eab2"},"0fcb397fca532e43ed27fb8f51f793e651c511c74fee7dc7b960872b15d8e8d5":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\nvar key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();","version":"1"},"go":{"source":"var api restApi\n\n\nkey := apigateway.NewRateLimitedApiKey(this, jsii.String(\"rate-limited-api-key\"), &RateLimitedApiKeyProps{\n\tCustomerId: jsii.String(\"hello-customer\"),\n\tResources: []iRestApi{\n\t\tapi,\n\t},\n\tQuota: &QuotaSettings{\n\t\tLimit: jsii.Number(10000),\n\t\tPeriod: apigateway.Period_MONTH,\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Period"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Period","@aws-cdk/aws-apigateway.Period#MONTH","@aws-cdk/aws-apigateway.QuotaSettings","@aws-cdk/aws-apigateway.RateLimitedApiKey","@aws-cdk/aws-apigateway.RateLimitedApiKeyProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":2,"75":15,"104":1,"130":1,"153":1,"169":1,"192":1,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":5,"290":1},"fqnsFingerprint":"291c3985d510a494a2db5bf176d9fdc5bfcff01b8c71c77effd4965445031bb5"},"b792db63fb671270e4b4031d74b79a900c25574c00aa99c7627acbb98238341b":{"translations":{"python":{"source":"# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)","version":"2"},"csharp":{"source":"Resource resource;\nFunction handler;\n\nvar proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});","version":"1"},"java":{"source":"Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());","version":"1"},"go":{"source":"var resource resource\nvar handler function\n\nproxy := resource.AddProxy(&ProxyResourceOptions{\n\tDefaultIntegration: apigateway.NewLambdaIntegration(handler),\n\n\t// \"false\" will require explicitly adding methods on the `proxy` resource\n\tAnyMethod: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ProxyResource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.ProxyResource","@aws-cdk/aws-apigateway.ProxyResourceOptions","@aws-cdk/aws-apigateway.ResourceBase#addProxy","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":14,"106":1,"130":2,"153":2,"169":2,"193":1,"194":2,"196":1,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"f6e129c0ab775aff4ed483deeca1aad6e5d1c5583d7e91d3247f352b9c8527ac"},"97b7cabb219f3472be85660971dc3f8a35239913575872daf0658b31faa22aea":{"translations":{"python":{"source":"# resource: apigateway.Resource\n# handler: lambda.Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)","version":"2"},"csharp":{"source":"Resource resource;\nFunction handler;\n\nvar proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});","version":"1"},"java":{"source":"Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());","version":"1"},"go":{"source":"var resource resource\nvar handler function\n\nproxy := resource.AddProxy(&ProxyResourceOptions{\n\tDefaultIntegration: apigateway.NewLambdaIntegration(handler),\n\n\t// \"false\" will require explicitly adding methods on the `proxy` resource\n\tAnyMethod: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ProxyResourceOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.LambdaIntegration","@aws-cdk/aws-apigateway.ProxyResource","@aws-cdk/aws-apigateway.ProxyResourceOptions","@aws-cdk/aws-apigateway.ResourceBase#addProxy","@aws-cdk/aws-lambda.IFunction"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"75":14,"106":1,"130":2,"153":2,"169":2,"193":1,"194":2,"196":1,"197":1,"225":3,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"f6e129c0ab775aff4ed483deeca1aad6e5d1c5583d7e91d3247f352b9c8527ac"},"e3403155507ae79953252ff61114c7df1190c635230e7e05e2a2610ef7ccfdd5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nproxy_resource_props = apigateway.ProxyResourceProps(\n    parent=resource,\n\n    # the properties below are optional\n    any_method=False,\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\nvar proxyResourceProps = new ProxyResourceProps {\n    Parent = resource,\n\n    // the properties below are optional\n    AnyMethod = false,\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nProxyResourceProps proxyResourceProps = ProxyResourceProps.builder()\n        .parent(resource)\n\n        // the properties below are optional\n        .anyMethod(false)\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar authorizer authorizer\nvar integration integration\nvar model model\nvar requestValidator requestValidator\nvar resource resource\n\nproxyResourceProps := &ProxyResourceProps{\n\tParent: resource,\n\n\t// the properties below are optional\n\tAnyMethod: jsii.Boolean(false),\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tDisableCache: jsii.Boolean(false),\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tStatusCode: jsii.Number(123),\n\t},\n\tDefaultIntegration: integration,\n\tDefaultMethodOptions: &MethodOptions{\n\t\tApiKeyRequired: jsii.Boolean(false),\n\t\tAuthorizationScopes: []*string{\n\t\t\tjsii.String(\"authorizationScopes\"),\n\t\t},\n\t\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\t\tAuthorizer: authorizer,\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\t\"responseModelsKey\": model,\n\t\t\t\t},\n\t\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tOperationName: jsii.String(\"operationName\"),\n\t\tRequestModels: map[string]*iModel{\n\t\t\t\"requestModelsKey\": model,\n\t\t},\n\t\tRequestParameters: map[string]*bool{\n\t\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t\t},\n\t\tRequestValidator: requestValidator,\n\t\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\t\tValidateRequestBody: jsii.Boolean(false),\n\t\t\tValidateRequestParameters: jsii.Boolean(false),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst proxyResourceProps: apigateway.ProxyResourceProps = {\n  parent: resource,\n\n  // the properties below are optional\n  anyMethod: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ProxyResourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.IResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ProxyResourceProps","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst proxyResourceProps: apigateway.ProxyResourceProps = {\n  parent: resource,\n\n  // the properties below are optional\n  anyMethod: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":10,"75":65,"91":8,"130":5,"153":6,"169":6,"192":6,"193":9,"194":4,"196":1,"225":6,"242":6,"243":6,"254":2,"255":2,"256":2,"281":33,"290":1},"fqnsFingerprint":"a12126567da946530f60f59257af11e8a169012f830412c4278ee3abbfae5e3e"},"7ab2ef2542229a6236e527541dfded252231c0101eb27bd12fa7612e73629562":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\nvar key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();","version":"1"},"go":{"source":"var api restApi\n\n\nkey := apigateway.NewRateLimitedApiKey(this, jsii.String(\"rate-limited-api-key\"), &RateLimitedApiKeyProps{\n\tCustomerId: jsii.String(\"hello-customer\"),\n\tResources: []iRestApi{\n\t\tapi,\n\t},\n\tQuota: &QuotaSettings{\n\t\tLimit: jsii.Number(10000),\n\t\tPeriod: apigateway.Period_MONTH,\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.QuotaSettings"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Period","@aws-cdk/aws-apigateway.Period#MONTH","@aws-cdk/aws-apigateway.QuotaSettings","@aws-cdk/aws-apigateway.RateLimitedApiKey","@aws-cdk/aws-apigateway.RateLimitedApiKeyProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":2,"75":15,"104":1,"130":1,"153":1,"169":1,"192":1,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":5,"290":1},"fqnsFingerprint":"291c3985d510a494a2db5bf176d9fdc5bfcff01b8c71c77effd4965445031bb5"},"437d45321f494f04c631e447d80fda31d7202039af49a1b3e6398000dbbf49a3":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\nvar key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();","version":"1"},"go":{"source":"var api restApi\n\n\nkey := apigateway.NewRateLimitedApiKey(this, jsii.String(\"rate-limited-api-key\"), &RateLimitedApiKeyProps{\n\tCustomerId: jsii.String(\"hello-customer\"),\n\tResources: []iRestApi{\n\t\tapi,\n\t},\n\tQuota: &QuotaSettings{\n\t\tLimit: jsii.Number(10000),\n\t\tPeriod: apigateway.Period_MONTH,\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RateLimitedApiKey"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Period","@aws-cdk/aws-apigateway.Period#MONTH","@aws-cdk/aws-apigateway.QuotaSettings","@aws-cdk/aws-apigateway.RateLimitedApiKey","@aws-cdk/aws-apigateway.RateLimitedApiKeyProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":2,"75":15,"104":1,"130":1,"153":1,"169":1,"192":1,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":5,"290":1},"fqnsFingerprint":"291c3985d510a494a2db5bf176d9fdc5bfcff01b8c71c77effd4965445031bb5"},"3d4e500801040a66cc030559c38ff487b6da002b768a719f4f7a65f73c38bd78":{"translations":{"python":{"source":"# api: apigateway.RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)","version":"2"},"csharp":{"source":"RestApi api;\n\n\nvar key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});","version":"1"},"java":{"source":"RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();","version":"1"},"go":{"source":"var api restApi\n\n\nkey := apigateway.NewRateLimitedApiKey(this, jsii.String(\"rate-limited-api-key\"), &RateLimitedApiKeyProps{\n\tCustomerId: jsii.String(\"hello-customer\"),\n\tResources: []iRestApi{\n\t\tapi,\n\t},\n\tQuota: &QuotaSettings{\n\t\tLimit: jsii.Number(10000),\n\t\tPeriod: apigateway.Period_MONTH,\n\t},\n})","version":"1"},"$":{"source":"declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Period","@aws-cdk/aws-apigateway.Period#MONTH","@aws-cdk/aws-apigateway.QuotaSettings","@aws-cdk/aws-apigateway.RateLimitedApiKey","@aws-cdk/aws-apigateway.RateLimitedApiKeyProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":2,"75":15,"104":1,"130":1,"153":1,"169":1,"192":1,"193":2,"194":3,"197":1,"225":2,"242":2,"243":2,"281":5,"290":1},"fqnsFingerprint":"291c3985d510a494a2db5bf176d9fdc5bfcff01b8c71c77effd4965445031bb5"},"4e106cdc5dd169658306092a00006e3e6ae96da99a550ad30ce763e45b2d1796":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewRequestAuthorizer(this, jsii.String(\"booksAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authFn,\n\tIdentitySources: []*string{\n\t\tapigateway.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t},\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestAuthorizer"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IdentitySource","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":2,"153":2,"169":2,"192":1,"193":2,"194":5,"196":2,"197":2,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"97e9cce7a61bbe3cb25665bfc8f9b30b004442bc6eb1da2efa7e742d738b774c"},"8f899e115af5fa88df7429e49aa9466858a7f8f159bc0c8c2de63ef23ca5252a":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewRequestAuthorizer(this, jsii.String(\"booksAuthorizer\"), &RequestAuthorizerProps{\n\tHandler: authFn,\n\tIdentitySources: []*string{\n\t\tapigateway.IdentitySource_Header(jsii.String(\"Authorization\")),\n\t},\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestAuthorizerProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IdentitySource","@aws-cdk/aws-apigateway.IdentitySource#header","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestAuthorizer","@aws-cdk/aws-apigateway.RequestAuthorizerProps","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":2,"153":2,"169":2,"192":1,"193":2,"194":5,"196":2,"197":2,"225":3,"226":1,"242":3,"243":3,"281":3,"290":1},"fqnsFingerprint":"97e9cce7a61bbe3cb25665bfc8f9b30b004442bc6eb1da2efa7e742d738b774c"},"b70825769942b2e812fcc089e87b5e72a7a0125de8ad15536e0c68e34b3e80e1":{"translations":{"python":{"source":"apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    authorizer=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    Authorizer = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});","version":"1"},"java":{"source":"StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .authorizer(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();","version":"1"},"go":{"source":"apigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tStateMachine: machine,\n\tHeaders: jsii.Boolean(true),\n\tPath: jsii.Boolean(false),\n\tQuerystring: jsii.Boolean(false),\n\tAuthorizer: jsii.Boolean(false),\n\tRequestContext: &RequestContext{\n\t\tCaller: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t},\n})","version":"1"},"$":{"source":"new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  authorizer: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestContext"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.RequestContext","@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.StateMachineType","constructs.Construct"],"fullSource":"import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  authorizer: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":11,"91":3,"104":1,"106":3,"193":2,"194":1,"197":1,"226":1,"281":8},"fqnsFingerprint":"410f8fe83f7b51d26bad3c9599e15736e577ef2cdc75d207bc9053dc6a904101"},"2c539bf9aa5e68cbf18c6258d73b0a56f57d6e676e989ecdaf89e08f04221d28":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nrequest_validator = apigateway.RequestValidator(self, \"MyRequestValidator\",\n    rest_api=rest_api,\n\n    # the properties below are optional\n    request_validator_name=\"requestValidatorName\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nvar requestValidator = new RequestValidator(this, \"MyRequestValidator\", new RequestValidatorProps {\n    RestApi = restApi,\n\n    // the properties below are optional\n    RequestValidatorName = \"requestValidatorName\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nRequestValidator requestValidator = RequestValidator.Builder.create(this, \"MyRequestValidator\")\n        .restApi(restApi)\n\n        // the properties below are optional\n        .requestValidatorName(\"requestValidatorName\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar restApi restApi\n\nrequestValidator := apigateway.NewRequestValidator(this, jsii.String(\"MyRequestValidator\"), &RequestValidatorProps{\n\tRestApi: restApi,\n\n\t// the properties below are optional\n\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\tValidateRequestBody: jsii.Boolean(false),\n\tValidateRequestParameters: jsii.Boolean(false),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst requestValidator = new apigateway.RequestValidator(this, 'MyRequestValidator', {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestValidator"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.RequestValidator","@aws-cdk/aws-apigateway.RequestValidatorProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst requestValidator = new apigateway.RequestValidator(this, 'MyRequestValidator', {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":12,"91":2,"104":1,"130":1,"153":1,"169":1,"193":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"2f157a6fff43c84e69986dad498dc0b49d24dd5fce8a04f2454bbbdfe939a8e5"},"0feb6d576890b3ea755f50cf1a527a99db21ef112e790cb8288f004245a47638":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n# resource: apigateway.Resource\n# response_model: apigateway.Model\n# error_response_model: apigateway.Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header.Content-Type\": True,\n            \"method.response.header.Access-Control-Allow-Origin\": True,\n            \"method.response.header.Access-Control-Allow-Credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header.Content-Type\": True,\n            \"method.response.header.Access-Control-Allow-Origin\": True,\n            \"method.response.header.Access-Control-Allow-Credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});","version":"1"},"java":{"source":"LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());","version":"1"},"go":{"source":"var integration lambdaIntegration\nvar resource resource\nvar responseModel model\nvar errorResponseModel model\n\n\nresource.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\t// We can mark the parameters as required\n\tRequestParameters: map[string]*bool{\n\t\t\"method.request.querystring.who\": jsii.Boolean(true),\n\t},\n\t// we can set request validator options like below\n\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\tRequestValidatorName: jsii.String(\"test-validator\"),\n\t\tValidateRequestBody: jsii.Boolean(true),\n\t\tValidateRequestParameters: jsii.Boolean(false),\n\t},\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\t// Successful response from the integration\n\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t// Define what parameters are allowed or not\n\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\"method.response.header.Content-Type\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.Boolean(true),\n\t\t\t},\n\t\t\t// Validate the schema on the response\n\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\"application/json\": responseModel,\n\t\t\t},\n\t\t},\n\t\t&methodResponse{\n\t\t\t// Same thing for the error responses\n\t\t\tStatusCode: jsii.String(\"400\"),\n\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\"method.response.header.Content-Type\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Origin\": jsii.Boolean(true),\n\t\t\t\t\"method.response.header.Access-Control-Allow-Credentials\": jsii.Boolean(true),\n\t\t\t},\n\t\t\tResponseModels: map[string]*iModel{\n\t\t\t\t\"application/json\": errorResponseModel,\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestValidatorOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":13,"75":29,"91":1,"106":8,"130":4,"153":4,"169":4,"192":1,"193":9,"194":1,"196":1,"225":4,"226":1,"242":4,"243":4,"281":21,"290":1},"fqnsFingerprint":"d24fe27168c3503a60ad2e38a3b9257c964ad74d88eeebb1b55ea8f24068eb23"},"7281c74ca27f15cfb47cc1d61996ed9fdd60aefe9efa39b7f3a18b10e61eb394":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nrequest_validator_props = apigateway.RequestValidatorProps(\n    rest_api=rest_api,\n\n    # the properties below are optional\n    request_validator_name=\"requestValidatorName\",\n    validate_request_body=False,\n    validate_request_parameters=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nvar requestValidatorProps = new RequestValidatorProps {\n    RestApi = restApi,\n\n    // the properties below are optional\n    RequestValidatorName = \"requestValidatorName\",\n    ValidateRequestBody = false,\n    ValidateRequestParameters = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nRequestValidatorProps requestValidatorProps = RequestValidatorProps.builder()\n        .restApi(restApi)\n\n        // the properties below are optional\n        .requestValidatorName(\"requestValidatorName\")\n        .validateRequestBody(false)\n        .validateRequestParameters(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar restApi restApi\n\nrequestValidatorProps := &RequestValidatorProps{\n\tRestApi: restApi,\n\n\t// the properties below are optional\n\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\tValidateRequestBody: jsii.Boolean(false),\n\tValidateRequestParameters: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst requestValidatorProps: apigateway.RequestValidatorProps = {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RequestValidatorProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.RequestValidatorProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst requestValidatorProps: apigateway.RequestValidatorProps = {\n  restApi: restApi,\n\n  // the properties below are optional\n  requestValidatorName: 'requestValidatorName',\n  validateRequestBody: false,\n  validateRequestParameters: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":12,"91":2,"130":1,"153":2,"169":2,"193":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"984caca4690770cd45b532786a02a1c3dd63e46e8c10fc90067f5cf8a7e6f36a"},"bbeb2ab494c5bbcd5c9fd80a6ccf14164b8c552b8db27cd9658f9c3f749d95b4":{"translations":{"python":{"source":"# books_backend: apigateway.LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")","version":"2"},"csharp":{"source":"LambdaIntegration booksBackend;\n\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nvar books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nvar book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");","version":"1"},"java":{"source":"LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");","version":"1"},"go":{"source":"var booksBackend lambdaIntegration\n\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDefaultIntegration: booksBackend,\n})\n\nbooks := api.Root.AddResource(jsii.String(\"books\"))\nbooks.AddMethod(jsii.String(\"GET\")) // integrated with `booksBackend`\nbooks.AddMethod(jsii.String(\"POST\")) // integrated with `booksBackend`\n\nbook := books.AddResource(jsii.String(\"{book_id}\"))\nbook.AddMethod(jsii.String(\"GET\"))","version":"1"},"$":{"source":"declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Resource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":6,"75":21,"104":1,"130":1,"153":1,"169":1,"193":1,"194":7,"196":5,"197":1,"225":4,"226":3,"242":4,"243":4,"281":1,"290":1},"fqnsFingerprint":"aa27f063bda130e88e5ba375bc471de6d87506691d9120c53164880efbabb2fb"},"c1bdb93f60ad698d1fc44b16b55985a17c45f378b2c86bf2ba1f7956fea5acf8":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# rest_api: apigateway.RestApi\n\nresource_attributes = apigateway.ResourceAttributes(\n    path=\"path\",\n    resource_id=\"resourceId\",\n    rest_api=rest_api\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nRestApi restApi;\n\nvar resourceAttributes = new ResourceAttributes {\n    Path = \"path\",\n    ResourceId = \"resourceId\",\n    RestApi = restApi\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nRestApi restApi;\n\nResourceAttributes resourceAttributes = ResourceAttributes.builder()\n        .path(\"path\")\n        .resourceId(\"resourceId\")\n        .restApi(restApi)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar restApi restApi\n\nresourceAttributes := &ResourceAttributes{\n\tPath: jsii.String(\"path\"),\n\tResourceId: jsii.String(\"resourceId\"),\n\tRestApi: restApi,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\nconst resourceAttributes: apigateway.ResourceAttributes = {\n  path: 'path',\n  resourceId: 'resourceId',\n  restApi: restApi,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ResourceAttributes"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.ResourceAttributes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const restApi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceAttributes: apigateway.ResourceAttributes = {\n  path: 'path',\n  resourceId: 'resourceId',\n  restApi: restApi,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":11,"130":1,"153":2,"169":2,"193":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"87eb721a342f2177c9ae036b958bf514a053397f1434b4954f8bbf20e329df7a"},"41355a11c52571e06b17eede05c7d8624254531883f85fb47e5e90f5bc6d2519":{"translations":{"python":{"source":"# resource: apigateway.Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)","version":"2"},"csharp":{"source":"Resource resource;\n\n\nvar subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});","version":"1"},"java":{"source":"Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());","version":"1"},"go":{"source":"var resource resource\n\n\nsubtree := resource.AddResource(jsii.String(\"subtree\"), &ResourceOptions{\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"https://amazon.com\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ResourceOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.ResourceOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":8,"130":1,"153":1,"169":1,"192":1,"193":2,"194":1,"196":1,"225":2,"242":2,"243":2,"281":2,"290":1},"fqnsFingerprint":"4d00ee04c4186472d97d00a1c041cc99cc03e9282f6a9d40710b065e59706293"},"f239d49075c8a35dadd291b74461c78cbbcdf7a76d5aac06a6577c52475334b1":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.core as cdk\n\n# authorizer: apigateway.Authorizer\n# integration: apigateway.Integration\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n# resource: apigateway.Resource\n\nresource_props = apigateway.ResourceProps(\n    parent=resource,\n    path_part=\"pathPart\",\n\n    # the properties below are optional\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\nvar resourceProps = new ResourceProps {\n    Parent = resource,\n    PathPart = \"pathPart\",\n\n    // the properties below are optional\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.core.*;\n\nAuthorizer authorizer;\nIntegration integration;\nModel model;\nRequestValidator requestValidator;\nResource resource;\n\nResourceProps resourceProps = ResourceProps.builder()\n        .parent(resource)\n        .pathPart(\"pathPart\")\n\n        // the properties below are optional\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar authorizer authorizer\nvar integration integration\nvar model model\nvar requestValidator requestValidator\nvar resource resource\n\nresourceProps := &ResourceProps{\n\tParent: resource,\n\tPathPart: jsii.String(\"pathPart\"),\n\n\t// the properties below are optional\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tDisableCache: jsii.Boolean(false),\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tStatusCode: jsii.Number(123),\n\t},\n\tDefaultIntegration: integration,\n\tDefaultMethodOptions: &MethodOptions{\n\t\tApiKeyRequired: jsii.Boolean(false),\n\t\tAuthorizationScopes: []*string{\n\t\t\tjsii.String(\"authorizationScopes\"),\n\t\t},\n\t\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\t\tAuthorizer: authorizer,\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\t\"responseModelsKey\": model,\n\t\t\t\t},\n\t\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tOperationName: jsii.String(\"operationName\"),\n\t\tRequestModels: map[string]*iModel{\n\t\t\t\"requestModelsKey\": model,\n\t\t},\n\t\tRequestParameters: map[string]*bool{\n\t\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t\t},\n\t\tRequestValidator: requestValidator,\n\t\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\t\tValidateRequestBody: jsii.Boolean(false),\n\t\t\tValidateRequestParameters: jsii.Boolean(false),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\nconst resourceProps: apigateway.ResourceProps = {\n  parent: resource,\n  pathPart: 'pathPart',\n\n  // the properties below are optional\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ResourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.IResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/aws-apigateway.ResourceProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceProps: apigateway.ResourceProps = {\n  parent: resource,\n  pathPart: 'pathPart',\n\n  // the properties below are optional\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":11,"75":65,"91":7,"130":5,"153":6,"169":6,"192":6,"193":9,"194":4,"196":1,"225":6,"242":6,"243":6,"254":2,"255":2,"256":2,"281":33,"290":1},"fqnsFingerprint":"b6a74fda9ae4b65ede8f9d07d0a6f00e283c57ca7785116696ed3fd486950b58"},"2af8c7d9d8f15c0e73eed1acdf23693ae890822ce467823bd2f33638f941431a":{"translations":{"python":{"source":"api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)","version":"2"},"csharp":{"source":"var api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});","version":"1"},"java":{"source":"RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());","version":"1"},"go":{"source":"api := apigateway.NewRestApi(this, jsii.String(\"books-api\"))\napi.AddGatewayResponse(jsii.String(\"test-response\"), &GatewayResponseOptions{\n\tType: apigateway.ResponseType_ACCESS_DENIED(),\n\tStatusCode: jsii.String(\"500\"),\n\tResponseHeaders: map[string]*string{\n\t\t\"Access-Control-Allow-Origin\": jsii.String(\"test.com\"),\n\t\t\"test-key\": jsii.String(\"test-value\"),\n\t},\n\tTemplates: map[string]*string{\n\t\t\"application/json\": jsii.String(\"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"),\n\t},\n})","version":"1"},"$":{"source":"const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ResponseType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.GatewayResponseOptions","@aws-cdk/aws-apigateway.ResponseType","@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":9,"75":12,"104":1,"193":3,"194":4,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":7},"fqnsFingerprint":"5d6f7cf981188a35fc89c19ccbd12bbd47497f628a63ce08102ba48362fcee72"},"538d045c78d94d79250f8016b2d6427b3d4aa73d1d7787c3f7c751388ba1a8e7":{"translations":{"python":{"source":"state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS,\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))","version":"2"},"csharp":{"source":"var stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    StateMachineType = StateMachineType.EXPRESS,\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nvar api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));","version":"1"},"java":{"source":"StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .stateMachineType(StateMachineType.EXPRESS)\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));","version":"1"},"go":{"source":"stateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n\tDefinition: stepfunctions.Chain_Start(stepfunctions.NewPass(this, jsii.String(\"Pass\"))),\n})\n\napi := apigateway.NewRestApi(this, jsii.String(\"Api\"), &RestApiProps{\n\tRestApiName: jsii.String(\"MyApi\"),\n})\napi.Root.AddMethod(jsii.String(\"GET\"), apigateway.StepFunctionsIntegration_StartExecution(stateMachine))","version":"1"},"$":{"source":"   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApi"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StepFunctionsIntegration","@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":24,"104":3,"193":2,"194":11,"196":3,"197":3,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"956d1d48f3adc41f839dee7549a709c5d61564f7c0427b48a1246777c42d2d25"},"f33e9f5d7fa21bced6b4dcbf86d828af67f35f7607f5b2153972afb1a0eb50bf":{"translations":{"python":{"source":"from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        var restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        var petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        var booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        var api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        var method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        var api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        var method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        var deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());","version":"1"},"java":{"source":"import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\nimport \"github.com/aws-samples/dummy/lib\"\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\ntype rootStack struct {\n\tstack\n}\n\nfunc newRootStack(scope construct) *rootStack {\n\tthis := &rootStack{}\n\tnewStack_Override(this, scope, jsii.String(\"integ-restapi-import-RootStack\"))\n\n\trestApi := lib.NewRestApi(this, jsii.String(\"RestApi\"), &RestApiProps{\n\t\tDeploy: jsii.Boolean(false),\n\t})\n\trestApi.Root.AddMethod(jsii.String(\"ANY\"))\n\n\tpetsStack := NewPetsStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.RestApiId,\n\t\trootResourceId: restApi.RestApiRootResourceId,\n\t})\n\tbooksStack := NewBooksStack(this, &resourceNestedStackProps{\n\t\trestApiId: restApi.*RestApiId,\n\t\trootResourceId: restApi.*RestApiRootResourceId,\n\t})\n\tNewDeployStack(this, &deployStackProps{\n\t\trestApiId: restApi.*RestApiId,\n\t\tmethods: petsStack.methods.concat(booksStack.methods),\n\t})\n\n\tawscdkcore.NewCfnOutput(this, jsii.String(\"PetsURL\"), &CfnOutputProps{\n\t\tValue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/pets\", restApi.*RestApiId, this.Region),\n\t})\n\n\tawscdkcore.NewCfnOutput(this, jsii.String(\"BooksURL\"), &CfnOutputProps{\n\t\tValue: fmt.Sprintf(\"https://%v.execute-api.%v.amazonaws.com/prod/books\", restApi.*RestApiId, this.*Region),\n\t})\n\treturn this\n}\n\ntype resourceNestedStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\trootResourceId *string\n}\n\ntype petsStack struct {\n\tnestedStack\n\tmethods []method\n}\n\nfunc newPetsStack(scope construct, props resourceNestedStackProps) *petsStack {\n\tthis := &petsStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-PetsStack\"), props)\n\n\tapi := lib.RestApi_FromRestApiAttributes(this, jsii.String(\"RestApi\"), &RestApiAttributes{\n\t\tRestApiId: props.restApiId,\n\t\tRootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.Root.AddResource(jsii.String(\"pets\")).AddMethod(jsii.String(\"GET\"), lib.NewMockIntegration(&IntegrationOptions{\n\t\tIntegrationResponses: []integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &MethodOptions{\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype booksStack struct {\n\tnestedStack\n\tmethods []*method\n}\n\nfunc newBooksStack(scope construct, props resourceNestedStackProps) *booksStack {\n\tthis := &booksStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-BooksStack\"), props)\n\n\tapi := lib.RestApi_FromRestApiAttributes(this, jsii.String(\"RestApi\"), &RestApiAttributes{\n\t\tRestApiId: props.restApiId,\n\t\tRootResourceId: props.rootResourceId,\n\t})\n\n\tmethod := api.Root.AddResource(jsii.String(\"books\")).AddMethod(jsii.String(\"GET\"), lib.NewMockIntegration(&IntegrationOptions{\n\t\tIntegrationResponses: []*integrationResponse{\n\t\t\t&integrationResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t\tPassthroughBehavior: *lib.PassthroughBehavior_NEVER,\n\t\tRequestTemplates: map[string]*string{\n\t\t\t\"application/json\": jsii.String(\"{ \\\"statusCode\\\": 200 }\"),\n\t\t},\n\t}), &MethodOptions{\n\t\tMethodResponses: []*methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"200\"),\n\t\t\t},\n\t\t},\n\t})\n\n\tthis.methods.push(method)\n\treturn this\n}\n\ntype deployStackProps struct {\n\tnestedStackProps\n\trestApiId *string\n\tmethods []*method\n}\n\ntype deployStack struct {\n\tnestedStack\n}\n\nfunc newDeployStack(scope construct, props deployStackProps) *deployStack {\n\tthis := &deployStack{}\n\tnewNestedStack_Override(this, scope, jsii.String(\"integ-restapi-import-DeployStack\"), props)\n\n\tdeployment := lib.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\t\tApi: *lib.RestApi_FromRestApiId(this, jsii.String(\"RestApi\"), props.restApiId),\n\t})\n\tif *props.methods {\n\t\tfor _, method := range *props.methods {\n\t\t\tdeployment.Node.AddDependency(method)\n\t\t}\n\t}\n\tlib.NewStage(this, jsii.String(\"Stage\"), &StageProps{\n\t\tDeployment: Deployment,\n\t})\n\treturn this\n}\n\nNewRootStack(awscdkcore.NewApp())","version":"1"},"$":{"source":"import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApiAttributes"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.IRestApi#root","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.MockIntegration","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes","@aws-cdk/aws-apigateway.RestApi#fromRestApiId","@aws-cdk/aws-apigateway.RestApi#restApiId","@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiAttributes","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/core.App","@aws-cdk/core.CfnOutput","@aws-cdk/core.CfnOutputProps","@aws-cdk/core.Construct#node","@aws-cdk/core.ConstructNode#addDependency","@aws-cdk/core.IDependable","@aws-cdk/core.NestedStack","@aws-cdk/core.NestedStackProps","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());","syntaxKindCounter":{"10":28,"15":2,"16":2,"17":2,"57":1,"75":168,"91":1,"102":4,"104":15,"119":2,"138":6,"143":3,"156":7,"158":4,"159":2,"162":4,"169":10,"174":3,"192":6,"193":20,"194":38,"196":16,"197":12,"211":2,"216":6,"221":4,"223":6,"225":8,"226":13,"227":1,"232":1,"242":9,"243":9,"245":4,"246":2,"254":3,"255":3,"257":3,"258":12,"279":6,"281":28,"282":1,"290":1},"fqnsFingerprint":"07fb54b20acc392c7ce60026a9769a12ea2ddcc1b6c5dd78678df872d6efdc81"},"1107602ebe6ff9f4c97bc7e221cb2553c23227f2cb532753912b5087743f8945":{"translations":{"python":{"source":"import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api: apigateway.RestApi\n# hosted_zone_for_example_com: Any\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsroute53\"\nimport targets \"github.com/aws-samples/dummy/awscdkawsroute53targets\"\n\nvar api restApi\nvar hostedZoneForExampleCom interface{}\n\n\nroute53.NewARecord(this, jsii.String(\"CustomDomainAliasRecord\"), &ARecordProps{\n\tZone: hostedZoneForExampleCom,\n\tTarget: route53.RecordTarget_FromAlias(targets.NewApiGateway(api)),\n})","version":"1"},"$":{"source":"import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApiBase"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.RestApiBase","@aws-cdk/aws-route53-targets.ApiGateway","@aws-cdk/aws-route53.ARecord","@aws-cdk/aws-route53.ARecordProps","@aws-cdk/aws-route53.IAliasRecordTarget","@aws-cdk/aws-route53.IHostedZone","@aws-cdk/aws-route53.RecordTarget","@aws-cdk/aws-route53.RecordTarget#fromAlias","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"125":1,"130":2,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":2,"281":2,"290":1},"fqnsFingerprint":"6cf3a5e149b9bdc925df4b816cf116f10b4a2b4f6c0fc7af8597849a9cfa8928"},"09cd00081771fb7f88e5b506771d13f920d5d0abc7a4863856f03fb01e464cce":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# access_log_destination: apigateway.IAccessLogDestination\n# access_log_format: apigateway.AccessLogFormat\n# bucket: s3.Bucket\n# certificate: certificatemanager.Certificate\n# policy_document: iam.PolicyDocument\n\nrest_api_base_props = apigateway.RestApiBaseProps(\n    cloud_watch_role=False,\n    deploy=False,\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=access_log_destination,\n        access_log_format=access_log_format,\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl=cdk.Duration.minutes(30),\n        caching_enabled=False,\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=apigateway.MethodLoggingLevel.OFF,\n        method_options={\n            \"method_options_key\": apigateway.MethodDeploymentOptions(\n                cache_data_encrypted=False,\n                cache_ttl=cdk.Duration.minutes(30),\n                caching_enabled=False,\n                data_trace_enabled=False,\n                logging_level=apigateway.MethodLoggingLevel.OFF,\n                metrics_enabled=False,\n                throttling_burst_limit=123,\n                throttling_rate_limit=123\n            )\n        },\n        metrics_enabled=False,\n        stage_name=\"stageName\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    disable_execute_api_endpoint=False,\n    domain_name=apigateway.DomainNameOptions(\n        certificate=certificate,\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        base_path=\"basePath\",\n        endpoint_type=apigateway.EndpointType.EDGE,\n        mtls=apigateway.MTLSConfig(\n            bucket=bucket,\n            key=\"key\",\n\n            # the properties below are optional\n            version=\"version\"\n        ),\n        security_policy=apigateway.SecurityPolicy.TLS_1_0\n    ),\n    endpoint_export_name=\"endpointExportName\",\n    endpoint_types=[apigateway.EndpointType.EDGE],\n    fail_on_warnings=False,\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy_document,\n    rest_api_name=\"restApiName\",\n    retain_deployments=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nBucket bucket;\nCertificate certificate;\nPolicyDocument policyDocument;\nvar restApiBaseProps = new RestApiBaseProps {\n    CloudWatchRole = false,\n    Deploy = false,\n    DeployOptions = new StageOptions {\n        AccessLogDestination = accessLogDestination,\n        AccessLogFormat = accessLogFormat,\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtl = Duration.Minutes(30),\n        CachingEnabled = false,\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = MethodLoggingLevel.OFF,\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"methodOptionsKey\", new MethodDeploymentOptions {\n                CacheDataEncrypted = false,\n                CacheTtl = Duration.Minutes(30),\n                CachingEnabled = false,\n                DataTraceEnabled = false,\n                LoggingLevel = MethodLoggingLevel.OFF,\n                MetricsEnabled = false,\n                ThrottlingBurstLimit = 123,\n                ThrottlingRateLimit = 123\n            } }\n        },\n        MetricsEnabled = false,\n        StageName = \"stageName\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    DisableExecuteApiEndpoint = false,\n    DomainName = new DomainNameOptions {\n        Certificate = certificate,\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        BasePath = \"basePath\",\n        EndpointType = EndpointType.EDGE,\n        Mtls = new MTLSConfig {\n            Bucket = bucket,\n            Key = \"key\",\n\n            // the properties below are optional\n            Version = \"version\"\n        },\n        SecurityPolicy = SecurityPolicy.TLS_1_0\n    },\n    EndpointExportName = \"endpointExportName\",\n    EndpointTypes = new [] { EndpointType.EDGE },\n    FailOnWarnings = false,\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policyDocument,\n    RestApiName = \"restApiName\",\n    RetainDeployments = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nBucket bucket;\nCertificate certificate;\nPolicyDocument policyDocument;\n\nRestApiBaseProps restApiBaseProps = RestApiBaseProps.builder()\n        .cloudWatchRole(false)\n        .deploy(false)\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(accessLogDestination)\n                .accessLogFormat(accessLogFormat)\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtl(Duration.minutes(30))\n                .cachingEnabled(false)\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(MethodLoggingLevel.OFF)\n                .methodOptions(Map.of(\n                        \"methodOptionsKey\", MethodDeploymentOptions.builder()\n                                .cacheDataEncrypted(false)\n                                .cacheTtl(Duration.minutes(30))\n                                .cachingEnabled(false)\n                                .dataTraceEnabled(false)\n                                .loggingLevel(MethodLoggingLevel.OFF)\n                                .metricsEnabled(false)\n                                .throttlingBurstLimit(123)\n                                .throttlingRateLimit(123)\n                                .build()))\n                .metricsEnabled(false)\n                .stageName(\"stageName\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .disableExecuteApiEndpoint(false)\n        .domainName(DomainNameOptions.builder()\n                .certificate(certificate)\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .basePath(\"basePath\")\n                .endpointType(EndpointType.EDGE)\n                .mtls(MTLSConfig.builder()\n                        .bucket(bucket)\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .version(\"version\")\n                        .build())\n                .securityPolicy(SecurityPolicy.TLS_1_0)\n                .build())\n        .endpointExportName(\"endpointExportName\")\n        .endpointTypes(List.of(EndpointType.EDGE))\n        .failOnWarnings(false)\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policyDocument)\n        .restApiName(\"restApiName\")\n        .retainDeployments(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport s3 \"github.com/aws-samples/dummy/awscdkawss3\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar accessLogDestination iAccessLogDestination\nvar accessLogFormat accessLogFormat\nvar bucket bucket\nvar certificate certificate\nvar policyDocument policyDocument\n\nrestApiBaseProps := &RestApiBaseProps{\n\tCloudWatchRole: jsii.Boolean(false),\n\tDeploy: jsii.Boolean(false),\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: accessLogDestination,\n\t\tAccessLogFormat: accessLogFormat,\n\t\tCacheClusterEnabled: jsii.Boolean(false),\n\t\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\tCacheTtl: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tCachingEnabled: jsii.Boolean(false),\n\t\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDescription: jsii.String(\"description\"),\n\t\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\t\tLoggingLevel: apigateway.MethodLoggingLevel_OFF,\n\t\tMethodOptions: map[string]methodDeploymentOptions{\n\t\t\t\"methodOptionsKey\": &methodDeploymentOptions{\n\t\t\t\t\"cacheDataEncrypted\": jsii.Boolean(false),\n\t\t\t\t\"cacheTtl\": cdk.Duration_*Minutes(jsii.Number(30)),\n\t\t\t\t\"cachingEnabled\": jsii.Boolean(false),\n\t\t\t\t\"dataTraceEnabled\": jsii.Boolean(false),\n\t\t\t\t\"loggingLevel\": apigateway.MethodLoggingLevel_OFF,\n\t\t\t\t\"metricsEnabled\": jsii.Boolean(false),\n\t\t\t\t\"throttlingBurstLimit\": jsii.Number(123),\n\t\t\t\t\"throttlingRateLimit\": jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tMetricsEnabled: jsii.Boolean(false),\n\t\tStageName: jsii.String(\"stageName\"),\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t\tTracingEnabled: jsii.Boolean(false),\n\t\tVariables: map[string]*string{\n\t\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t\t},\n\t},\n\tDisableExecuteApiEndpoint: jsii.Boolean(false),\n\tDomainName: &DomainNameOptions{\n\t\tCertificate: certificate,\n\t\tDomainName: jsii.String(\"domainName\"),\n\n\t\t// the properties below are optional\n\t\tBasePath: jsii.String(\"basePath\"),\n\t\tEndpointType: apigateway.EndpointType_EDGE,\n\t\tMtls: &MTLSConfig{\n\t\t\tBucket: bucket,\n\t\t\tKey: jsii.String(\"key\"),\n\n\t\t\t// the properties below are optional\n\t\t\tVersion: jsii.String(\"version\"),\n\t\t},\n\t\tSecurityPolicy: apigateway.SecurityPolicy_TLS_1_0,\n\t},\n\tEndpointExportName: jsii.String(\"endpointExportName\"),\n\tEndpointTypes: []endpointType{\n\t\tapigateway.*endpointType_EDGE,\n\t},\n\tFailOnWarnings: jsii.Boolean(false),\n\tParameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\tPolicy: policyDocument,\n\tRestApiName: jsii.String(\"restApiName\"),\n\tRetainDeployments: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const policyDocument: iam.PolicyDocument;\nconst restApiBaseProps: apigateway.RestApiBaseProps = {\n  cloudWatchRole: false,\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApiBaseProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.DomainNameOptions","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-apigateway.MethodDeploymentOptions","@aws-cdk/aws-apigateway.MethodLoggingLevel","@aws-cdk/aws-apigateway.MethodLoggingLevel#OFF","@aws-cdk/aws-apigateway.RestApiBaseProps","@aws-cdk/aws-apigateway.SecurityPolicy","@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_0","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-iam.PolicyDocument","@aws-cdk/aws-s3.IBucket","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const policyDocument: iam.PolicyDocument;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst restApiBaseProps: apigateway.RestApiBaseProps = {\n  cloudWatchRole: false,\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":6,"10":18,"75":100,"91":15,"130":5,"153":6,"169":6,"192":1,"193":8,"194":14,"196":2,"225":6,"242":6,"243":6,"254":5,"255":5,"256":5,"281":51,"290":1},"fqnsFingerprint":"9061d61361b13ed98a70a3df6b4a91d295ae418cbb4603f8c14a51d55ecf98db"},"7e6199360fc0d9ea58387ebcc373bfe1e7b702999777b7d40cc559251f0bd12d":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\n\n# access_log_destination: apigateway.IAccessLogDestination\n# access_log_format: apigateway.AccessLogFormat\n# authorizer: apigateway.Authorizer\n# bucket: s3.Bucket\n# certificate: certificatemanager.Certificate\n# integration: apigateway.Integration\n# model: apigateway.Model\n# policy_document: iam.PolicyDocument\n# request_validator: apigateway.RequestValidator\n\nrest_api_options = apigateway.RestApiOptions(\n    cloud_watch_role=False,\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"allowOrigins\"],\n\n        # the properties below are optional\n        allow_credentials=False,\n        allow_headers=[\"allowHeaders\"],\n        allow_methods=[\"allowMethods\"],\n        disable_cache=False,\n        expose_headers=[\"exposeHeaders\"],\n        max_age=cdk.Duration.minutes(30),\n        status_code=123\n    ),\n    default_integration=integration,\n    default_method_options=apigateway.MethodOptions(\n        api_key_required=False,\n        authorization_scopes=[\"authorizationScopes\"],\n        authorization_type=apigateway.AuthorizationType.NONE,\n        authorizer=authorizer,\n        method_responses=[apigateway.MethodResponse(\n            status_code=\"statusCode\",\n\n            # the properties below are optional\n            response_models={\n                \"response_models_key\": model\n            },\n            response_parameters={\n                \"response_parameters_key\": False\n            }\n        )],\n        operation_name=\"operationName\",\n        request_models={\n            \"request_models_key\": model\n        },\n        request_parameters={\n            \"request_parameters_key\": False\n        },\n        request_validator=request_validator,\n        request_validator_options=apigateway.RequestValidatorOptions(\n            request_validator_name=\"requestValidatorName\",\n            validate_request_body=False,\n            validate_request_parameters=False\n        )\n    ),\n    deploy=False,\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=access_log_destination,\n        access_log_format=access_log_format,\n        cache_cluster_enabled=False,\n        cache_cluster_size=\"cacheClusterSize\",\n        cache_data_encrypted=False,\n        cache_ttl=cdk.Duration.minutes(30),\n        caching_enabled=False,\n        client_certificate_id=\"clientCertificateId\",\n        data_trace_enabled=False,\n        description=\"description\",\n        documentation_version=\"documentationVersion\",\n        logging_level=apigateway.MethodLoggingLevel.OFF,\n        method_options={\n            \"method_options_key\": apigateway.MethodDeploymentOptions(\n                cache_data_encrypted=False,\n                cache_ttl=cdk.Duration.minutes(30),\n                caching_enabled=False,\n                data_trace_enabled=False,\n                logging_level=apigateway.MethodLoggingLevel.OFF,\n                metrics_enabled=False,\n                throttling_burst_limit=123,\n                throttling_rate_limit=123\n            )\n        },\n        metrics_enabled=False,\n        stage_name=\"stageName\",\n        throttling_burst_limit=123,\n        throttling_rate_limit=123,\n        tracing_enabled=False,\n        variables={\n            \"variables_key\": \"variables\"\n        }\n    ),\n    disable_execute_api_endpoint=False,\n    domain_name=apigateway.DomainNameOptions(\n        certificate=certificate,\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        base_path=\"basePath\",\n        endpoint_type=apigateway.EndpointType.EDGE,\n        mtls=apigateway.MTLSConfig(\n            bucket=bucket,\n            key=\"key\",\n\n            # the properties below are optional\n            version=\"version\"\n        ),\n        security_policy=apigateway.SecurityPolicy.TLS_1_0\n    ),\n    endpoint_export_name=\"endpointExportName\",\n    endpoint_types=[apigateway.EndpointType.EDGE],\n    fail_on_warnings=False,\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n    policy=policy_document,\n    rest_api_name=\"restApiName\",\n    retain_deployments=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nAuthorizer authorizer;\nBucket bucket;\nCertificate certificate;\nIntegration integration;\nModel model;\nPolicyDocument policyDocument;\nRequestValidator requestValidator;\nvar restApiOptions = new RestApiOptions {\n    CloudWatchRole = false,\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"allowOrigins\" },\n\n        // the properties below are optional\n        AllowCredentials = false,\n        AllowHeaders = new [] { \"allowHeaders\" },\n        AllowMethods = new [] { \"allowMethods\" },\n        DisableCache = false,\n        ExposeHeaders = new [] { \"exposeHeaders\" },\n        MaxAge = Duration.Minutes(30),\n        StatusCode = 123\n    },\n    DefaultIntegration = integration,\n    DefaultMethodOptions = new MethodOptions {\n        ApiKeyRequired = false,\n        AuthorizationScopes = new [] { \"authorizationScopes\" },\n        AuthorizationType = AuthorizationType.NONE,\n        Authorizer = authorizer,\n        MethodResponses = new [] { new MethodResponse {\n            StatusCode = \"statusCode\",\n\n            // the properties below are optional\n            ResponseModels = new Dictionary<string, IModel> {\n                { \"responseModelsKey\", model }\n            },\n            ResponseParameters = new Dictionary<string, boolean> {\n                { \"responseParametersKey\", false }\n            }\n        } },\n        OperationName = \"operationName\",\n        RequestModels = new Dictionary<string, IModel> {\n            { \"requestModelsKey\", model }\n        },\n        RequestParameters = new Dictionary<string, boolean> {\n            { \"requestParametersKey\", false }\n        },\n        RequestValidator = requestValidator,\n        RequestValidatorOptions = new RequestValidatorOptions {\n            RequestValidatorName = \"requestValidatorName\",\n            ValidateRequestBody = false,\n            ValidateRequestParameters = false\n        }\n    },\n    Deploy = false,\n    DeployOptions = new StageOptions {\n        AccessLogDestination = accessLogDestination,\n        AccessLogFormat = accessLogFormat,\n        CacheClusterEnabled = false,\n        CacheClusterSize = \"cacheClusterSize\",\n        CacheDataEncrypted = false,\n        CacheTtl = Duration.Minutes(30),\n        CachingEnabled = false,\n        ClientCertificateId = \"clientCertificateId\",\n        DataTraceEnabled = false,\n        Description = \"description\",\n        DocumentationVersion = \"documentationVersion\",\n        LoggingLevel = MethodLoggingLevel.OFF,\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"methodOptionsKey\", new MethodDeploymentOptions {\n                CacheDataEncrypted = false,\n                CacheTtl = Duration.Minutes(30),\n                CachingEnabled = false,\n                DataTraceEnabled = false,\n                LoggingLevel = MethodLoggingLevel.OFF,\n                MetricsEnabled = false,\n                ThrottlingBurstLimit = 123,\n                ThrottlingRateLimit = 123\n            } }\n        },\n        MetricsEnabled = false,\n        StageName = \"stageName\",\n        ThrottlingBurstLimit = 123,\n        ThrottlingRateLimit = 123,\n        TracingEnabled = false,\n        Variables = new Dictionary<string, string> {\n            { \"variablesKey\", \"variables\" }\n        }\n    },\n    DisableExecuteApiEndpoint = false,\n    DomainName = new DomainNameOptions {\n        Certificate = certificate,\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        BasePath = \"basePath\",\n        EndpointType = EndpointType.EDGE,\n        Mtls = new MTLSConfig {\n            Bucket = bucket,\n            Key = \"key\",\n\n            // the properties below are optional\n            Version = \"version\"\n        },\n        SecurityPolicy = SecurityPolicy.TLS_1_0\n    },\n    EndpointExportName = \"endpointExportName\",\n    EndpointTypes = new [] { EndpointType.EDGE },\n    FailOnWarnings = false,\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n    Policy = policyDocument,\n    RestApiName = \"restApiName\",\n    RetainDeployments = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\n\nIAccessLogDestination accessLogDestination;\nAccessLogFormat accessLogFormat;\nAuthorizer authorizer;\nBucket bucket;\nCertificate certificate;\nIntegration integration;\nModel model;\nPolicyDocument policyDocument;\nRequestValidator requestValidator;\n\nRestApiOptions restApiOptions = RestApiOptions.builder()\n        .cloudWatchRole(false)\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"allowOrigins\"))\n\n                // the properties below are optional\n                .allowCredentials(false)\n                .allowHeaders(List.of(\"allowHeaders\"))\n                .allowMethods(List.of(\"allowMethods\"))\n                .disableCache(false)\n                .exposeHeaders(List.of(\"exposeHeaders\"))\n                .maxAge(Duration.minutes(30))\n                .statusCode(123)\n                .build())\n        .defaultIntegration(integration)\n        .defaultMethodOptions(MethodOptions.builder()\n                .apiKeyRequired(false)\n                .authorizationScopes(List.of(\"authorizationScopes\"))\n                .authorizationType(AuthorizationType.NONE)\n                .authorizer(authorizer)\n                .methodResponses(List.of(MethodResponse.builder()\n                        .statusCode(\"statusCode\")\n\n                        // the properties below are optional\n                        .responseModels(Map.of(\n                                \"responseModelsKey\", model))\n                        .responseParameters(Map.of(\n                                \"responseParametersKey\", false))\n                        .build()))\n                .operationName(\"operationName\")\n                .requestModels(Map.of(\n                        \"requestModelsKey\", model))\n                .requestParameters(Map.of(\n                        \"requestParametersKey\", false))\n                .requestValidator(requestValidator)\n                .requestValidatorOptions(RequestValidatorOptions.builder()\n                        .requestValidatorName(\"requestValidatorName\")\n                        .validateRequestBody(false)\n                        .validateRequestParameters(false)\n                        .build())\n                .build())\n        .deploy(false)\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(accessLogDestination)\n                .accessLogFormat(accessLogFormat)\n                .cacheClusterEnabled(false)\n                .cacheClusterSize(\"cacheClusterSize\")\n                .cacheDataEncrypted(false)\n                .cacheTtl(Duration.minutes(30))\n                .cachingEnabled(false)\n                .clientCertificateId(\"clientCertificateId\")\n                .dataTraceEnabled(false)\n                .description(\"description\")\n                .documentationVersion(\"documentationVersion\")\n                .loggingLevel(MethodLoggingLevel.OFF)\n                .methodOptions(Map.of(\n                        \"methodOptionsKey\", MethodDeploymentOptions.builder()\n                                .cacheDataEncrypted(false)\n                                .cacheTtl(Duration.minutes(30))\n                                .cachingEnabled(false)\n                                .dataTraceEnabled(false)\n                                .loggingLevel(MethodLoggingLevel.OFF)\n                                .metricsEnabled(false)\n                                .throttlingBurstLimit(123)\n                                .throttlingRateLimit(123)\n                                .build()))\n                .metricsEnabled(false)\n                .stageName(\"stageName\")\n                .throttlingBurstLimit(123)\n                .throttlingRateLimit(123)\n                .tracingEnabled(false)\n                .variables(Map.of(\n                        \"variablesKey\", \"variables\"))\n                .build())\n        .disableExecuteApiEndpoint(false)\n        .domainName(DomainNameOptions.builder()\n                .certificate(certificate)\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .basePath(\"basePath\")\n                .endpointType(EndpointType.EDGE)\n                .mtls(MTLSConfig.builder()\n                        .bucket(bucket)\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .version(\"version\")\n                        .build())\n                .securityPolicy(SecurityPolicy.TLS_1_0)\n                .build())\n        .endpointExportName(\"endpointExportName\")\n        .endpointTypes(List.of(EndpointType.EDGE))\n        .failOnWarnings(false)\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n        .policy(policyDocument)\n        .restApiName(\"restApiName\")\n        .retainDeployments(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport s3 \"github.com/aws-samples/dummy/awscdkawss3\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar accessLogDestination iAccessLogDestination\nvar accessLogFormat accessLogFormat\nvar authorizer authorizer\nvar bucket bucket\nvar certificate certificate\nvar integration integration\nvar model model\nvar policyDocument policyDocument\nvar requestValidator requestValidator\n\nrestApiOptions := &RestApiOptions{\n\tCloudWatchRole: jsii.Boolean(false),\n\tDefaultCorsPreflightOptions: &CorsOptions{\n\t\tAllowOrigins: []*string{\n\t\t\tjsii.String(\"allowOrigins\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tAllowCredentials: jsii.Boolean(false),\n\t\tAllowHeaders: []*string{\n\t\t\tjsii.String(\"allowHeaders\"),\n\t\t},\n\t\tAllowMethods: []*string{\n\t\t\tjsii.String(\"allowMethods\"),\n\t\t},\n\t\tDisableCache: jsii.Boolean(false),\n\t\tExposeHeaders: []*string{\n\t\t\tjsii.String(\"exposeHeaders\"),\n\t\t},\n\t\tMaxAge: cdk.Duration_Minutes(jsii.Number(30)),\n\t\tStatusCode: jsii.Number(123),\n\t},\n\tDefaultIntegration: integration,\n\tDefaultMethodOptions: &MethodOptions{\n\t\tApiKeyRequired: jsii.Boolean(false),\n\t\tAuthorizationScopes: []*string{\n\t\t\tjsii.String(\"authorizationScopes\"),\n\t\t},\n\t\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\t\tAuthorizer: authorizer,\n\t\tMethodResponses: []methodResponse{\n\t\t\t&methodResponse{\n\t\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\t\"responseModelsKey\": model,\n\t\t\t\t},\n\t\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tOperationName: jsii.String(\"operationName\"),\n\t\tRequestModels: map[string]*iModel{\n\t\t\t\"requestModelsKey\": model,\n\t\t},\n\t\tRequestParameters: map[string]*bool{\n\t\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t\t},\n\t\tRequestValidator: requestValidator,\n\t\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\t\tValidateRequestBody: jsii.Boolean(false),\n\t\t\tValidateRequestParameters: jsii.Boolean(false),\n\t\t},\n\t},\n\tDeploy: jsii.Boolean(false),\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: accessLogDestination,\n\t\tAccessLogFormat: accessLogFormat,\n\t\tCacheClusterEnabled: jsii.Boolean(false),\n\t\tCacheClusterSize: jsii.String(\"cacheClusterSize\"),\n\t\tCacheDataEncrypted: jsii.Boolean(false),\n\t\tCacheTtl: cdk.Duration_*Minutes(jsii.Number(30)),\n\t\tCachingEnabled: jsii.Boolean(false),\n\t\tClientCertificateId: jsii.String(\"clientCertificateId\"),\n\t\tDataTraceEnabled: jsii.Boolean(false),\n\t\tDescription: jsii.String(\"description\"),\n\t\tDocumentationVersion: jsii.String(\"documentationVersion\"),\n\t\tLoggingLevel: apigateway.MethodLoggingLevel_OFF,\n\t\tMethodOptions: map[string]methodDeploymentOptions{\n\t\t\t\"methodOptionsKey\": &methodDeploymentOptions{\n\t\t\t\t\"cacheDataEncrypted\": jsii.Boolean(false),\n\t\t\t\t\"cacheTtl\": cdk.Duration_*Minutes(jsii.Number(30)),\n\t\t\t\t\"cachingEnabled\": jsii.Boolean(false),\n\t\t\t\t\"dataTraceEnabled\": jsii.Boolean(false),\n\t\t\t\t\"loggingLevel\": apigateway.MethodLoggingLevel_OFF,\n\t\t\t\t\"metricsEnabled\": jsii.Boolean(false),\n\t\t\t\t\"throttlingBurstLimit\": jsii.Number(123),\n\t\t\t\t\"throttlingRateLimit\": jsii.Number(123),\n\t\t\t},\n\t\t},\n\t\tMetricsEnabled: jsii.Boolean(false),\n\t\tStageName: jsii.String(\"stageName\"),\n\t\tThrottlingBurstLimit: jsii.Number(123),\n\t\tThrottlingRateLimit: jsii.Number(123),\n\t\tTracingEnabled: jsii.Boolean(false),\n\t\tVariables: map[string]*string{\n\t\t\t\"variablesKey\": jsii.String(\"variables\"),\n\t\t},\n\t},\n\tDisableExecuteApiEndpoint: jsii.Boolean(false),\n\tDomainName: &DomainNameOptions{\n\t\tCertificate: certificate,\n\t\tDomainName: jsii.String(\"domainName\"),\n\n\t\t// the properties below are optional\n\t\tBasePath: jsii.String(\"basePath\"),\n\t\tEndpointType: apigateway.EndpointType_EDGE,\n\t\tMtls: &MTLSConfig{\n\t\t\tBucket: bucket,\n\t\t\tKey: jsii.String(\"key\"),\n\n\t\t\t// the properties below are optional\n\t\t\tVersion: jsii.String(\"version\"),\n\t\t},\n\t\tSecurityPolicy: apigateway.SecurityPolicy_TLS_1_0,\n\t},\n\tEndpointExportName: jsii.String(\"endpointExportName\"),\n\tEndpointTypes: []endpointType{\n\t\tapigateway.*endpointType_EDGE,\n\t},\n\tFailOnWarnings: jsii.Boolean(false),\n\tParameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\tPolicy: policyDocument,\n\tRestApiName: jsii.String(\"restApiName\"),\n\tRetainDeployments: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const policyDocument: iam.PolicyDocument;\ndeclare const requestValidator: apigateway.RequestValidator;\nconst restApiOptions: apigateway.RestApiOptions = {\n  cloudWatchRole: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApiOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.CorsOptions","@aws-cdk/aws-apigateway.DomainNameOptions","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MTLSConfig","@aws-cdk/aws-apigateway.MethodDeploymentOptions","@aws-cdk/aws-apigateway.MethodLoggingLevel","@aws-cdk/aws-apigateway.MethodLoggingLevel#OFF","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/aws-apigateway.RestApiOptions","@aws-cdk/aws-apigateway.SecurityPolicy","@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_0","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-iam.PolicyDocument","@aws-cdk/aws-s3.IBucket","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const accessLogDestination: apigateway.IAccessLogDestination;\ndeclare const accessLogFormat: apigateway.AccessLogFormat;\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const bucket: s3.Bucket;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const integration: apigateway.Integration;\ndeclare const model: apigateway.Model;\ndeclare const policyDocument: iam.PolicyDocument;\ndeclare const requestValidator: apigateway.RequestValidator;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst restApiOptions: apigateway.RestApiOptions = {\n  cloudWatchRole: false,\n  defaultCorsPreflightOptions: {\n    allowOrigins: ['allowOrigins'],\n\n    // the properties below are optional\n    allowCredentials: false,\n    allowHeaders: ['allowHeaders'],\n    allowMethods: ['allowMethods'],\n    disableCache: false,\n    exposeHeaders: ['exposeHeaders'],\n    maxAge: cdk.Duration.minutes(30),\n    statusCode: 123,\n  },\n  defaultIntegration: integration,\n  defaultMethodOptions: {\n    apiKeyRequired: false,\n    authorizationScopes: ['authorizationScopes'],\n    authorizationType: apigateway.AuthorizationType.NONE,\n    authorizer: authorizer,\n    methodResponses: [{\n      statusCode: 'statusCode',\n\n      // the properties below are optional\n      responseModels: {\n        responseModelsKey: model,\n      },\n      responseParameters: {\n        responseParametersKey: false,\n      },\n    }],\n    operationName: 'operationName',\n    requestModels: {\n      requestModelsKey: model,\n    },\n    requestParameters: {\n      requestParametersKey: false,\n    },\n    requestValidator: requestValidator,\n    requestValidatorOptions: {\n      requestValidatorName: 'requestValidatorName',\n      validateRequestBody: false,\n      validateRequestParameters: false,\n    },\n  },\n  deploy: false,\n  deployOptions: {\n    accessLogDestination: accessLogDestination,\n    accessLogFormat: accessLogFormat,\n    cacheClusterEnabled: false,\n    cacheClusterSize: 'cacheClusterSize',\n    cacheDataEncrypted: false,\n    cacheTtl: cdk.Duration.minutes(30),\n    cachingEnabled: false,\n    clientCertificateId: 'clientCertificateId',\n    dataTraceEnabled: false,\n    description: 'description',\n    documentationVersion: 'documentationVersion',\n    loggingLevel: apigateway.MethodLoggingLevel.OFF,\n    methodOptions: {\n      methodOptionsKey: {\n        cacheDataEncrypted: false,\n        cacheTtl: cdk.Duration.minutes(30),\n        cachingEnabled: false,\n        dataTraceEnabled: false,\n        loggingLevel: apigateway.MethodLoggingLevel.OFF,\n        metricsEnabled: false,\n        throttlingBurstLimit: 123,\n        throttlingRateLimit: 123,\n      },\n    },\n    metricsEnabled: false,\n    stageName: 'stageName',\n    throttlingBurstLimit: 123,\n    throttlingRateLimit: 123,\n    tracingEnabled: false,\n    variables: {\n      variablesKey: 'variables',\n    },\n  },\n  disableExecuteApiEndpoint: false,\n  domainName: {\n    certificate: certificate,\n    domainName: 'domainName',\n\n    // the properties below are optional\n    basePath: 'basePath',\n    endpointType: apigateway.EndpointType.EDGE,\n    mtls: {\n      bucket: bucket,\n      key: 'key',\n\n      // the properties below are optional\n      version: 'version',\n    },\n    securityPolicy: apigateway.SecurityPolicy.TLS_1_0,\n  },\n  endpointExportName: 'endpointExportName',\n  endpointTypes: [apigateway.EndpointType.EDGE],\n  failOnWarnings: false,\n  parameters: {\n    parametersKey: 'parameters',\n  },\n  policy: policyDocument,\n  restApiName: 'restApiName',\n  retainDeployments: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":8,"10":26,"75":154,"91":22,"130":9,"153":10,"169":10,"192":7,"193":16,"194":18,"196":3,"225":10,"242":10,"243":10,"254":5,"255":5,"256":5,"281":82,"290":1},"fqnsFingerprint":"4c59e8fe28c60e5e46affefda50be323592af37d73a705bf750bcc00f9da5294"},"18468eb6f67f838f89ce85672c1e0cb3d7f7b13de72046c6fde7bfa7a59a047e":{"translations":{"python":{"source":"state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS,\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))","version":"2"},"csharp":{"source":"var stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    StateMachineType = StateMachineType.EXPRESS,\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nvar api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));","version":"1"},"java":{"source":"StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .stateMachineType(StateMachineType.EXPRESS)\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));","version":"1"},"go":{"source":"stateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n\tDefinition: stepfunctions.Chain_Start(stepfunctions.NewPass(this, jsii.String(\"Pass\"))),\n})\n\napi := apigateway.NewRestApi(this, jsii.String(\"Api\"), &RestApiProps{\n\tRestApiName: jsii.String(\"MyApi\"),\n})\napi.Root.AddMethod(jsii.String(\"GET\"), apigateway.StepFunctionsIntegration_StartExecution(stateMachine))","version":"1"},"$":{"source":"   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.RestApiProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StepFunctionsIntegration","@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":24,"104":3,"193":2,"194":11,"196":3,"197":3,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"956d1d48f3adc41f839dee7549a709c5d61564f7c0427b48a1246777c42d2d25"},"959d906e83fc9a360698ba9073ac861db2fcf8aec367952da02bb4e3cafd016a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n\ns3_api_definition = apigateway.S3ApiDefinition(bucket, \"key\", \"objectVersion\")","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\n\nvar s3ApiDefinition = new S3ApiDefinition(bucket, \"key\", \"objectVersion\");","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\n\nS3ApiDefinition s3ApiDefinition = new S3ApiDefinition(bucket, \"key\", \"objectVersion\");","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport s3 \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar bucket bucket\n\ns3ApiDefinition := apigateway.NewS3ApiDefinition(bucket, jsii.String(\"key\"), jsii.String(\"objectVersion\"))","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst s3ApiDefinition = new apigateway.S3ApiDefinition(bucket, 'key', /* all optional props */ 'objectVersion');","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.S3ApiDefinition"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.S3ApiDefinition","@aws-cdk/aws-s3.IBucket"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3ApiDefinition = new apigateway.S3ApiDefinition(bucket, 'key', /* all optional props */ 'objectVersion');\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":9,"130":1,"153":1,"169":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":2,"255":2,"256":2,"290":1},"fqnsFingerprint":"4ae78103c47a531b2347c06782030f2457d36d20cf3f1448e27e5c3e0c9d5503"},"bae159868bb68bb3c2e976e0ce805b3e65d0be925e689feadf9d28f19eac63a0":{"translations":{"python":{"source":"# acm_certificate_for_example_com: Any\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)","version":"2"},"csharp":{"source":"var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});","version":"1"},"java":{"source":"Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();","version":"1"},"go":{"source":"var acmCertificateForExampleCom interface{}\n\n\napigateway.NewDomainName(this, jsii.String(\"custom-domain\"), &DomainNameProps{\n\tDomainName: jsii.String(\"example.com\"),\n\tCertificate: acmCertificateForExampleCom,\n\tEndpointType: apigateway.EndpointType_EDGE,\n\t // default is REGIONAL\n\tSecurityPolicy: apigateway.SecurityPolicy_TLS_1_2,\n})","version":"1"},"$":{"source":"declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.SecurityPolicy"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.DomainName","@aws-cdk/aws-apigateway.DomainNameProps","@aws-cdk/aws-apigateway.EndpointType","@aws-cdk/aws-apigateway.EndpointType#EDGE","@aws-cdk/aws-apigateway.SecurityPolicy","@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2","@aws-cdk/aws-certificatemanager.ICertificate","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":14,"104":1,"125":1,"130":1,"193":1,"194":5,"197":1,"225":1,"226":1,"242":1,"243":1,"281":4,"290":1},"fqnsFingerprint":"41c35e3046b2372e1dc73840601b90080a28eeaf55dc4f418ae7806ac8413fa2"},"7bca4c087ee2b4b147ad066ba7b9c1477dc8ce15c3cc546afbd15bcedc2df7c9":{"translations":{"python":{"source":"# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)","version":"2"},"csharp":{"source":"Integration integration;\n\n\nvar api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nvar booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);","version":"1"},"java":{"source":"Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);","version":"1"},"go":{"source":"var integration integration\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"books-api\"), &SpecRestApiProps{\n\tApiDefinition: apigateway.ApiDefinition_FromAsset(jsii.String(\"path-to-file.json\")),\n})\n\nbooksResource := api.Root.AddResource(jsii.String(\"books\"))\nbooksResource.AddMethod(jsii.String(\"GET\"), integration)","version":"1"},"$":{"source":"declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.SpecRestApi"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.ApiDefinition#fromAsset","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApi#root","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":6,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":1,"290":1},"fqnsFingerprint":"1aa22506f232ee0e53811950ecc4a67fb89a0d4598513e0dea0a06694530f647"},"a5377509139877dd8941ec48e6b6a449c42d82d716e9defb513d85c791a9d45c":{"translations":{"python":{"source":"# integration: apigateway.Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)","version":"2"},"csharp":{"source":"Integration integration;\n\n\nvar api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nvar booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);","version":"1"},"java":{"source":"Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);","version":"1"},"go":{"source":"var integration integration\n\n\napi := apigateway.NewSpecRestApi(this, jsii.String(\"books-api\"), &SpecRestApiProps{\n\tApiDefinition: apigateway.ApiDefinition_FromAsset(jsii.String(\"path-to-file.json\")),\n})\n\nbooksResource := api.Root.AddResource(jsii.String(\"books\"))\nbooksResource.AddMethod(jsii.String(\"GET\"), integration)","version":"1"},"$":{"source":"declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.SpecRestApiProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ApiDefinition","@aws-cdk/aws-apigateway.ApiDefinition#fromAsset","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.SpecRestApi","@aws-cdk/aws-apigateway.SpecRestApi#root","@aws-cdk/aws-apigateway.SpecRestApiProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":6,"196":3,"197":1,"225":3,"226":1,"242":3,"243":3,"281":1,"290":1},"fqnsFingerprint":"1aa22506f232ee0e53811950ecc4a67fb89a0d4598513e0dea0a06694530f647"},"6ab98a29ef356da11431465f89e48580f488584b961296d163ff0c05f195cc46":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.Stage"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"b66004d18581dffbef74f16743e261b727d7aff66f5a421baec270bd60330846":{"translations":{"python":{"source":"log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)","version":"2"},"csharp":{"source":"var logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});","version":"1"},"java":{"source":"LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();","version":"1"},"go":{"source":"logGroup := logs.NewLogGroup(this, jsii.String(\"ApiGatewayAccessLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(logGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_Clf(),\n\t},\n})","version":"1"},"$":{"source":"const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StageOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#clf","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":15,"104":2,"193":2,"194":5,"196":1,"197":3,"225":2,"242":2,"243":2,"281":3},"fqnsFingerprint":"fc517f657df29f360c32d978580636dc3b5a2ad77b59eb8a886a4d77700f275d"},"63f6bbdda6761293f6d601a58b9dfcc77a534034938bdac9298e706f790ee8c2":{"translations":{"python":{"source":"# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)","version":"2"},"csharp":{"source":"// production stage\nvar prdLogGroup = new LogGroup(this, \"PrdLogs\");\nvar api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nvar deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nvar devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});","version":"1"},"java":{"source":"// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();","version":"1"},"go":{"source":"// production stage\nprdLogGroup := logs.NewLogGroup(this, jsii.String(\"PrdLogs\"))\napi := apigateway.NewRestApi(this, jsii.String(\"books\"), &RestApiProps{\n\tDeployOptions: &StageOptions{\n\t\tAccessLogDestination: apigateway.NewLogGroupLogDestination(prdLogGroup),\n\t\tAccessLogFormat: apigateway.AccessLogFormat_JsonWithStandardFields(),\n\t},\n})\ndeployment := apigateway.NewDeployment(this, jsii.String(\"Deployment\"), &DeploymentProps{\n\tApi: Api,\n})\n\n// development stage\ndevLogGroup := logs.NewLogGroup(this, jsii.String(\"DevLogs\"))\napigateway.NewStage(this, jsii.String(\"dev\"), &StageProps{\n\tDeployment: Deployment,\n\tAccessLogDestination: apigateway.NewLogGroupLogDestination(devLogGroup),\n\tAccessLogFormat: apigateway.AccessLogFormat_*JsonWithStandardFields(&JsonWithStandardFieldProps{\n\t\tCaller: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(true),\n\t\tIp: jsii.Boolean(true),\n\t\tProtocol: jsii.Boolean(true),\n\t\tRequestTime: jsii.Boolean(true),\n\t\tResourcePath: jsii.Boolean(true),\n\t\tResponseLength: jsii.Boolean(true),\n\t\tStatus: jsii.Boolean(true),\n\t\tUser: jsii.Boolean(true),\n\t}),\n})","version":"1"},"$":{"source":"// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StageProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AccessLogFormat","@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields","@aws-cdk/aws-apigateway.Deployment","@aws-cdk/aws-apigateway.DeploymentProps","@aws-cdk/aws-apigateway.IAccessLogDestination","@aws-cdk/aws-apigateway.IRestApi","@aws-cdk/aws-apigateway.JsonWithStandardFieldProps","@aws-cdk/aws-apigateway.LogGroupLogDestination","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.StageOptions","@aws-cdk/aws-apigateway.StageProps","@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":42,"91":1,"104":5,"106":8,"193":5,"194":11,"196":2,"197":7,"225":4,"226":1,"242":4,"243":4,"281":14,"282":2},"fqnsFingerprint":"939065582521180e45ec0ec3239736c1d23d524b7958609b19b0687be953848d"},"a0a9d655139ed72609065c2af701ddf7fa53b600989fc8c38a40f2e41feb4731":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# role: iam.Role\n# vpc_link: apigateway.VpcLink\n\nstep_functions_execution_integration_options = apigateway.StepFunctionsExecutionIntegrationOptions(\n    authorizer=False,\n    cache_key_parameters=[\"cacheKeyParameters\"],\n    cache_namespace=\"cacheNamespace\",\n    connection_type=apigateway.ConnectionType.INTERNET,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n    credentials_passthrough=False,\n    credentials_role=role,\n    headers=False,\n    integration_responses=[apigateway.IntegrationResponse(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        content_handling=apigateway.ContentHandling.CONVERT_TO_BINARY,\n        response_parameters={\n            \"response_parameters_key\": \"responseParameters\"\n        },\n        response_templates={\n            \"response_templates_key\": \"responseTemplates\"\n        },\n        selection_pattern=\"selectionPattern\"\n    )],\n    passthrough_behavior=apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        account_id=False,\n        api_id=False,\n        api_key=False,\n        authorizer_principal_id=False,\n        caller=False,\n        cognito_authentication_provider=False,\n        cognito_authentication_type=False,\n        cognito_identity_id=False,\n        cognito_identity_pool_id=False,\n        http_method=False,\n        request_id=False,\n        resource_id=False,\n        resource_path=False,\n        source_ip=False,\n        stage=False,\n        user=False,\n        user_agent=False,\n        user_arn=False\n    ),\n    request_parameters={\n        \"request_parameters_key\": \"requestParameters\"\n    },\n    request_templates={\n        \"request_templates_key\": \"requestTemplates\"\n    },\n    timeout=cdk.Duration.minutes(30),\n    vpc_link=vpc_link\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nRole role;\nVpcLink vpcLink;\nvar stepFunctionsExecutionIntegrationOptions = new StepFunctionsExecutionIntegrationOptions {\n    Authorizer = false,\n    CacheKeyParameters = new [] { \"cacheKeyParameters\" },\n    CacheNamespace = \"cacheNamespace\",\n    ConnectionType = ConnectionType.INTERNET,\n    ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n    CredentialsPassthrough = false,\n    CredentialsRole = role,\n    Headers = false,\n    IntegrationResponses = new [] { new IntegrationResponse {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ContentHandling = ContentHandling.CONVERT_TO_BINARY,\n        ResponseParameters = new Dictionary<string, string> {\n            { \"responseParametersKey\", \"responseParameters\" }\n        },\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"responseTemplatesKey\", \"responseTemplates\" }\n        },\n        SelectionPattern = \"selectionPattern\"\n    } },\n    PassthroughBehavior = PassthroughBehavior.WHEN_NO_MATCH,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        AccountId = false,\n        ApiId = false,\n        ApiKey = false,\n        AuthorizerPrincipalId = false,\n        Caller = false,\n        CognitoAuthenticationProvider = false,\n        CognitoAuthenticationType = false,\n        CognitoIdentityId = false,\n        CognitoIdentityPoolId = false,\n        HttpMethod = false,\n        RequestId = false,\n        ResourceId = false,\n        ResourcePath = false,\n        SourceIp = false,\n        Stage = false,\n        User = false,\n        UserAgent = false,\n        UserArn = false\n    },\n    RequestParameters = new Dictionary<string, string> {\n        { \"requestParametersKey\", \"requestParameters\" }\n    },\n    RequestTemplates = new Dictionary<string, string> {\n        { \"requestTemplatesKey\", \"requestTemplates\" }\n    },\n    Timeout = Duration.Minutes(30),\n    VpcLink = vpcLink\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nRole role;\nVpcLink vpcLink;\n\nStepFunctionsExecutionIntegrationOptions stepFunctionsExecutionIntegrationOptions = StepFunctionsExecutionIntegrationOptions.builder()\n        .authorizer(false)\n        .cacheKeyParameters(List.of(\"cacheKeyParameters\"))\n        .cacheNamespace(\"cacheNamespace\")\n        .connectionType(ConnectionType.INTERNET)\n        .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n        .credentialsPassthrough(false)\n        .credentialsRole(role)\n        .headers(false)\n        .integrationResponses(List.of(IntegrationResponse.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .contentHandling(ContentHandling.CONVERT_TO_BINARY)\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", \"responseParameters\"))\n                .responseTemplates(Map.of(\n                        \"responseTemplatesKey\", \"responseTemplates\"))\n                .selectionPattern(\"selectionPattern\")\n                .build()))\n        .passthroughBehavior(PassthroughBehavior.WHEN_NO_MATCH)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .accountId(false)\n                .apiId(false)\n                .apiKey(false)\n                .authorizerPrincipalId(false)\n                .caller(false)\n                .cognitoAuthenticationProvider(false)\n                .cognitoAuthenticationType(false)\n                .cognitoIdentityId(false)\n                .cognitoIdentityPoolId(false)\n                .httpMethod(false)\n                .requestId(false)\n                .resourceId(false)\n                .resourcePath(false)\n                .sourceIp(false)\n                .stage(false)\n                .user(false)\n                .userAgent(false)\n                .userArn(false)\n                .build())\n        .requestParameters(Map.of(\n                \"requestParametersKey\", \"requestParameters\"))\n        .requestTemplates(Map.of(\n                \"requestTemplatesKey\", \"requestTemplates\"))\n        .timeout(Duration.minutes(30))\n        .vpcLink(vpcLink)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar role role\nvar vpcLink vpcLink\n\nstepFunctionsExecutionIntegrationOptions := &StepFunctionsExecutionIntegrationOptions{\n\tAuthorizer: jsii.Boolean(false),\n\tCacheKeyParameters: []*string{\n\t\tjsii.String(\"cacheKeyParameters\"),\n\t},\n\tCacheNamespace: jsii.String(\"cacheNamespace\"),\n\tConnectionType: apigateway.ConnectionType_INTERNET,\n\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\tCredentialsPassthrough: jsii.Boolean(false),\n\tCredentialsRole: role,\n\tHeaders: jsii.Boolean(false),\n\tIntegrationResponses: []integrationResponse{\n\t\t&integrationResponse{\n\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t// the properties below are optional\n\t\t\tContentHandling: apigateway.ContentHandling_CONVERT_TO_BINARY,\n\t\t\tResponseParameters: map[string]*string{\n\t\t\t\t\"responseParametersKey\": jsii.String(\"responseParameters\"),\n\t\t\t},\n\t\t\tResponseTemplates: map[string]*string{\n\t\t\t\t\"responseTemplatesKey\": jsii.String(\"responseTemplates\"),\n\t\t\t},\n\t\t\tSelectionPattern: jsii.String(\"selectionPattern\"),\n\t\t},\n\t},\n\tPassthroughBehavior: apigateway.PassthroughBehavior_WHEN_NO_MATCH,\n\tPath: jsii.Boolean(false),\n\tQuerystring: jsii.Boolean(false),\n\tRequestContext: &RequestContext{\n\t\tAccountId: jsii.Boolean(false),\n\t\tApiId: jsii.Boolean(false),\n\t\tApiKey: jsii.Boolean(false),\n\t\tAuthorizerPrincipalId: jsii.Boolean(false),\n\t\tCaller: jsii.Boolean(false),\n\t\tCognitoAuthenticationProvider: jsii.Boolean(false),\n\t\tCognitoAuthenticationType: jsii.Boolean(false),\n\t\tCognitoIdentityId: jsii.Boolean(false),\n\t\tCognitoIdentityPoolId: jsii.Boolean(false),\n\t\tHttpMethod: jsii.Boolean(false),\n\t\tRequestId: jsii.Boolean(false),\n\t\tResourceId: jsii.Boolean(false),\n\t\tResourcePath: jsii.Boolean(false),\n\t\tSourceIp: jsii.Boolean(false),\n\t\tStage: jsii.Boolean(false),\n\t\tUser: jsii.Boolean(false),\n\t\tUserAgent: jsii.Boolean(false),\n\t\tUserArn: jsii.Boolean(false),\n\t},\n\tRequestParameters: map[string]*string{\n\t\t\"requestParametersKey\": jsii.String(\"requestParameters\"),\n\t},\n\tRequestTemplates: map[string]*string{\n\t\t\"requestTemplatesKey\": jsii.String(\"requestTemplates\"),\n\t},\n\tTimeout: cdk.Duration_Minutes(jsii.Number(30)),\n\tVpcLink: vpcLink,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\nconst stepFunctionsExecutionIntegrationOptions: apigateway.StepFunctionsExecutionIntegrationOptions = {\n  authorizer: false,\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionType: apigateway.ConnectionType.INTERNET,\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  credentialsPassthrough: false,\n  credentialsRole: role,\n  headers: false,\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n  path: false,\n  querystring: false,\n  requestContext: {\n    accountId: false,\n    apiId: false,\n    apiKey: false,\n    authorizerPrincipalId: false,\n    caller: false,\n    cognitoAuthenticationProvider: false,\n    cognitoAuthenticationType: false,\n    cognitoIdentityId: false,\n    cognitoIdentityPoolId: false,\n    httpMethod: false,\n    requestId: false,\n    resourceId: false,\n    resourcePath: false,\n    sourceIp: false,\n    stage: false,\n    user: false,\n    userAgent: false,\n    userArn: false,\n  },\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpcLink: vpcLink,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StepFunctionsExecutionIntegrationOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#INTERNET","@aws-cdk/aws-apigateway.ContentHandling","@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_BINARY","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.PassthroughBehavior","@aws-cdk/aws-apigateway.PassthroughBehavior#WHEN_NO_MATCH","@aws-cdk/aws-apigateway.RequestContext","@aws-cdk/aws-apigateway.StepFunctionsExecutionIntegrationOptions","@aws-cdk/aws-iam.IRole","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const role: iam.Role;\ndeclare const vpcLink: apigateway.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stepFunctionsExecutionIntegrationOptions: apigateway.StepFunctionsExecutionIntegrationOptions = {\n  authorizer: false,\n  cacheKeyParameters: ['cacheKeyParameters'],\n  cacheNamespace: 'cacheNamespace',\n  connectionType: apigateway.ConnectionType.INTERNET,\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n  credentialsPassthrough: false,\n  credentialsRole: role,\n  headers: false,\n  integrationResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    contentHandling: apigateway.ContentHandling.CONVERT_TO_BINARY,\n    responseParameters: {\n      responseParametersKey: 'responseParameters',\n    },\n    responseTemplates: {\n      responseTemplatesKey: 'responseTemplates',\n    },\n    selectionPattern: 'selectionPattern',\n  }],\n  passthroughBehavior: apigateway.PassthroughBehavior.WHEN_NO_MATCH,\n  path: false,\n  querystring: false,\n  requestContext: {\n    accountId: false,\n    apiId: false,\n    apiKey: false,\n    authorizerPrincipalId: false,\n    caller: false,\n    cognitoAuthenticationProvider: false,\n    cognitoAuthenticationType: false,\n    cognitoIdentityId: false,\n    cognitoIdentityPoolId: false,\n    httpMethod: false,\n    requestId: false,\n    resourceId: false,\n    resourcePath: false,\n    sourceIp: false,\n    stage: false,\n    user: false,\n    userAgent: false,\n    userArn: false,\n  },\n  requestParameters: {\n    requestParametersKey: 'requestParameters',\n  },\n  requestTemplates: {\n    requestTemplatesKey: 'requestTemplates',\n  },\n  timeout: cdk.Duration.minutes(30),\n  vpcLink: vpcLink,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":11,"75":73,"91":23,"130":2,"153":3,"169":3,"192":2,"193":7,"194":10,"196":1,"225":3,"242":3,"243":3,"254":3,"255":3,"256":3,"281":44,"290":1},"fqnsFingerprint":"aea1e818c59987ed2cb1266bf002629fa4d724d2ba287de9dcc1d8635118cc32"},"9abf0a7c0096eaea944ef842d6e6e8ba8f4ae366031863dd80aabfa837f8de4a":{"translations":{"python":{"source":"state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS,\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))","version":"2"},"csharp":{"source":"var stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    StateMachineType = StateMachineType.EXPRESS,\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nvar api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));","version":"1"},"java":{"source":"StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .stateMachineType(StateMachineType.EXPRESS)\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));","version":"1"},"go":{"source":"stateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n\tDefinition: stepfunctions.Chain_Start(stepfunctions.NewPass(this, jsii.String(\"Pass\"))),\n})\n\napi := apigateway.NewRestApi(this, jsii.String(\"Api\"), &RestApiProps{\n\tRestApiName: jsii.String(\"MyApi\"),\n})\napi.Root.AddMethod(jsii.String(\"GET\"), apigateway.StepFunctionsIntegration_StartExecution(stateMachine))","version":"1"},"$":{"source":"   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StepFunctionsIntegration"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StepFunctionsIntegration","@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":24,"104":3,"193":2,"194":11,"196":3,"197":3,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"956d1d48f3adc41f839dee7549a709c5d61564f7c0427b48a1246777c42d2d25"},"af50e090a32af6e1765aa4b5e72e2f2a9917fb19d3371250310a65ba658e139e":{"translations":{"python":{"source":"state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS,\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))","version":"2"},"csharp":{"source":"var stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    StateMachineType = StateMachineType.EXPRESS,\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nvar api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));","version":"1"},"java":{"source":"StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .stateMachineType(StateMachineType.EXPRESS)\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));","version":"1"},"go":{"source":"stateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n\tDefinition: stepfunctions.Chain_Start(stepfunctions.NewPass(this, jsii.String(\"Pass\"))),\n})\n\napi := apigateway.NewRestApi(this, jsii.String(\"Api\"), &RestApiProps{\n\tRestApiName: jsii.String(\"MyApi\"),\n})\napi.Root.AddMethod(jsii.String(\"GET\"), apigateway.StepFunctionsIntegration_StartExecution(stateMachine))","version":"1"},"$":{"source":"   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-apigateway.StepFunctionsIntegration","memberName":"startExecution"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IResource#addMethod","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiProps","@aws-cdk/aws-apigateway.StepFunctionsIntegration","@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":24,"104":3,"193":2,"194":11,"196":3,"197":3,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"956d1d48f3adc41f839dee7549a709c5d61564f7c0427b48a1246777c42d2d25"},"3af5e9cb25557c8a25345785b022f733e1a0585c2bbb7c80b812278d61f98bed":{"translations":{"python":{"source":"state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)","version":"2"},"csharp":{"source":"var stateMachineDefinition = new Pass(this, \"PassState\");\n\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});","version":"1"},"java":{"source":"Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();","version":"1"},"go":{"source":"stateMachineDefinition := stepfunctions.NewPass(this, jsii.String(\"PassState\"))\n\nstateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: stateMachineDefinition,\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n})\n\napigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tDeploy: jsii.Boolean(true),\n\tStateMachine: stateMachine,\n})","version":"1"},"$":{"source":"const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StepFunctionsRestApi"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":19,"104":3,"106":1,"153":1,"169":1,"193":2,"194":5,"197":3,"225":2,"226":1,"242":2,"243":2,"281":4},"fqnsFingerprint":"ee5c8f5600946c6b561ea2869e1e3b205d70e8931131fc3fbee3a1fcb494fdfa"},"ef287ed8dd4953dce2bd0b7d15ad5590b3200b24c6bc9ca2b673db2efd111bbb":{"translations":{"python":{"source":"state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)","version":"2"},"csharp":{"source":"var stateMachineDefinition = new Pass(this, \"PassState\");\n\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});","version":"1"},"java":{"source":"Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();","version":"1"},"go":{"source":"stateMachineDefinition := stepfunctions.NewPass(this, jsii.String(\"PassState\"))\n\nstateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: stateMachineDefinition,\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n})\n\napigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tDeploy: jsii.Boolean(true),\n\tStateMachine: stateMachine,\n})","version":"1"},"$":{"source":"const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.StepFunctionsRestApiProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":19,"104":3,"106":1,"153":1,"169":1,"193":2,"194":5,"197":3,"225":2,"226":1,"242":2,"243":2,"281":4},"fqnsFingerprint":"ee5c8f5600946c6b561ea2869e1e3b205d70e8931131fc3fbee3a1fcb494fdfa"},"926997ad9016b8244db93f09e23663d985897208c52a3132dcadcf9eb4c38030":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\n\n\nvar api = new RestApi(this, \"hello-api\");\n\nvar v1 = api.Root.AddResource(\"v1\");\nvar echo = v1.AddResource(\"echo\");\nvar echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nvar plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nvar key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);","version":"1"},"java":{"source":"LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);","version":"1"},"go":{"source":"var integration lambdaIntegration\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"))\n\nv1 := api.Root.AddResource(jsii.String(\"v1\"))\necho := v1.AddResource(jsii.String(\"echo\"))\nechoMethod := echo.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(true),\n})\n\nplan := api.AddUsagePlan(jsii.String(\"UsagePlan\"), &UsagePlanProps{\n\tName: jsii.String(\"Easy\"),\n\tThrottle: &ThrottleSettings{\n\t\tRateLimit: jsii.Number(10),\n\t\tBurstLimit: jsii.Number(2),\n\t},\n})\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"))\nplan.addApiKey(key)","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ThrottleSettings"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiBase#addApiKey","@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlanProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":7,"75":31,"104":1,"106":1,"130":1,"153":1,"169":1,"193":3,"194":8,"196":6,"197":1,"225":7,"226":1,"242":7,"243":7,"281":5,"290":1},"fqnsFingerprint":"b5eccba18bba8328a1c6cb6b3407303e7b97dc1db5e0b987c053c629a84c218a"},"424d9c3eab519a836e9114968980eaff1433f9a818045c3a2767a0a1e3e72a4f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\n\n# method: apigateway.Method\n\nthrottling_per_method = apigateway.ThrottlingPerMethod(\n    method=method,\n    throttle=apigateway.ThrottleSettings(\n        burst_limit=123,\n        rate_limit=123\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\n\nMethod method;\n\nvar throttlingPerMethod = new ThrottlingPerMethod {\n    Method = method,\n    Throttle = new ThrottleSettings {\n        BurstLimit = 123,\n        RateLimit = 123\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\n\nMethod method;\n\nThrottlingPerMethod throttlingPerMethod = ThrottlingPerMethod.builder()\n        .method(method)\n        .throttle(ThrottleSettings.builder()\n                .burstLimit(123)\n                .rateLimit(123)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\n\nvar method method\n\nthrottlingPerMethod := &ThrottlingPerMethod{\n\tMethod: method,\n\tThrottle: &ThrottleSettings{\n\t\tBurstLimit: jsii.Number(123),\n\t\tRateLimit: jsii.Number(123),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const method: apigateway.Method;\nconst throttlingPerMethod: apigateway.ThrottlingPerMethod = {\n  method: method,\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.ThrottlingPerMethod"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.ThrottlingPerMethod"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\n\ndeclare const method: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst throttlingPerMethod: apigateway.ThrottlingPerMethod = {\n  method: method,\n  throttle: {\n    burstLimit: 123,\n    rateLimit: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":1,"75":12,"130":1,"153":2,"169":2,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"2d29d606a9ee0bb353d6d0f30bc88f71059952bd16ed30c9c3174d85f3c6a88f"},"2e5877fc79981238745809cfb8b7d899b16a3b0a897b07010744e3fa3fa73d1c":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewTokenAuthorizer(this, jsii.String(\"booksAuthorizer\"), &TokenAuthorizerProps{\n\tHandler: authFn,\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.TokenAuthorizer"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.TokenAuthorizer","@aws-cdk/aws-apigateway.TokenAuthorizerProps","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"130":2,"153":2,"169":2,"193":2,"194":3,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6fd88cb3771eb197ae328df78aeb101e32dea90f0cf06eff8e7ba6ace6efe952"},"6256f69d6f0d1acd02f709b99b64782d57e62d746699e2d75de054e778119102":{"translations":{"python":{"source":"# auth_fn: lambda.Function\n# books: apigateway.Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)","version":"2"},"csharp":{"source":"Function authFn;\nResource books;\n\n\nvar auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});","version":"1"},"java":{"source":"Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());","version":"1"},"go":{"source":"var authFn function\nvar books resource\n\n\nauth := apigateway.NewTokenAuthorizer(this, jsii.String(\"booksAuthorizer\"), &TokenAuthorizerProps{\n\tHandler: authFn,\n})\n\nbooks.AddMethod(jsii.String(\"GET\"), apigateway.NewHttpIntegration(jsii.String(\"http://amazon.com\")), &MethodOptions{\n\tAuthorizer: auth,\n})","version":"1"},"$":{"source":"declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.TokenAuthorizerProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.HttpIntegration","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.TokenAuthorizer","@aws-cdk/aws-apigateway.TokenAuthorizerProps","@aws-cdk/aws-lambda.IFunction","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"130":2,"153":2,"169":2,"193":2,"194":3,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"281":2,"290":1},"fqnsFingerprint":"6fd88cb3771eb197ae328df78aeb101e32dea90f0cf06eff8e7ba6ace6efe952"},"02a22f2b10f6a848b5cee6646b7970c33a9b18c659f34d5eb247ae7100ccf5e2":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\n\n\nvar api = new RestApi(this, \"hello-api\");\n\nvar v1 = api.Root.AddResource(\"v1\");\nvar echo = v1.AddResource(\"echo\");\nvar echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nvar plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nvar key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);","version":"1"},"java":{"source":"LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);","version":"1"},"go":{"source":"var integration lambdaIntegration\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"))\n\nv1 := api.Root.AddResource(jsii.String(\"v1\"))\necho := v1.AddResource(jsii.String(\"echo\"))\nechoMethod := echo.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(true),\n})\n\nplan := api.AddUsagePlan(jsii.String(\"UsagePlan\"), &UsagePlanProps{\n\tName: jsii.String(\"Easy\"),\n\tThrottle: &ThrottleSettings{\n\t\tRateLimit: jsii.Number(10),\n\t\tBurstLimit: jsii.Number(2),\n\t},\n})\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"))\nplan.addApiKey(key)","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.UsagePlan"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiBase#addApiKey","@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlanProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":7,"75":31,"104":1,"106":1,"130":1,"153":1,"169":1,"193":3,"194":8,"196":6,"197":1,"225":7,"226":1,"242":7,"243":7,"281":5,"290":1},"fqnsFingerprint":"b5eccba18bba8328a1c6cb6b3407303e7b97dc1db5e0b987c053c629a84c218a"},"6e1c6762209b1a775d7b9a19397853278f9e0f78e90de7094667c6e8048f8331":{"translations":{"python":{"source":"# plan: apigateway.UsagePlan\n# api: apigateway.RestApi\n# echo_method: apigateway.Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)","version":"2"},"csharp":{"source":"UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});","version":"1"},"java":{"source":"UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());","version":"1"},"go":{"source":"var plan usagePlan\nvar api restApi\nvar echoMethod method\n\n\nplan.AddApiStage(&UsagePlanPerApiStage{\n\tStage: api.DeploymentStage,\n\tThrottle: []throttlingPerMethod{\n\t\t&throttlingPerMethod{\n\t\t\tMethod: echoMethod,\n\t\t\tThrottle: &ThrottleSettings{\n\t\t\t\tRateLimit: jsii.Number(10),\n\t\t\t\tBurstLimit: jsii.Number(2),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.UsagePlanPerApiStage"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.RestApiBase#deploymentStage","@aws-cdk/aws-apigateway.Stage","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan#addApiStage","@aws-cdk/aws-apigateway.UsagePlanPerApiStage"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"75":20,"130":3,"153":3,"169":3,"192":1,"193":3,"194":2,"196":1,"225":3,"226":1,"242":3,"243":3,"281":6,"290":1},"fqnsFingerprint":"c63e0c8318e3ad2c29fbf047d749e888a8c40b8a6c65cbfeba9d83745508e7ee"},"730bb784f82e2a82e9b4231e983591ce3993b5ab72a787d746ae21ecc62e4b62":{"translations":{"python":{"source":"# integration: apigateway.LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)","version":"2"},"csharp":{"source":"LambdaIntegration integration;\n\n\nvar api = new RestApi(this, \"hello-api\");\n\nvar v1 = api.Root.AddResource(\"v1\");\nvar echo = v1.AddResource(\"echo\");\nvar echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nvar plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nvar key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);","version":"1"},"java":{"source":"LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);","version":"1"},"go":{"source":"var integration lambdaIntegration\n\n\napi := apigateway.NewRestApi(this, jsii.String(\"hello-api\"))\n\nv1 := api.Root.AddResource(jsii.String(\"v1\"))\necho := v1.AddResource(jsii.String(\"echo\"))\nechoMethod := echo.AddMethod(jsii.String(\"GET\"), integration, &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(true),\n})\n\nplan := api.AddUsagePlan(jsii.String(\"UsagePlan\"), &UsagePlanProps{\n\tName: jsii.String(\"Easy\"),\n\tThrottle: &ThrottleSettings{\n\t\tRateLimit: jsii.Number(10),\n\t\tBurstLimit: jsii.Number(2),\n\t},\n})\n\nkey := api.AddApiKey(jsii.String(\"ApiKey\"))\nplan.addApiKey(key)","version":"1"},"$":{"source":"declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.UsagePlanProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.IApiKey","@aws-cdk/aws-apigateway.IResource#addResource","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.Method","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.Resource","@aws-cdk/aws-apigateway.ResourceBase#addMethod","@aws-cdk/aws-apigateway.ResourceBase#addResource","@aws-cdk/aws-apigateway.RestApi","@aws-cdk/aws-apigateway.RestApi#root","@aws-cdk/aws-apigateway.RestApiBase#addApiKey","@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan","@aws-cdk/aws-apigateway.ThrottleSettings","@aws-cdk/aws-apigateway.UsagePlan","@aws-cdk/aws-apigateway.UsagePlanProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":7,"75":31,"104":1,"106":1,"130":1,"153":1,"169":1,"193":3,"194":8,"196":6,"197":1,"225":7,"226":1,"242":7,"243":7,"281":5,"290":1},"fqnsFingerprint":"b5eccba18bba8328a1c6cb6b3407303e7b97dc1db5e0b987c053c629a84c218a"},"b932fae1f0d5cfcd091b51372e407cdce1fff0079ec4d808b34b22b98bb84c4b":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.VpcLink"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"},"2bee19bb48189227aa793b17a134808a0a604d46aee1c7e0b2ea43ae8dbf4a69":{"translations":{"python":{"source":"import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nvar vpc = new Vpc(this, \"VPC\");\nvar nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nvar link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nvar integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();","version":"1"},"go":{"source":"import elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nnlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"NLB\"), &NetworkLoadBalancerProps{\n\tVpc: Vpc,\n})\nlink := apigateway.NewVpcLink(this, jsii.String(\"link\"), &VpcLinkProps{\n\tTargets: []iNetworkLoadBalancer{\n\t\tnlb,\n\t},\n})\n\nintegration := apigateway.NewIntegration(&IntegrationProps{\n\tType: apigateway.IntegrationType_HTTP_PROXY,\n\tOptions: &IntegrationOptions{\n\t\tConnectionType: apigateway.ConnectionType_VPC_LINK,\n\t\tVpcLink: link,\n\t},\n})","version":"1"},"$":{"source":"import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-apigateway.VpcLinkProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.ConnectionType","@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK","@aws-cdk/aws-apigateway.IVpcLink","@aws-cdk/aws-apigateway.Integration","@aws-cdk/aws-apigateway.IntegrationOptions","@aws-cdk/aws-apigateway.IntegrationProps","@aws-cdk/aws-apigateway.IntegrationType","@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY","@aws-cdk/aws-apigateway.VpcLink","@aws-cdk/aws-apigateway.VpcLinkProps","@aws-cdk/aws-ec2.IVpc","@aws-cdk/aws-ec2.Vpc","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer","@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":27,"104":3,"192":1,"193":4,"194":8,"197":4,"225":4,"242":4,"243":4,"254":1,"255":1,"256":1,"281":5,"282":1,"290":1},"fqnsFingerprint":"e83ece1dbc8e5c8884d47e098cb9ef940b2c4d70455460db3a6729dcd3001084"}}}