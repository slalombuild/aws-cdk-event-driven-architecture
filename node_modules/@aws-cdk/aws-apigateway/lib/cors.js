"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cors = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const util_1 = require("./util");
class Cors {
    // utility class
    constructor() { }
}
exports.Cors = Cors;
_a = JSII_RTTI_SYMBOL_1;
Cors[_a] = { fqn: "@aws-cdk/aws-apigateway.Cors", version: "1.199.0" };
/**
 * All HTTP methods.
 */
Cors.ALL_METHODS = util_1.ALL_METHODS;
/**
 * All origins.
 */
Cors.ALL_ORIGINS = ['*'];
/**
 * The set of default headers allowed for CORS and useful for API Gateway.
 */
Cors.DEFAULT_HEADERS = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxpQ0FBcUM7QUFnR3JDLE1BQWEsSUFBSTtJQWdCZixnQkFBZ0I7SUFDaEIsaUJBQXlCOztBQWpCM0Isb0JBa0JDOzs7QUFqQkM7O0dBRUc7QUFDb0IsZ0JBQVcsR0FBRyxrQkFBVyxDQUFDO0FBRWpEOztHQUVHO0FBQ29CLGdCQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUUzQzs7R0FFRztBQUNvQixvQkFBZSxHQUFHLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQUxMX01FVEhPRFMgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvcnNPcHRpb25zIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgcmV0dXJuZWQgZnJvbSB0aGUgT1BUSU9OUyBtZXRob2QuXG4gICAqXG4gICAqIEBkZWZhdWx0IDIwNFxuICAgKi9cbiAgcmVhZG9ubHkgc3RhdHVzQ29kZT86IG51bWJlcjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBsaXN0IG9mIG9yaWdpbnMgdGhhdCBhcmUgYWxsb3dlZCB0byBtYWtlIHJlcXVlc3RzIHRvIHRoaXNcbiAgICogcmVzb3VyY2UuIElmIHlvdSB3aXNoIHRvIGFsbG93IGFsbCBvcmlnaW5zLCBzcGVjaWZ5IGBDb3JzLkFMTF9PUklHSU5TYCBvclxuICAgKiBgWyAqIF1gLlxuICAgKlxuICAgKiBSZXNwb25zZXMgd2lsbCBpbmNsdWRlIHRoZSBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luYCByZXNwb25zZSBoZWFkZXIuXG4gICAqIElmIGBDb3JzLkFMTF9PUklHSU5TYCBpcyBzcGVjaWZpZWQsIHRoZSBgVmFyeTogT3JpZ2luYCByZXNwb25zZSBoZWFkZXIgd2lsbFxuICAgKiBhbHNvIGJlIGluY2x1ZGVkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cbiAgICovXG4gIHJlYWRvbmx5IGFsbG93T3JpZ2luczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzIHJlc3BvbnNlIGhlYWRlciBpcyB1c2VkIGluIHJlc3BvbnNlIHRvIGFcbiAgICogcHJlZmxpZ2h0IHJlcXVlc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIEFjY2Vzcy1Db250cm9sLVJlcXVlc3QtSGVhZGVycyB0b1xuICAgKiBpbmRpY2F0ZSB3aGljaCBIVFRQIGhlYWRlcnMgY2FuIGJlIHVzZWQgZHVyaW5nIHRoZSBhY3R1YWwgcmVxdWVzdC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1xuICAgKiBAZGVmYXVsdCBDb3JzLkRFRkFVTFRfSEVBREVSU1xuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dIZWFkZXJzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzIHJlc3BvbnNlIGhlYWRlciBzcGVjaWZpZXMgdGhlIG1ldGhvZCBvclxuICAgKiBtZXRob2RzIGFsbG93ZWQgd2hlbiBhY2Nlc3NpbmcgdGhlIHJlc291cmNlIGluIHJlc3BvbnNlIHRvIGEgcHJlZmxpZ2h0IHJlcXVlc3QuXG4gICAqXG4gICAqIElmIGBBTllgIGlzIHNwZWNpZmllZCwgaXQgd2lsbCBiZSBleHBhbmRlZCB0byBgQ29ycy5BTExfTUVUSE9EU2AuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcbiAgICogQGRlZmF1bHQgQ29ycy5BTExfTUVUSE9EU1xuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dNZXRob2RzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyByZXNwb25zZSBoZWFkZXIgdGVsbHMgYnJvd3NlcnMgd2hldGhlclxuICAgKiB0byBleHBvc2UgdGhlIHJlc3BvbnNlIHRvIGZyb250ZW5kIEphdmFTY3JpcHQgY29kZSB3aGVuIHRoZSByZXF1ZXN0J3NcbiAgICogY3JlZGVudGlhbHMgbW9kZSAoUmVxdWVzdC5jcmVkZW50aWFscykgaXMgXCJpbmNsdWRlXCIuXG4gICAqXG4gICAqIFdoZW4gYSByZXF1ZXN0J3MgY3JlZGVudGlhbHMgbW9kZSAoUmVxdWVzdC5jcmVkZW50aWFscykgaXMgXCJpbmNsdWRlXCIsXG4gICAqIGJyb3dzZXJzIHdpbGwgb25seSBleHBvc2UgdGhlIHJlc3BvbnNlIHRvIGZyb250ZW5kIEphdmFTY3JpcHQgY29kZSBpZiB0aGVcbiAgICogQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMgdmFsdWUgaXMgdHJ1ZS5cbiAgICpcbiAgICogQ3JlZGVudGlhbHMgYXJlIGNvb2tpZXMsIGF1dGhvcml6YXRpb24gaGVhZGVycyBvciBUTFMgY2xpZW50IGNlcnRpZmljYXRlcy5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHNcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGFsbG93Q3JlZGVudGlhbHM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtTWF4LUFnZSByZXNwb25zZSBoZWFkZXIgaW5kaWNhdGVzIGhvdyBsb25nIHRoZSByZXN1bHRzIG9mXG4gICAqIGEgcHJlZmxpZ2h0IHJlcXVlc3QgKHRoYXQgaXMgdGhlIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBpbiB0aGVcbiAgICogQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyBhbmQgQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyBoZWFkZXJzKVxuICAgKiBjYW4gYmUgY2FjaGVkLlxuICAgKlxuICAgKiBUbyBkaXNhYmxlIGNhY2hpbmcgYWx0b2dldGhlciB1c2UgYGRpc2FibGVDYWNoZTogdHJ1ZWAuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLU1heC1BZ2VcbiAgICogQGRlZmF1bHQgLSBicm93c2VyLXNwZWNpZmljIChzZWUgcmVmZXJlbmNlKVxuICAgKi9cbiAgcmVhZG9ubHkgbWF4QWdlPzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFNldHMgQWNjZXNzLUNvbnRyb2wtTWF4LUFnZSB0byAtMSwgd2hpY2ggbWVhbnMgdGhhdCBjYWNoaW5nIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9wdGlvbiBjYW5ub3QgYmUgdXNlZCB3aXRoIGBtYXhBZ2VgLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGNhY2hlIGlzIGVuYWJsZWRcbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVDYWNoZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVycyByZXNwb25zZSBoZWFkZXIgaW5kaWNhdGVzIHdoaWNoIGhlYWRlcnNcbiAgICogY2FuIGJlIGV4cG9zZWQgYXMgcGFydCBvZiB0aGUgcmVzcG9uc2UgYnkgbGlzdGluZyB0aGVpciBuYW1lcy5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgY2xpZW50cyB0byBiZSBhYmxlIHRvIGFjY2VzcyBvdGhlciBoZWFkZXJzLCB5b3UgaGF2ZSB0byBsaXN0XG4gICAqIHRoZW0gdXNpbmcgdGhlIEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzIGhlYWRlci5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNcbiAgICpcbiAgICogQGRlZmF1bHQgLSBvbmx5IHRoZSA2IENPUlMtc2FmZWxpc3RlZCByZXNwb25zZSBoZWFkZXJzIGFyZSBleHBvc2VkOlxuICAgKiBDYWNoZS1Db250cm9sLCBDb250ZW50LUxhbmd1YWdlLCBDb250ZW50LVR5cGUsIEV4cGlyZXMsIExhc3QtTW9kaWZpZWQsXG4gICAqIFByYWdtYVxuICAgKi9cbiAgcmVhZG9ubHkgZXhwb3NlSGVhZGVycz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgQ29ycyB7XG4gIC8qKlxuICAgKiBBbGwgSFRUUCBtZXRob2RzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTExfTUVUSE9EUyA9IEFMTF9NRVRIT0RTO1xuXG4gIC8qKlxuICAgKiBBbGwgb3JpZ2lucy5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQUxMX09SSUdJTlMgPSBbJyonXTtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBkZWZhdWx0IGhlYWRlcnMgYWxsb3dlZCBmb3IgQ09SUyBhbmQgdXNlZnVsIGZvciBBUEkgR2F0ZXdheS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9IRUFERVJTID0gWydDb250ZW50LVR5cGUnLCAnWC1BbXotRGF0ZScsICdBdXRob3JpemF0aW9uJywgJ1gtQXBpLUtleScsICdYLUFtei1TZWN1cml0eS1Ub2tlbicsICdYLUFtei1Vc2VyLUFnZW50J107XG5cbiAgLy8gdXRpbGl0eSBjbGFzc1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iXX0=