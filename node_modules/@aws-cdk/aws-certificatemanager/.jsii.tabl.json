{"version":"2","toolVersion":"1.80.0","snippets":{"2c32b15f748e28830bb9e5d8f3899cf2be2753227b15a548fcddd4626c68831d":{"translations":{"python":{"source":"my_hosted_zone = route53.HostedZone(self, \"HostedZone\",\n    zone_name=\"example.com\"\n)\nacm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)","version":"2"},"csharp":{"source":"var myHostedZone = new HostedZone(this, \"HostedZone\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nnew Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});","version":"1"},"java":{"source":"HostedZone myHostedZone = HostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"example.com\")\n        .build();\nCertificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();","version":"1"},"go":{"source":"myHostedZone := route53.NewHostedZone(this, jsii.String(\"HostedZone\"), &HostedZoneProps{\n\tZoneName: jsii.String(\"example.com\"),\n})\nacm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromDns(myHostedZone),\n})","version":"1"},"$":{"source":"const myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":42}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns","@aws-cdk/aws-route53.HostedZone","@aws-cdk/aws-route53.HostedZoneProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":12,"104":2,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"765c3f74a450f17a65d57d4294ec62f82933d42e9085b8e630f0e881c23c6c06"},"3358a2b9bd99fbc696c49e03b972e5059cf27112cc4142bd4dd6a466690884af":{"translations":{"python":{"source":"acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns()\n)","version":"2"},"csharp":{"source":"new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns()\n});","version":"1"},"java":{"source":"Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns())\n        .build();","version":"1"},"go":{"source":"acm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromDns(),\n})","version":"1"},"$":{"source":"new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(), // Records must be added manually\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":55}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(), // Records must be added manually\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":2,"75":7,"104":1,"193":1,"194":3,"196":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"6f17fae7afab5f499e16191131aed6ede31a8b844e7654761f8981bc4972915a"},"e11e50b93a415ed94712745ef99bb0b86aa326d2656219083f35f65037199165":{"translations":{"python":{"source":"example_com = route53.HostedZone(self, \"ExampleCom\",\n    zone_name=\"example.com\"\n)\nexample_net = route53.HostedZone(self, \"ExampleNet\",\n    zone_name=\"example.net\"\n)\n\ncert = acm.Certificate(self, \"Certificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],\n    validation=acm.CertificateValidation.from_dns_multi_zone({\n        \"test.example.com\": example_com,\n        \"cool.example.com\": example_com,\n        \"test.example.net\": example_net\n    })\n)","version":"2"},"csharp":{"source":"var exampleCom = new HostedZone(this, \"ExampleCom\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nvar exampleNet = new HostedZone(this, \"ExampleNet\", new HostedZoneProps {\n    ZoneName = \"example.net\"\n});\n\nvar cert = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },\n    Validation = CertificateValidation.FromDnsMultiZone(new Dictionary<string, IHostedZone> {\n        { \"test.example.com\", exampleCom },\n        { \"cool.example.com\", exampleCom },\n        { \"test.example.net\", exampleNet }\n    })\n});","version":"1"},"java":{"source":"HostedZone exampleCom = HostedZone.Builder.create(this, \"ExampleCom\")\n        .zoneName(\"example.com\")\n        .build();\nHostedZone exampleNet = HostedZone.Builder.create(this, \"ExampleNet\")\n        .zoneName(\"example.net\")\n        .build();\n\nCertificate cert = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\"))\n        .validation(CertificateValidation.fromDnsMultiZone(Map.of(\n                \"test.example.com\", exampleCom,\n                \"cool.example.com\", exampleCom,\n                \"test.example.net\", exampleNet)))\n        .build();","version":"1"},"go":{"source":"exampleCom := route53.NewHostedZone(this, jsii.String(\"ExampleCom\"), &HostedZoneProps{\n\tZoneName: jsii.String(\"example.com\"),\n})\nexampleNet := route53.NewHostedZone(this, jsii.String(\"ExampleNet\"), &HostedZoneProps{\n\tZoneName: jsii.String(\"example.net\"),\n})\n\ncert := acm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"test.example.com\"),\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"cool.example.com\"),\n\t\tjsii.String(\"test.example.net\"),\n\t},\n\tValidation: acm.CertificateValidation_FromDnsMultiZone(map[string]iHostedZone{\n\t\t\"test.example.com\": exampleCom,\n\t\t\"cool.example.com\": exampleCom,\n\t\t\"test.example.net\": exampleNet,\n\t}),\n})","version":"1"},"$":{"source":"const exampleCom = new route53.HostedZone(this, 'ExampleCom', {\n  zoneName: 'example.com',\n});\nconst exampleNet = new route53.HostedZone(this, 'ExampleNet', {\n  zoneName: 'example.net',\n});\n\nconst cert = new acm.Certificate(this, 'Certificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'],\n  validation: acm.CertificateValidation.fromDnsMultiZone({\n    'test.example.com': exampleCom,\n    'cool.example.com': exampleCom,\n    'test.example.net': exampleNet,\n  }),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":64}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDnsMultiZone","@aws-cdk/aws-route53.HostedZone","@aws-cdk/aws-route53.HostedZoneProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst exampleCom = new route53.HostedZone(this, 'ExampleCom', {\n  zoneName: 'example.com',\n});\nconst exampleNet = new route53.HostedZone(this, 'ExampleNet', {\n  zoneName: 'example.net',\n});\n\nconst cert = new acm.Certificate(this, 'Certificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'],\n  validation: acm.CertificateValidation.fromDnsMultiZone({\n    'test.example.com': exampleCom,\n    'cool.example.com': exampleCom,\n    'test.example.net': exampleNet,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":11,"75":20,"104":3,"192":1,"193":4,"194":5,"196":1,"197":3,"225":3,"242":3,"243":3,"281":8},"fqnsFingerprint":"3a4ed591c8bbbffd76f1321771eded0c3dd8deaf9a86b11fbedf1e3c1bded01a"},"f4318609f3e0e429d6a40e73a40a59a06ab98df1a19831c9afc849eba078dc2d":{"translations":{"python":{"source":"acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_email()\n)","version":"2"},"csharp":{"source":"new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromEmail()\n});","version":"1"},"java":{"source":"Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromEmail())\n        .build();","version":"1"},"go":{"source":"acm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromEmail(),\n})","version":"1"},"$":{"source":"new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromEmail(), // Optional, this is the default\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":92}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromEmail","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromEmail(), // Optional, this is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":2,"75":7,"104":1,"193":1,"194":3,"196":1,"197":1,"226":1,"281":2},"fqnsFingerprint":"9c1982cb471bf738b3987b34ebe39ba9b234b872c6e4fca25adc76afe1149385"},"1fd40ac315eb423ffbe517346cb315e8226f39194aa7ead0b9feb3e87810ce9b":{"translations":{"python":{"source":"# my_hosted_zone: route53.HostedZone\n\nacm.DnsValidatedCertificate(self, \"CrossRegionCertificate\",\n    domain_name=\"hello.example.com\",\n    hosted_zone=my_hosted_zone,\n    region=\"us-east-1\"\n)","version":"2"},"csharp":{"source":"HostedZone myHostedZone;\n\nnew DnsValidatedCertificate(this, \"CrossRegionCertificate\", new DnsValidatedCertificateProps {\n    DomainName = \"hello.example.com\",\n    HostedZone = myHostedZone,\n    Region = \"us-east-1\"\n});","version":"1"},"java":{"source":"HostedZone myHostedZone;\n\nDnsValidatedCertificate.Builder.create(this, \"CrossRegionCertificate\")\n        .domainName(\"hello.example.com\")\n        .hostedZone(myHostedZone)\n        .region(\"us-east-1\")\n        .build();","version":"1"},"go":{"source":"var myHostedZone hostedZone\n\nacm.NewDnsValidatedCertificate(this, jsii.String(\"CrossRegionCertificate\"), &DnsValidatedCertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tHostedZone: myHostedZone,\n\tRegion: jsii.String(\"us-east-1\"),\n})","version":"1"},"$":{"source":"declare const myHostedZone: route53.HostedZone;\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":105}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.DnsValidatedCertificate","@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":9,"104":1,"130":1,"153":1,"169":1,"193":1,"194":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":3,"290":1},"fqnsFingerprint":"a6b5d569c87654134ee8a13ccf9731ae9dfe64bdd1ebb49de4c04acf4e608cc4"},"31ed82a94f6c572ef9c11a7b34da684e1a5b263b1ed90d24dfddfcaa5ef94d54":{"translations":{"python":{"source":"import aws_cdk.aws_acmpca as acmpca\n\n\nacm.PrivateCertificate(self, \"PrivateCertificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],  # optional\n    certificate_authority=acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ACMPCA;\n\n\nnew PrivateCertificate(this, \"PrivateCertificate\", new PrivateCertificateProps {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },  // optional\n    CertificateAuthority = CertificateAuthority.FromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.acmpca.*;\n\n\nPrivateCertificate.Builder.create(this, \"PrivateCertificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\")) // optional\n        .certificateAuthority(CertificateAuthority.fromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\"))\n        .build();","version":"1"},"go":{"source":"import acmpca \"github.com/aws-samples/dummy/awscdkawsacmpca\"\n\n\nacm.NewPrivateCertificate(this, jsii.String(\"PrivateCertificate\"), &PrivateCertificateProps{\n\tDomainName: jsii.String(\"test.example.com\"),\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"cool.example.com\"),\n\t\tjsii.String(\"test.example.net\"),\n\t},\n\t // optional\n\tCertificateAuthority: acmpca.CertificateAuthority_FromCertificateAuthorityArn(this, jsii.String(\"CA\"), jsii.String(\"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")),\n})","version":"1"},"$":{"source":"import * as acmpca from '@aws-cdk/aws-acmpca';\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":118}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-acmpca.CertificateAuthority","@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn","@aws-cdk/aws-acmpca.ICertificateAuthority","@aws-cdk/aws-certificatemanager.PrivateCertificate","@aws-cdk/aws-certificatemanager.PrivateCertificateProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":7,"75":9,"104":2,"192":1,"193":1,"194":3,"196":1,"197":1,"226":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"35eae00d070d3721e45fdde25deff91c1382e169c9783f502d85e523b848563a"},"d2b0c10b4976db6ac4e1464eb58b2260172f4e4d3bb26219ed68f5793ea7bf79":{"translations":{"python":{"source":"arn = \"arn:aws:...\"\ncertificate = acm.Certificate.from_certificate_arn(self, \"Certificate\", arn)","version":"2"},"csharp":{"source":"var arn = \"arn:aws:...\";\nvar certificate = Certificate.FromCertificateArn(this, \"Certificate\", arn);","version":"1"},"java":{"source":"String arn = \"arn:aws:...\";\nICertificate certificate = Certificate.fromCertificateArn(this, \"Certificate\", arn);","version":"1"},"go":{"source":"arn := \"arn:aws:...\"\ncertificate := acm.Certificate_FromCertificateArn(this, jsii.String(\"Certificate\"), arn)","version":"1"},"$":{"source":"const arn = 'arn:aws:...';\nconst certificate = acm.Certificate.fromCertificateArn(this, 'Certificate', arn);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":133}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn","@aws-cdk/aws-certificatemanager.ICertificate","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst arn = 'arn:aws:...';\nconst certificate = acm.Certificate.fromCertificateArn(this, 'Certificate', arn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":2,"75":6,"104":1,"194":2,"196":1,"225":2,"242":2,"243":2},"fqnsFingerprint":"27d2b9a90292e44ae57b45fc42a68f652f940c3cae08699dcc1b273b2d988d63"},"44e8f8c5b3f03721c0b1081ca4356ca258620c0d008fb554832dc7d98294b9e8":{"translations":{"python":{"source":"import aws_cdk.aws_cloudwatch as cloudwatch\n\n# my_hosted_zone: route53.HostedZone\n\ncertificate = acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)\ncertificate.metric_days_to_expiry().create_alarm(self, \"Alarm\",\n    comparison_operator=cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n    evaluation_periods=1,\n    threshold=45\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.CloudWatch;\n\nHostedZone myHostedZone;\n\nvar certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});\ncertificate.MetricDaysToExpiry().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    ComparisonOperator = ComparisonOperator.LESS_THAN_THRESHOLD,\n    EvaluationPeriods = 1,\n    Threshold = 45\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.cloudwatch.*;\n\nHostedZone myHostedZone;\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();\ncertificate.metricDaysToExpiry().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .comparisonOperator(ComparisonOperator.LESS_THAN_THRESHOLD)\n        .evaluationPeriods(1)\n        .threshold(45)\n        .build());","version":"1"},"go":{"source":"import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar myHostedZone hostedZone\n\ncertificate := acm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromDns(myHostedZone),\n})\ncertificate.metricDaysToExpiry().CreateAlarm(this, jsii.String(\"Alarm\"), &CreateAlarmOptions{\n\tComparisonOperator: cloudwatch.ComparisonOperator_LESS_THAN_THRESHOLD,\n\tEvaluationPeriods: jsii.Number(1),\n\tThreshold: jsii.Number(45),\n})","version":"1"},"$":{"source":"import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-certificatemanager"},"field":{"field":"markdown","line":152}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns","@aws-cdk/aws-cloudwatch.ComparisonOperator","@aws-cdk/aws-cloudwatch.ComparisonOperator#LESS_THAN_THRESHOLD","@aws-cdk/aws-cloudwatch.CreateAlarmOptions","@aws-cdk/aws-cloudwatch.Metric#createAlarm","@aws-cdk/aws-route53.IHostedZone","@aws-cdk/core.Construct","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"8":2,"10":4,"75":22,"104":2,"130":1,"153":1,"169":1,"193":2,"194":7,"196":3,"197":1,"225":2,"226":1,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"319b22bd2b96ffd2da3619fbc531bef48f61c693f9416a6aeacd5c25c53ca069"},"b01df0bfbf3b383d8545d31d7f9b95115c9f4277216d0276cec064ff20cc6f0a":{"translations":{"python":{"source":"pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)","version":"2"},"csharp":{"source":"var pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nvar certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nvar domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});","version":"1"},"java":{"source":"UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());","version":"1"},"go":{"source":"pool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\n\npool.addDomain(jsii.String(\"CognitoDomain\"), &UserPoolDomainOptions{\n\tCognitoDomain: &CognitoDomainOptions{\n\t\tDomainPrefix: jsii.String(\"my-awesome-app\"),\n\t},\n})\n\ncertificateArn := \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomainCert := certificatemanager.Certificate_FromCertificateArn(this, jsii.String(\"domainCert\"), certificateArn)\npool.addDomain(jsii.String(\"CustomDomain\"), &UserPoolDomainOptions{\n\tCustomDomain: &CustomDomainOptions{\n\t\tDomainName: jsii.String(\"user.myapp.com\"),\n\t\tCertificate: domainCert,\n\t},\n})","version":"1"},"$":{"source":"const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.Certificate"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn","@aws-cdk/aws-certificatemanager.ICertificate","@aws-cdk/aws-cognito.CognitoDomainOptions","@aws-cdk/aws-cognito.CustomDomainOptions","@aws-cdk/aws-cognito.UserPool","@aws-cdk/aws-cognito.UserPoolDomainOptions","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":19,"104":2,"193":4,"194":5,"196":3,"197":1,"225":3,"226":2,"242":3,"243":3,"281":5},"fqnsFingerprint":"75d60300c871e090ebbd4766b4e5d7d33c6cc29b91ceabc52545256b86d3e142"},"da88939449b61dcf1c20138863ca065af8f70fd673a645944f71394e82be5142":{"translations":{"python":{"source":"import aws_cdk.aws_cloudwatch as cloudwatch\n\n# my_hosted_zone: route53.HostedZone\n\ncertificate = acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)\ncertificate.metric_days_to_expiry().create_alarm(self, \"Alarm\",\n    comparison_operator=cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n    evaluation_periods=1,\n    threshold=45\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.CloudWatch;\n\nHostedZone myHostedZone;\n\nvar certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});\ncertificate.MetricDaysToExpiry().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    ComparisonOperator = ComparisonOperator.LESS_THAN_THRESHOLD,\n    EvaluationPeriods = 1,\n    Threshold = 45\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.cloudwatch.*;\n\nHostedZone myHostedZone;\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();\ncertificate.metricDaysToExpiry().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .comparisonOperator(ComparisonOperator.LESS_THAN_THRESHOLD)\n        .evaluationPeriods(1)\n        .threshold(45)\n        .build());","version":"1"},"go":{"source":"import cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\n\nvar myHostedZone hostedZone\n\ncertificate := acm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromDns(myHostedZone),\n})\ncertificate.metricDaysToExpiry().CreateAlarm(this, jsii.String(\"Alarm\"), &CreateAlarmOptions{\n\tComparisonOperator: cloudwatch.ComparisonOperator_LESS_THAN_THRESHOLD,\n\tEvaluationPeriods: jsii.Number(1),\n\tThreshold: jsii.Number(45),\n})","version":"1"},"$":{"source":"import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CertificateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns","@aws-cdk/aws-cloudwatch.ComparisonOperator","@aws-cdk/aws-cloudwatch.ComparisonOperator#LESS_THAN_THRESHOLD","@aws-cdk/aws-cloudwatch.CreateAlarmOptions","@aws-cdk/aws-cloudwatch.Metric#createAlarm","@aws-cdk/aws-route53.IHostedZone","@aws-cdk/core.Construct","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certificate = new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\ncertificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"8":2,"10":4,"75":22,"104":2,"130":1,"153":1,"169":1,"193":2,"194":7,"196":3,"197":1,"225":2,"226":1,"242":2,"243":2,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"319b22bd2b96ffd2da3619fbc531bef48f61c693f9416a6aeacd5c25c53ca069"},"0f8fd32e1ee80cbfd5036b3d480b9f5eb83046f86d3bf4f0db6d404a5bd4f0b7":{"translations":{"python":{"source":"my_hosted_zone = route53.HostedZone(self, \"HostedZone\",\n    zone_name=\"example.com\"\n)\nacm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)","version":"2"},"csharp":{"source":"var myHostedZone = new HostedZone(this, \"HostedZone\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nnew Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});","version":"1"},"java":{"source":"HostedZone myHostedZone = HostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"example.com\")\n        .build();\nCertificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();","version":"1"},"go":{"source":"myHostedZone := route53.NewHostedZone(this, jsii.String(\"HostedZone\"), &HostedZoneProps{\n\tZoneName: jsii.String(\"example.com\"),\n})\nacm.NewCertificate(this, jsii.String(\"Certificate\"), &CertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tValidation: acm.CertificateValidation_FromDns(myHostedZone),\n})","version":"1"},"$":{"source":"const myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CertificateValidation"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.Certificate","@aws-cdk/aws-certificatemanager.CertificateProps","@aws-cdk/aws-certificatemanager.CertificateValidation","@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns","@aws-cdk/aws-route53.HostedZone","@aws-cdk/aws-route53.HostedZoneProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":12,"104":2,"193":2,"194":4,"196":1,"197":2,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"765c3f74a450f17a65d57d4294ec62f82933d42e9085b8e630f0e881c23c6c06"},"9a85f38a6a4784f3ca9903429a71061177c416872a41bb8de79942522954610b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone: route53.HostedZone\n\ncertification_validation_props = certificatemanager.CertificationValidationProps(\n    hosted_zone=hosted_zone,\n    hosted_zones={\n        \"hosted_zones_key\": hosted_zone\n    },\n    method=certificatemanager.ValidationMethod.EMAIL,\n    validation_domains={\n        \"validation_domains_key\": \"validationDomains\"\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone hostedZone;\n\nvar certificationValidationProps = new CertificationValidationProps {\n    HostedZone = hostedZone,\n    HostedZones = new Dictionary<string, IHostedZone> {\n        { \"hostedZonesKey\", hostedZone }\n    },\n    Method = ValidationMethod.EMAIL,\n    ValidationDomains = new Dictionary<string, string> {\n        { \"validationDomainsKey\", \"validationDomains\" }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone hostedZone;\n\nCertificationValidationProps certificationValidationProps = CertificationValidationProps.builder()\n        .hostedZone(hostedZone)\n        .hostedZones(Map.of(\n                \"hostedZonesKey\", hostedZone))\n        .method(ValidationMethod.EMAIL)\n        .validationDomains(Map.of(\n                \"validationDomainsKey\", \"validationDomains\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\nimport route53 \"github.com/aws-samples/dummy/awscdkawsroute53\"\n\nvar hostedZone hostedZone\n\ncertificationValidationProps := &CertificationValidationProps{\n\tHostedZone: hostedZone,\n\tHostedZones: map[string]iHostedZone{\n\t\t\"hostedZonesKey\": hostedZone,\n\t},\n\tMethod: certificatemanager.ValidationMethod_EMAIL,\n\tValidationDomains: map[string]*string{\n\t\t\"validationDomainsKey\": jsii.String(\"validationDomains\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\nconst certificationValidationProps: certificatemanager.CertificationValidationProps = {\n  hostedZone: hostedZone,\n  hostedZones: {\n    hostedZonesKey: hostedZone,\n  },\n  method: certificatemanager.ValidationMethod.EMAIL,\n  validationDomains: {\n    validationDomainsKey: 'validationDomains',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CertificationValidationProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CertificationValidationProps","@aws-cdk/aws-certificatemanager.ValidationMethod","@aws-cdk/aws-certificatemanager.ValidationMethod#EMAIL","@aws-cdk/aws-route53.IHostedZone"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst certificationValidationProps: certificatemanager.CertificationValidationProps = {\n  hostedZone: hostedZone,\n  hostedZones: {\n    hostedZonesKey: hostedZone,\n  },\n  method: certificatemanager.ValidationMethod.EMAIL,\n  validationDomains: {\n    validationDomainsKey: 'validationDomains',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":19,"130":1,"153":2,"169":2,"193":3,"194":2,"225":2,"242":2,"243":2,"254":2,"255":2,"256":2,"281":6,"290":1},"fqnsFingerprint":"a0fbb1759d67c2d97f5da847522bb31d213bee562c669f95249e8931ae1905b5"},"a66e145bf76762c6479221bbecd5a07cfaac9b4ce030e2a7fcafd1b9394578f8":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\ncfn_account = certificatemanager.CfnAccount(self, \"MyCfnAccount\",\n    expiry_events_configuration=certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty(\n        days_before_expiry=123\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar cfnAccount = new CfnAccount(this, \"MyCfnAccount\", new CfnAccountProps {\n    ExpiryEventsConfiguration = new ExpiryEventsConfigurationProperty {\n        DaysBeforeExpiry = 123\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nCfnAccount cfnAccount = CfnAccount.Builder.create(this, \"MyCfnAccount\")\n        .expiryEventsConfiguration(ExpiryEventsConfigurationProperty.builder()\n                .daysBeforeExpiry(123)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\ncfnAccount := certificatemanager.NewCfnAccount(this, jsii.String(\"MyCfnAccount\"), &CfnAccountProps{\n\tExpiryEventsConfiguration: &ExpiryEventsConfigurationProperty{\n\t\tDaysBeforeExpiry: jsii.Number(123),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst cfnAccount = new certificatemanager.CfnAccount(this, 'MyCfnAccount', {\n  expiryEventsConfiguration: {\n    daysBeforeExpiry: 123,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnAccount"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnAccount","@aws-cdk/aws-certificatemanager.CfnAccountProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccount = new certificatemanager.CfnAccount(this, 'MyCfnAccount', {\n  expiryEventsConfiguration: {\n    daysBeforeExpiry: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":2,"75":6,"104":1,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"2ec9f5388f7ed1d5faa362863ccd70edef74dd125e1e861a91b554a9d9c07b8f"},"5095b58e16b32ff681cde32e4aa1d308ea709058493e65aac71da28ee8567ec8":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\nexpiry_events_configuration_property = certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty(\n    days_before_expiry=123\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar expiryEventsConfigurationProperty = new ExpiryEventsConfigurationProperty {\n    DaysBeforeExpiry = 123\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nExpiryEventsConfigurationProperty expiryEventsConfigurationProperty = ExpiryEventsConfigurationProperty.builder()\n        .daysBeforeExpiry(123)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\nexpiryEventsConfigurationProperty := &ExpiryEventsConfigurationProperty{\n\tDaysBeforeExpiry: jsii.Number(123),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst expiryEventsConfigurationProperty: certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty = {\n  daysBeforeExpiry: 123,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst expiryEventsConfigurationProperty: certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty = {\n  daysBeforeExpiry: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":1,"75":6,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"d3b0834317368c1a1c4d1709e4d988c273d1fe0cce29df00cba0e19c24bcf6dd"},"14431ba790d633f433d6358c16ffc41243f3f383a840ebf43a4a3b1d3714a862":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\ncfn_account_props = certificatemanager.CfnAccountProps(\n    expiry_events_configuration=certificatemanager.CfnAccount.ExpiryEventsConfigurationProperty(\n        days_before_expiry=123\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar cfnAccountProps = new CfnAccountProps {\n    ExpiryEventsConfiguration = new ExpiryEventsConfigurationProperty {\n        DaysBeforeExpiry = 123\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nCfnAccountProps cfnAccountProps = CfnAccountProps.builder()\n        .expiryEventsConfiguration(ExpiryEventsConfigurationProperty.builder()\n                .daysBeforeExpiry(123)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\ncfnAccountProps := &CfnAccountProps{\n\tExpiryEventsConfiguration: &ExpiryEventsConfigurationProperty{\n\t\tDaysBeforeExpiry: jsii.Number(123),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst cfnAccountProps: certificatemanager.CfnAccountProps = {\n  expiryEventsConfiguration: {\n    daysBeforeExpiry: 123,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnAccountProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnAccountProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccountProps: certificatemanager.CfnAccountProps = {\n  expiryEventsConfiguration: {\n    daysBeforeExpiry: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":1,"75":6,"153":1,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"e9ea37fcc74c7ff0a206e9501f938c18a89da264ec2746f4722e226e7bf01d96"},"2f802f0c003953489a6f131be7fd88fb25e76d5dddc73d1ade02440bf12e4960":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\ncfn_certificate = certificatemanager.CfnCertificate(self, \"MyCfnCertificate\",\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    certificate_transparency_logging_preference=\"certificateTransparencyLoggingPreference\",\n    domain_validation_options=[certificatemanager.CfnCertificate.DomainValidationOptionProperty(\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        hosted_zone_id=\"hostedZoneId\",\n        validation_domain=\"validationDomain\"\n    )],\n    subject_alternative_names=[\"subjectAlternativeNames\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    validation_method=\"validationMethod\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar cfnCertificate = new CfnCertificate(this, \"MyCfnCertificate\", new CfnCertificateProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    CertificateTransparencyLoggingPreference = \"certificateTransparencyLoggingPreference\",\n    DomainValidationOptions = new [] { new DomainValidationOptionProperty {\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        HostedZoneId = \"hostedZoneId\",\n        ValidationDomain = \"validationDomain\"\n    } },\n    SubjectAlternativeNames = new [] { \"subjectAlternativeNames\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ValidationMethod = \"validationMethod\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nCfnCertificate cfnCertificate = CfnCertificate.Builder.create(this, \"MyCfnCertificate\")\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .certificateTransparencyLoggingPreference(\"certificateTransparencyLoggingPreference\")\n        .domainValidationOptions(List.of(DomainValidationOptionProperty.builder()\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .hostedZoneId(\"hostedZoneId\")\n                .validationDomain(\"validationDomain\")\n                .build()))\n        .subjectAlternativeNames(List.of(\"subjectAlternativeNames\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .validationMethod(\"validationMethod\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\ncfnCertificate := certificatemanager.NewCfnCertificate(this, jsii.String(\"MyCfnCertificate\"), &CfnCertificateProps{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tCertificateAuthorityArn: jsii.String(\"certificateAuthorityArn\"),\n\tCertificateTransparencyLoggingPreference: jsii.String(\"certificateTransparencyLoggingPreference\"),\n\tDomainValidationOptions: []interface{}{\n\t\t&DomainValidationOptionProperty{\n\t\t\tDomainName: jsii.String(\"domainName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tHostedZoneId: jsii.String(\"hostedZoneId\"),\n\t\t\tValidationDomain: jsii.String(\"validationDomain\"),\n\t\t},\n\t},\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"subjectAlternativeNames\"),\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tValidationMethod: jsii.String(\"validationMethod\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst cfnCertificate = new certificatemanager.CfnCertificate(this, 'MyCfnCertificate', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateTransparencyLoggingPreference: 'certificateTransparencyLoggingPreference',\n  domainValidationOptions: [{\n    domainName: 'domainName',\n\n    // the properties below are optional\n    hostedZoneId: 'hostedZoneId',\n    validationDomain: 'validationDomain',\n  }],\n  subjectAlternativeNames: ['subjectAlternativeNames'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  validationMethod: 'validationMethod',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnCertificate"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnCertificate","@aws-cdk/aws-certificatemanager.CfnCertificateProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificate = new certificatemanager.CfnCertificate(this, 'MyCfnCertificate', {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateTransparencyLoggingPreference: 'certificateTransparencyLoggingPreference',\n  domainValidationOptions: [{\n    domainName: 'domainName',\n\n    // the properties below are optional\n    hostedZoneId: 'hostedZoneId',\n    validationDomain: 'validationDomain',\n  }],\n  subjectAlternativeNames: ['subjectAlternativeNames'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  validationMethod: 'validationMethod',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":12,"75":16,"104":1,"192":3,"193":3,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"7581ae0c4538332aedf2aeeef77e20ed57e31687e2115fcaeca291a55f27756b"},"0658c734aff5e0cbd8e7b697916b725af5309dcca025302fced86b1e81e72dfe":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\ndomain_validation_option_property = certificatemanager.CfnCertificate.DomainValidationOptionProperty(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    hosted_zone_id=\"hostedZoneId\",\n    validation_domain=\"validationDomain\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar domainValidationOptionProperty = new DomainValidationOptionProperty {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    HostedZoneId = \"hostedZoneId\",\n    ValidationDomain = \"validationDomain\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nDomainValidationOptionProperty domainValidationOptionProperty = DomainValidationOptionProperty.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .hostedZoneId(\"hostedZoneId\")\n        .validationDomain(\"validationDomain\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\ndomainValidationOptionProperty := &DomainValidationOptionProperty{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tHostedZoneId: jsii.String(\"hostedZoneId\"),\n\tValidationDomain: jsii.String(\"validationDomain\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst domainValidationOptionProperty: certificatemanager.CfnCertificate.DomainValidationOptionProperty = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  hostedZoneId: 'hostedZoneId',\n  validationDomain: 'validationDomain',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnCertificate.DomainValidationOptionProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnCertificate.DomainValidationOptionProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainValidationOptionProperty: certificatemanager.CfnCertificate.DomainValidationOptionProperty = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  hostedZoneId: 'hostedZoneId',\n  validationDomain: 'validationDomain',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"8bae1c00f7286a3496dee889b2cc1a8747f1b81c598bfed847a7c3bb80423beb"},"857547f4ce7800419e24f0c262eb471d171aa17da0fb38db80bc0a17156a2294":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_certificatemanager as certificatemanager\n\ncfn_certificate_props = certificatemanager.CfnCertificateProps(\n    domain_name=\"domainName\",\n\n    # the properties below are optional\n    certificate_authority_arn=\"certificateAuthorityArn\",\n    certificate_transparency_logging_preference=\"certificateTransparencyLoggingPreference\",\n    domain_validation_options=[certificatemanager.CfnCertificate.DomainValidationOptionProperty(\n        domain_name=\"domainName\",\n\n        # the properties below are optional\n        hosted_zone_id=\"hostedZoneId\",\n        validation_domain=\"validationDomain\"\n    )],\n    subject_alternative_names=[\"subjectAlternativeNames\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    validation_method=\"validationMethod\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CertificateManager;\n\nvar cfnCertificateProps = new CfnCertificateProps {\n    DomainName = \"domainName\",\n\n    // the properties below are optional\n    CertificateAuthorityArn = \"certificateAuthorityArn\",\n    CertificateTransparencyLoggingPreference = \"certificateTransparencyLoggingPreference\",\n    DomainValidationOptions = new [] { new DomainValidationOptionProperty {\n        DomainName = \"domainName\",\n\n        // the properties below are optional\n        HostedZoneId = \"hostedZoneId\",\n        ValidationDomain = \"validationDomain\"\n    } },\n    SubjectAlternativeNames = new [] { \"subjectAlternativeNames\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ValidationMethod = \"validationMethod\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.certificatemanager.*;\n\nCfnCertificateProps cfnCertificateProps = CfnCertificateProps.builder()\n        .domainName(\"domainName\")\n\n        // the properties below are optional\n        .certificateAuthorityArn(\"certificateAuthorityArn\")\n        .certificateTransparencyLoggingPreference(\"certificateTransparencyLoggingPreference\")\n        .domainValidationOptions(List.of(DomainValidationOptionProperty.builder()\n                .domainName(\"domainName\")\n\n                // the properties below are optional\n                .hostedZoneId(\"hostedZoneId\")\n                .validationDomain(\"validationDomain\")\n                .build()))\n        .subjectAlternativeNames(List.of(\"subjectAlternativeNames\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .validationMethod(\"validationMethod\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport certificatemanager \"github.com/aws-samples/dummy/awscdkawscertificatemanager\"\n\ncfnCertificateProps := &CfnCertificateProps{\n\tDomainName: jsii.String(\"domainName\"),\n\n\t// the properties below are optional\n\tCertificateAuthorityArn: jsii.String(\"certificateAuthorityArn\"),\n\tCertificateTransparencyLoggingPreference: jsii.String(\"certificateTransparencyLoggingPreference\"),\n\tDomainValidationOptions: []interface{}{\n\t\t&DomainValidationOptionProperty{\n\t\t\tDomainName: jsii.String(\"domainName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tHostedZoneId: jsii.String(\"hostedZoneId\"),\n\t\t\tValidationDomain: jsii.String(\"validationDomain\"),\n\t\t},\n\t},\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"subjectAlternativeNames\"),\n\t},\n\tTags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tValidationMethod: jsii.String(\"validationMethod\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nconst cfnCertificateProps: certificatemanager.CfnCertificateProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateTransparencyLoggingPreference: 'certificateTransparencyLoggingPreference',\n  domainValidationOptions: [{\n    domainName: 'domainName',\n\n    // the properties below are optional\n    hostedZoneId: 'hostedZoneId',\n    validationDomain: 'validationDomain',\n  }],\n  subjectAlternativeNames: ['subjectAlternativeNames'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  validationMethod: 'validationMethod',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.CfnCertificateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.CfnCertificateProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCertificateProps: certificatemanager.CfnCertificateProps = {\n  domainName: 'domainName',\n\n  // the properties below are optional\n  certificateAuthorityArn: 'certificateAuthorityArn',\n  certificateTransparencyLoggingPreference: 'certificateTransparencyLoggingPreference',\n  domainValidationOptions: [{\n    domainName: 'domainName',\n\n    // the properties below are optional\n    hostedZoneId: 'hostedZoneId',\n    validationDomain: 'validationDomain',\n  }],\n  subjectAlternativeNames: ['subjectAlternativeNames'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  validationMethod: 'validationMethod',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":11,"75":16,"153":1,"169":1,"192":3,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":12,"290":1},"fqnsFingerprint":"ed4cc4d445c66b7fa936d75427e02b662225b3496322608d4c2a10f269327abd"},"62d85ac56f54c3cd54a37d6223b62300f945431f83b46a4eab7131e0e5c63957":{"translations":{"python":{"source":"# my_hosted_zone: route53.HostedZone\n\nacm.DnsValidatedCertificate(self, \"CrossRegionCertificate\",\n    domain_name=\"hello.example.com\",\n    hosted_zone=my_hosted_zone,\n    region=\"us-east-1\"\n)","version":"2"},"csharp":{"source":"HostedZone myHostedZone;\n\nnew DnsValidatedCertificate(this, \"CrossRegionCertificate\", new DnsValidatedCertificateProps {\n    DomainName = \"hello.example.com\",\n    HostedZone = myHostedZone,\n    Region = \"us-east-1\"\n});","version":"1"},"java":{"source":"HostedZone myHostedZone;\n\nDnsValidatedCertificate.Builder.create(this, \"CrossRegionCertificate\")\n        .domainName(\"hello.example.com\")\n        .hostedZone(myHostedZone)\n        .region(\"us-east-1\")\n        .build();","version":"1"},"go":{"source":"var myHostedZone hostedZone\n\nacm.NewDnsValidatedCertificate(this, jsii.String(\"CrossRegionCertificate\"), &DnsValidatedCertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tHostedZone: myHostedZone,\n\tRegion: jsii.String(\"us-east-1\"),\n})","version":"1"},"$":{"source":"declare const myHostedZone: route53.HostedZone;\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.DnsValidatedCertificate"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.DnsValidatedCertificate","@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":9,"104":1,"130":1,"153":1,"169":1,"193":1,"194":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":3,"290":1},"fqnsFingerprint":"a6b5d569c87654134ee8a13ccf9731ae9dfe64bdd1ebb49de4c04acf4e608cc4"},"1089b76396a9a3269dc2cb0954472710969deb6a6d7004971d40171a59b8f8fc":{"translations":{"python":{"source":"# my_hosted_zone: route53.HostedZone\n\nacm.DnsValidatedCertificate(self, \"CrossRegionCertificate\",\n    domain_name=\"hello.example.com\",\n    hosted_zone=my_hosted_zone,\n    region=\"us-east-1\"\n)","version":"2"},"csharp":{"source":"HostedZone myHostedZone;\n\nnew DnsValidatedCertificate(this, \"CrossRegionCertificate\", new DnsValidatedCertificateProps {\n    DomainName = \"hello.example.com\",\n    HostedZone = myHostedZone,\n    Region = \"us-east-1\"\n});","version":"1"},"java":{"source":"HostedZone myHostedZone;\n\nDnsValidatedCertificate.Builder.create(this, \"CrossRegionCertificate\")\n        .domainName(\"hello.example.com\")\n        .hostedZone(myHostedZone)\n        .region(\"us-east-1\")\n        .build();","version":"1"},"go":{"source":"var myHostedZone hostedZone\n\nacm.NewDnsValidatedCertificate(this, jsii.String(\"CrossRegionCertificate\"), &DnsValidatedCertificateProps{\n\tDomainName: jsii.String(\"hello.example.com\"),\n\tHostedZone: myHostedZone,\n\tRegion: jsii.String(\"us-east-1\"),\n})","version":"1"},"$":{"source":"declare const myHostedZone: route53.HostedZone;\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-certificatemanager.DnsValidatedCertificate","@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps","@aws-cdk/aws-route53.IHostedZone","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myHostedZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":9,"104":1,"130":1,"153":1,"169":1,"193":1,"194":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":3,"290":1},"fqnsFingerprint":"a6b5d569c87654134ee8a13ccf9731ae9dfe64bdd1ebb49de4c04acf4e608cc4"},"e9b94d001ac3e7c22177af68a2002c352b3e67de5e3899d87bf0bcd34b0bc91f":{"translations":{"python":{"source":"import aws_cdk.aws_acmpca as acmpca\n\n\nacm.PrivateCertificate(self, \"PrivateCertificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],  # optional\n    certificate_authority=acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ACMPCA;\n\n\nnew PrivateCertificate(this, \"PrivateCertificate\", new PrivateCertificateProps {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },  // optional\n    CertificateAuthority = CertificateAuthority.FromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.acmpca.*;\n\n\nPrivateCertificate.Builder.create(this, \"PrivateCertificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\")) // optional\n        .certificateAuthority(CertificateAuthority.fromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\"))\n        .build();","version":"1"},"go":{"source":"import acmpca \"github.com/aws-samples/dummy/awscdkawsacmpca\"\n\n\nacm.NewPrivateCertificate(this, jsii.String(\"PrivateCertificate\"), &PrivateCertificateProps{\n\tDomainName: jsii.String(\"test.example.com\"),\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"cool.example.com\"),\n\t\tjsii.String(\"test.example.net\"),\n\t},\n\t // optional\n\tCertificateAuthority: acmpca.CertificateAuthority_FromCertificateAuthorityArn(this, jsii.String(\"CA\"), jsii.String(\"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")),\n})","version":"1"},"$":{"source":"import * as acmpca from '@aws-cdk/aws-acmpca';\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.PrivateCertificate"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-acmpca.CertificateAuthority","@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn","@aws-cdk/aws-acmpca.ICertificateAuthority","@aws-cdk/aws-certificatemanager.PrivateCertificate","@aws-cdk/aws-certificatemanager.PrivateCertificateProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":7,"75":9,"104":2,"192":1,"193":1,"194":3,"196":1,"197":1,"226":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"35eae00d070d3721e45fdde25deff91c1382e169c9783f502d85e523b848563a"},"4b3e9ef15a713a0b089ef6820ccd0bb81b8ffa2310d884a1721d4ee8c0f2e20f":{"translations":{"python":{"source":"import aws_cdk.aws_acmpca as acmpca\n\n\nacm.PrivateCertificate(self, \"PrivateCertificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],  # optional\n    certificate_authority=acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.ACMPCA;\n\n\nnew PrivateCertificate(this, \"PrivateCertificate\", new PrivateCertificateProps {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },  // optional\n    CertificateAuthority = CertificateAuthority.FromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.acmpca.*;\n\n\nPrivateCertificate.Builder.create(this, \"PrivateCertificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\")) // optional\n        .certificateAuthority(CertificateAuthority.fromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\"))\n        .build();","version":"1"},"go":{"source":"import acmpca \"github.com/aws-samples/dummy/awscdkawsacmpca\"\n\n\nacm.NewPrivateCertificate(this, jsii.String(\"PrivateCertificate\"), &PrivateCertificateProps{\n\tDomainName: jsii.String(\"test.example.com\"),\n\tSubjectAlternativeNames: []*string{\n\t\tjsii.String(\"cool.example.com\"),\n\t\tjsii.String(\"test.example.net\"),\n\t},\n\t // optional\n\tCertificateAuthority: acmpca.CertificateAuthority_FromCertificateAuthorityArn(this, jsii.String(\"CA\"), jsii.String(\"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")),\n})","version":"1"},"$":{"source":"import * as acmpca from '@aws-cdk/aws-acmpca';\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-certificatemanager.PrivateCertificateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-acmpca.CertificateAuthority","@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn","@aws-cdk/aws-acmpca.ICertificateAuthority","@aws-cdk/aws-certificatemanager.PrivateCertificate","@aws-cdk/aws-certificatemanager.PrivateCertificateProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as acmpca from '@aws-cdk/aws-acmpca';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew acm.PrivateCertificate(this, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":7,"75":9,"104":2,"192":1,"193":1,"194":3,"196":1,"197":1,"226":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"35eae00d070d3721e45fdde25deff91c1382e169c9783f502d85e523b848563a"}}}