"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomResource = exports.CustomResourceProvider = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core = require("@aws-cdk/core");
/**
 * Represents a provider for an AWS CloudFormation custom resources.
 *
 * @deprecated use core.CustomResource instead
 */
class CustomResourceProvider {
    /**
     * @param serviceToken the ServiceToken which contains the ARN for this provider.
     */
    constructor(serviceToken) {
        this.serviceToken = serviceToken;
    }
    /**
     * The Lambda provider that implements this custom resource.
     *
     * We recommend using a lambda.SingletonFunction for this.
     */
    static fromLambda(handler) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResourceProvider#fromLambda", "use core.CustomResource instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromLambda);
            }
            throw error;
        }
        return new CustomResourceProvider(handler.functionArn);
    }
    /**
     * The SNS Topic for the provider that implements this custom resource.
     */
    static fromTopic(topic) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResourceProvider#fromTopic", "use core.CustomResource instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromTopic);
            }
            throw error;
        }
        return new CustomResourceProvider(topic.topicArn);
    }
    /**
     * Use AWS Lambda as a provider.
     * @deprecated use `fromLambda`
     */
    static lambda(handler) { try {
        jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResourceProvider#lambda", "use `fromLambda`");
    }
    catch (error) {
        if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
            Error.captureStackTrace(error, this.lambda);
        }
        throw error;
    } return this.fromLambda(handler); }
    /**
     * Use an SNS topic as the provider.
     * @deprecated use `fromTopic`
     */
    static topic(topic) { try {
        jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResourceProvider#topic", "use `fromTopic`");
    }
    catch (error) {
        if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
            Error.captureStackTrace(error, this.topic);
        }
        throw error;
    } return this.fromTopic(topic); }
    bind(_) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResourceProvider#bind", "use core.CustomResource instead");
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        return { serviceToken: this.serviceToken };
    }
}
exports.CustomResourceProvider = CustomResourceProvider;
_a = JSII_RTTI_SYMBOL_1;
CustomResourceProvider[_a] = { fqn: "@aws-cdk/aws-cloudformation.CustomResourceProvider", version: "1.199.0" };
/**
 * Deprecated.
 * @deprecated use `core.CustomResource`
 */
class CustomResource extends core.CustomResource {
    constructor(scope, id, props) {
        super(scope, id, {
            pascalCaseProperties: true,
            properties: props.properties,
            removalPolicy: props.removalPolicy,
            resourceType: props.resourceType,
            serviceToken: core.Lazy.string({ produce: () => props.provider.bind(this).serviceToken }),
        });
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-cloudformation.CustomResource", "use `core.CustomResource`");
            jsiiDeprecationWarnings._aws_cdk_aws_cloudformation_CustomResourceProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, CustomResource);
            }
            throw error;
        }
    }
}
exports.CustomResource = CustomResource;
_b = JSII_RTTI_SYMBOL_1;
CustomResource[_b] = { fqn: "@aws-cdk/aws-cloudformation.CustomResource", version: "1.199.0" };
//# sourceMappingURL=data:application/json;base64,