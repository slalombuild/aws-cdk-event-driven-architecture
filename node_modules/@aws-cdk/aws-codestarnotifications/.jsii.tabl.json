{"version":"2","toolVersion":"1.80.0","snippets":{"34020ef4a8dacab2132f4eed8871208cf40c8ab294d88b4fd52d9541a3f36106":{"translations":{"python":{"source":"import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\n\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\ntopic = sns.Topic(self, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(self, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\n\nvar project = new PipelineProject(this, \"MyProject\");\n\nvar topic = new Topic(this, \"MyTopic1\");\n\nvar slack = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nvar rule = new NotificationRule(this, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\n\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nTopic topic = new Topic(this, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(this, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);","version":"1"},"go":{"source":"import notifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\nimport codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\nimport sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport chatbot \"github.com/aws-samples/dummy/awscdkawschatbot\"\n\n\nproject := codebuild.NewPipelineProject(this, jsii.String(\"MyProject\"))\n\ntopic := sns.NewTopic(this, jsii.String(\"MyTopic1\"))\n\nslack := chatbot.NewSlackChannelConfiguration(this, jsii.String(\"MySlackChannel\"), &SlackChannelConfigurationProps{\n\tSlackChannelConfigurationName: jsii.String(\"YOUR_CHANNEL_NAME\"),\n\tSlackWorkspaceId: jsii.String(\"YOUR_SLACK_WORKSPACE_ID\"),\n\tSlackChannelId: jsii.String(\"YOUR_SLACK_CHANNEL_ID\"),\n})\n\nrule := notifications.NewNotificationRule(this, jsii.String(\"NotificationRule\"), &NotificationRuleProps{\n\tSource: project,\n\tEvents: []*string{\n\t\tjsii.String(\"codebuild-project-build-state-succeeded\"),\n\t\tjsii.String(\"codebuild-project-build-state-failed\"),\n\t},\n\tTargets: []iNotificationRuleTarget{\n\t\ttopic,\n\t},\n})\nrule.AddTarget(slack)","version":"1"},"$":{"source":"import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-codestarnotifications"},"field":{"field":"markdown","line":36}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-chatbot.SlackChannelConfiguration","@aws-cdk/aws-chatbot.SlackChannelConfigurationProps","@aws-cdk/aws-codebuild.PipelineProject","@aws-cdk/aws-codestarnotifications.INotificationRuleSource","@aws-cdk/aws-codestarnotifications.INotificationRuleTarget","@aws-cdk/aws-codestarnotifications.NotificationRule","@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget","@aws-cdk/aws-codestarnotifications.NotificationRuleProps","@aws-cdk/aws-sns.Topic","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":13,"75":27,"104":4,"192":2,"193":2,"194":5,"196":1,"197":4,"225":4,"226":1,"242":4,"243":4,"254":4,"255":4,"256":4,"281":6,"290":1},"fqnsFingerprint":"9ac6f69c6668cf4a549b2317bb82d40fda23bff7404b997b283c905be0633f08"},"7a2376f1f2daa92cfaa764202436d48716387abe49b2bbefecf6133cb3a2076d":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\ncfn_notification_rule = codestarnotifications.CfnNotificationRule(self, \"MyCfnNotificationRule\",\n    detail_type=\"detailType\",\n    event_type_ids=[\"eventTypeIds\"],\n    name=\"name\",\n    resource=\"resource\",\n    targets=[codestarnotifications.CfnNotificationRule.TargetProperty(\n        target_address=\"targetAddress\",\n        target_type=\"targetType\"\n    )],\n\n    # the properties below are optional\n    created_by=\"createdBy\",\n    event_type_id=\"eventTypeId\",\n    status=\"status\",\n    tags={\n        \"tags_key\": \"tags\"\n    },\n    target_address=\"targetAddress\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar cfnNotificationRule = new CfnNotificationRule(this, \"MyCfnNotificationRule\", new CfnNotificationRuleProps {\n    DetailType = \"detailType\",\n    EventTypeIds = new [] { \"eventTypeIds\" },\n    Name = \"name\",\n    Resource = \"resource\",\n    Targets = new [] { new TargetProperty {\n        TargetAddress = \"targetAddress\",\n        TargetType = \"targetType\"\n    } },\n\n    // the properties below are optional\n    CreatedBy = \"createdBy\",\n    EventTypeId = \"eventTypeId\",\n    Status = \"status\",\n    Tags = new Dictionary<string, string> {\n        { \"tagsKey\", \"tags\" }\n    },\n    TargetAddress = \"targetAddress\"\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nCfnNotificationRule cfnNotificationRule = CfnNotificationRule.Builder.create(this, \"MyCfnNotificationRule\")\n        .detailType(\"detailType\")\n        .eventTypeIds(List.of(\"eventTypeIds\"))\n        .name(\"name\")\n        .resource(\"resource\")\n        .targets(List.of(TargetProperty.builder()\n                .targetAddress(\"targetAddress\")\n                .targetType(\"targetType\")\n                .build()))\n\n        // the properties below are optional\n        .createdBy(\"createdBy\")\n        .eventTypeId(\"eventTypeId\")\n        .status(\"status\")\n        .tags(Map.of(\n                \"tagsKey\", \"tags\"))\n        .targetAddress(\"targetAddress\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\ncfnNotificationRule := codestarnotifications.NewCfnNotificationRule(this, jsii.String(\"MyCfnNotificationRule\"), &CfnNotificationRuleProps{\n\tDetailType: jsii.String(\"detailType\"),\n\tEventTypeIds: []*string{\n\t\tjsii.String(\"eventTypeIds\"),\n\t},\n\tName: jsii.String(\"name\"),\n\tResource: jsii.String(\"resource\"),\n\tTargets: []interface{}{\n\t\t&TargetProperty{\n\t\t\tTargetAddress: jsii.String(\"targetAddress\"),\n\t\t\tTargetType: jsii.String(\"targetType\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tCreatedBy: jsii.String(\"createdBy\"),\n\tEventTypeId: jsii.String(\"eventTypeId\"),\n\tStatus: jsii.String(\"status\"),\n\tTags: map[string]*string{\n\t\t\"tagsKey\": jsii.String(\"tags\"),\n\t},\n\tTargetAddress: jsii.String(\"targetAddress\"),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst cfnNotificationRule = new codestarnotifications.CfnNotificationRule(this, 'MyCfnNotificationRule', {\n  detailType: 'detailType',\n  eventTypeIds: ['eventTypeIds'],\n  name: 'name',\n  resource: 'resource',\n  targets: [{\n    targetAddress: 'targetAddress',\n    targetType: 'targetType',\n  }],\n\n  // the properties below are optional\n  createdBy: 'createdBy',\n  eventTypeId: 'eventTypeId',\n  status: 'status',\n  tags: {\n    tagsKey: 'tags',\n  },\n  targetAddress: 'targetAddress',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.CfnNotificationRule"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.CfnNotificationRule","@aws-cdk/aws-codestarnotifications.CfnNotificationRuleProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNotificationRule = new codestarnotifications.CfnNotificationRule(this, 'MyCfnNotificationRule', {\n  detailType: 'detailType',\n  eventTypeIds: ['eventTypeIds'],\n  name: 'name',\n  resource: 'resource',\n  targets: [{\n    targetAddress: 'targetAddress',\n    targetType: 'targetType',\n  }],\n\n  // the properties below are optional\n  createdBy: 'createdBy',\n  eventTypeId: 'eventTypeId',\n  status: 'status',\n  tags: {\n    tagsKey: 'tags',\n  },\n  targetAddress: 'targetAddress',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":13,"75":17,"104":1,"192":2,"193":3,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":13,"290":1},"fqnsFingerprint":"2dd43ff65a007f654a865948dbc9d938dae23fa9c5759237011180b97449b514"},"0cc50cbd62d1e0805fe488a3bbda84a5671795bfc2d8941f36f6e87941711dfa":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\ntarget_property = codestarnotifications.CfnNotificationRule.TargetProperty(\n    target_address=\"targetAddress\",\n    target_type=\"targetType\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar targetProperty = new TargetProperty {\n    TargetAddress = \"targetAddress\",\n    TargetType = \"targetType\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nTargetProperty targetProperty = TargetProperty.builder()\n        .targetAddress(\"targetAddress\")\n        .targetType(\"targetType\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\ntargetProperty := &TargetProperty{\n\tTargetAddress: jsii.String(\"targetAddress\"),\n\tTargetType: jsii.String(\"targetType\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst targetProperty: codestarnotifications.CfnNotificationRule.TargetProperty = {\n  targetAddress: 'targetAddress',\n  targetType: 'targetType',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.CfnNotificationRule.TargetProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.CfnNotificationRule.TargetProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetProperty: codestarnotifications.CfnNotificationRule.TargetProperty = {\n  targetAddress: 'targetAddress',\n  targetType: 'targetType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"299aedd5d05c00788b3bae08975dbb68d988fed81b439b0e7dd2e69bde03f1cc"},"17985a8168e4d0c2c3335ea08e54da6f558ce98cc4f1fe3d6abae97ada39b400":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\ncfn_notification_rule_props = codestarnotifications.CfnNotificationRuleProps(\n    detail_type=\"detailType\",\n    event_type_ids=[\"eventTypeIds\"],\n    name=\"name\",\n    resource=\"resource\",\n    targets=[codestarnotifications.CfnNotificationRule.TargetProperty(\n        target_address=\"targetAddress\",\n        target_type=\"targetType\"\n    )],\n\n    # the properties below are optional\n    created_by=\"createdBy\",\n    event_type_id=\"eventTypeId\",\n    status=\"status\",\n    tags={\n        \"tags_key\": \"tags\"\n    },\n    target_address=\"targetAddress\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar cfnNotificationRuleProps = new CfnNotificationRuleProps {\n    DetailType = \"detailType\",\n    EventTypeIds = new [] { \"eventTypeIds\" },\n    Name = \"name\",\n    Resource = \"resource\",\n    Targets = new [] { new TargetProperty {\n        TargetAddress = \"targetAddress\",\n        TargetType = \"targetType\"\n    } },\n\n    // the properties below are optional\n    CreatedBy = \"createdBy\",\n    EventTypeId = \"eventTypeId\",\n    Status = \"status\",\n    Tags = new Dictionary<string, string> {\n        { \"tagsKey\", \"tags\" }\n    },\n    TargetAddress = \"targetAddress\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nCfnNotificationRuleProps cfnNotificationRuleProps = CfnNotificationRuleProps.builder()\n        .detailType(\"detailType\")\n        .eventTypeIds(List.of(\"eventTypeIds\"))\n        .name(\"name\")\n        .resource(\"resource\")\n        .targets(List.of(TargetProperty.builder()\n                .targetAddress(\"targetAddress\")\n                .targetType(\"targetType\")\n                .build()))\n\n        // the properties below are optional\n        .createdBy(\"createdBy\")\n        .eventTypeId(\"eventTypeId\")\n        .status(\"status\")\n        .tags(Map.of(\n                \"tagsKey\", \"tags\"))\n        .targetAddress(\"targetAddress\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\ncfnNotificationRuleProps := &CfnNotificationRuleProps{\n\tDetailType: jsii.String(\"detailType\"),\n\tEventTypeIds: []*string{\n\t\tjsii.String(\"eventTypeIds\"),\n\t},\n\tName: jsii.String(\"name\"),\n\tResource: jsii.String(\"resource\"),\n\tTargets: []interface{}{\n\t\t&TargetProperty{\n\t\t\tTargetAddress: jsii.String(\"targetAddress\"),\n\t\t\tTargetType: jsii.String(\"targetType\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tCreatedBy: jsii.String(\"createdBy\"),\n\tEventTypeId: jsii.String(\"eventTypeId\"),\n\tStatus: jsii.String(\"status\"),\n\tTags: map[string]*string{\n\t\t\"tagsKey\": jsii.String(\"tags\"),\n\t},\n\tTargetAddress: jsii.String(\"targetAddress\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst cfnNotificationRuleProps: codestarnotifications.CfnNotificationRuleProps = {\n  detailType: 'detailType',\n  eventTypeIds: ['eventTypeIds'],\n  name: 'name',\n  resource: 'resource',\n  targets: [{\n    targetAddress: 'targetAddress',\n    targetType: 'targetType',\n  }],\n\n  // the properties below are optional\n  createdBy: 'createdBy',\n  eventTypeId: 'eventTypeId',\n  status: 'status',\n  tags: {\n    tagsKey: 'tags',\n  },\n  targetAddress: 'targetAddress',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.CfnNotificationRuleProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.CfnNotificationRuleProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnNotificationRuleProps: codestarnotifications.CfnNotificationRuleProps = {\n  detailType: 'detailType',\n  eventTypeIds: ['eventTypeIds'],\n  name: 'name',\n  resource: 'resource',\n  targets: [{\n    targetAddress: 'targetAddress',\n    targetType: 'targetType',\n  }],\n\n  // the properties below are optional\n  createdBy: 'createdBy',\n  eventTypeId: 'eventTypeId',\n  status: 'status',\n  tags: {\n    tagsKey: 'tags',\n  },\n  targetAddress: 'targetAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":12,"75":17,"153":1,"169":1,"192":2,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":13,"290":1},"fqnsFingerprint":"9540c30a4bcc905abb1b2e7143406302d805273f00d07466ff97053d624e83fd"},"0114738fa56d865419ab45b7549ee5a1f773f0a4572ca1f819192cf8be2fcd11":{"translations":{"python":{"source":"import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\n\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\ntopic = sns.Topic(self, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(self, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\n\nvar project = new PipelineProject(this, \"MyProject\");\n\nvar topic = new Topic(this, \"MyTopic1\");\n\nvar slack = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nvar rule = new NotificationRule(this, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\n\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nTopic topic = new Topic(this, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(this, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);","version":"1"},"go":{"source":"import notifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\nimport codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\nimport sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport chatbot \"github.com/aws-samples/dummy/awscdkawschatbot\"\n\n\nproject := codebuild.NewPipelineProject(this, jsii.String(\"MyProject\"))\n\ntopic := sns.NewTopic(this, jsii.String(\"MyTopic1\"))\n\nslack := chatbot.NewSlackChannelConfiguration(this, jsii.String(\"MySlackChannel\"), &SlackChannelConfigurationProps{\n\tSlackChannelConfigurationName: jsii.String(\"YOUR_CHANNEL_NAME\"),\n\tSlackWorkspaceId: jsii.String(\"YOUR_SLACK_WORKSPACE_ID\"),\n\tSlackChannelId: jsii.String(\"YOUR_SLACK_CHANNEL_ID\"),\n})\n\nrule := notifications.NewNotificationRule(this, jsii.String(\"NotificationRule\"), &NotificationRuleProps{\n\tSource: project,\n\tEvents: []*string{\n\t\tjsii.String(\"codebuild-project-build-state-succeeded\"),\n\t\tjsii.String(\"codebuild-project-build-state-failed\"),\n\t},\n\tTargets: []iNotificationRuleTarget{\n\t\ttopic,\n\t},\n})\nrule.AddTarget(slack)","version":"1"},"$":{"source":"import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.NotificationRule"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-chatbot.SlackChannelConfiguration","@aws-cdk/aws-chatbot.SlackChannelConfigurationProps","@aws-cdk/aws-codebuild.PipelineProject","@aws-cdk/aws-codestarnotifications.INotificationRuleSource","@aws-cdk/aws-codestarnotifications.INotificationRuleTarget","@aws-cdk/aws-codestarnotifications.NotificationRule","@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget","@aws-cdk/aws-codestarnotifications.NotificationRuleProps","@aws-cdk/aws-sns.Topic","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":13,"75":27,"104":4,"192":2,"193":2,"194":5,"196":1,"197":4,"225":4,"226":1,"242":4,"243":4,"254":4,"255":4,"256":4,"281":6,"290":1},"fqnsFingerprint":"9ac6f69c6668cf4a549b2317bb82d40fda23bff7404b997b283c905be0633f08"},"bd50a229143029f8f618e5cd448fe637bbfb4067f024928932da31a35ff9c8b6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\nnotification_rule_options = codestarnotifications.NotificationRuleOptions(\n    detail_type=codestarnotifications.DetailType.BASIC,\n    enabled=False,\n    notification_rule_name=\"notificationRuleName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar notificationRuleOptions = new NotificationRuleOptions {\n    DetailType = DetailType.BASIC,\n    Enabled = false,\n    NotificationRuleName = \"notificationRuleName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nNotificationRuleOptions notificationRuleOptions = NotificationRuleOptions.builder()\n        .detailType(DetailType.BASIC)\n        .enabled(false)\n        .notificationRuleName(\"notificationRuleName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\nnotificationRuleOptions := &NotificationRuleOptions{\n\tDetailType: codestarnotifications.DetailType_BASIC,\n\tEnabled: jsii.Boolean(false),\n\tNotificationRuleName: jsii.String(\"notificationRuleName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst notificationRuleOptions: codestarnotifications.NotificationRuleOptions = {\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.NotificationRuleOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.DetailType","@aws-cdk/aws-codestarnotifications.DetailType#BASIC","@aws-cdk/aws-codestarnotifications.NotificationRuleOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst notificationRuleOptions: codestarnotifications.NotificationRuleOptions = {\n  detailType: codestarnotifications.DetailType.BASIC,\n  enabled: false,\n  notificationRuleName: 'notificationRuleName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":10,"91":1,"153":1,"169":1,"193":1,"194":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"03d4ccdf4045d04a78502eb77f2165ff182a4802d5aa1b25cab8daca0d2de695"},"9bfdcc3d2a1ffe735973ff222e5b2699f6a86a4a9ba6c426b6a9b1e4c7453a7d":{"translations":{"python":{"source":"import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\n\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\ntopic = sns.Topic(self, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(self, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\n\nvar project = new PipelineProject(this, \"MyProject\");\n\nvar topic = new Topic(this, \"MyTopic1\");\n\nvar slack = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nvar rule = new NotificationRule(this, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\n\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nTopic topic = new Topic(this, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(this, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);","version":"1"},"go":{"source":"import notifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\nimport codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\nimport sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport chatbot \"github.com/aws-samples/dummy/awscdkawschatbot\"\n\n\nproject := codebuild.NewPipelineProject(this, jsii.String(\"MyProject\"))\n\ntopic := sns.NewTopic(this, jsii.String(\"MyTopic1\"))\n\nslack := chatbot.NewSlackChannelConfiguration(this, jsii.String(\"MySlackChannel\"), &SlackChannelConfigurationProps{\n\tSlackChannelConfigurationName: jsii.String(\"YOUR_CHANNEL_NAME\"),\n\tSlackWorkspaceId: jsii.String(\"YOUR_SLACK_WORKSPACE_ID\"),\n\tSlackChannelId: jsii.String(\"YOUR_SLACK_CHANNEL_ID\"),\n})\n\nrule := notifications.NewNotificationRule(this, jsii.String(\"NotificationRule\"), &NotificationRuleProps{\n\tSource: project,\n\tEvents: []*string{\n\t\tjsii.String(\"codebuild-project-build-state-succeeded\"),\n\t\tjsii.String(\"codebuild-project-build-state-failed\"),\n\t},\n\tTargets: []iNotificationRuleTarget{\n\t\ttopic,\n\t},\n})\nrule.AddTarget(slack)","version":"1"},"$":{"source":"import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.NotificationRuleProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-chatbot.SlackChannelConfiguration","@aws-cdk/aws-chatbot.SlackChannelConfigurationProps","@aws-cdk/aws-codebuild.PipelineProject","@aws-cdk/aws-codestarnotifications.INotificationRuleSource","@aws-cdk/aws-codestarnotifications.INotificationRuleTarget","@aws-cdk/aws-codestarnotifications.NotificationRule","@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget","@aws-cdk/aws-codestarnotifications.NotificationRuleProps","@aws-cdk/aws-sns.Topic","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst topic = new sns.Topic(this, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(this, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":13,"75":27,"104":4,"192":2,"193":2,"194":5,"196":1,"197":4,"225":4,"226":1,"242":4,"243":4,"254":4,"255":4,"256":4,"281":6,"290":1},"fqnsFingerprint":"9ac6f69c6668cf4a549b2317bb82d40fda23bff7404b997b283c905be0633f08"},"1229addf076692ef71774f30ca0ce2e8d983cdf3e48927d11b4a6bd9e417372f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\nnotification_rule_source_config = codestarnotifications.NotificationRuleSourceConfig(\n    source_arn=\"sourceArn\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar notificationRuleSourceConfig = new NotificationRuleSourceConfig {\n    SourceArn = \"sourceArn\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nNotificationRuleSourceConfig notificationRuleSourceConfig = NotificationRuleSourceConfig.builder()\n        .sourceArn(\"sourceArn\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\nnotificationRuleSourceConfig := &NotificationRuleSourceConfig{\n\tSourceArn: jsii.String(\"sourceArn\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst notificationRuleSourceConfig: codestarnotifications.NotificationRuleSourceConfig = {\n  sourceArn: 'sourceArn',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.NotificationRuleSourceConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.NotificationRuleSourceConfig"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst notificationRuleSourceConfig: codestarnotifications.NotificationRuleSourceConfig = {\n  sourceArn: 'sourceArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":5,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"ab3ecf67f53dfa053740ec59b3d1cb6923b624b7f09f567f29bf1a8c2acf5ae0"},"4b33255a63fc483adbba04bf8e8758dec79a0f4a9bd06530d4b6de7a92a35fc3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codestarnotifications as codestarnotifications\n\nnotification_rule_target_config = codestarnotifications.NotificationRuleTargetConfig(\n    target_address=\"targetAddress\",\n    target_type=\"targetType\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeStarNotifications;\n\nvar notificationRuleTargetConfig = new NotificationRuleTargetConfig {\n    TargetAddress = \"targetAddress\",\n    TargetType = \"targetType\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codestarnotifications.*;\n\nNotificationRuleTargetConfig notificationRuleTargetConfig = NotificationRuleTargetConfig.builder()\n        .targetAddress(\"targetAddress\")\n        .targetType(\"targetType\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codestarnotifications \"github.com/aws-samples/dummy/awscdkawscodestarnotifications\"\n\nnotificationRuleTargetConfig := &NotificationRuleTargetConfig{\n\tTargetAddress: jsii.String(\"targetAddress\"),\n\tTargetType: jsii.String(\"targetType\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\nconst notificationRuleTargetConfig: codestarnotifications.NotificationRuleTargetConfig = {\n  targetAddress: 'targetAddress',\n  targetType: 'targetType',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-codestarnotifications.NotificationRuleTargetConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codestarnotifications.NotificationRuleTargetConfig"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codestarnotifications from '@aws-cdk/aws-codestarnotifications';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst notificationRuleTargetConfig: codestarnotifications.NotificationRuleTargetConfig = {\n  targetAddress: 'targetAddress',\n  targetType: 'targetType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":6,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"d3d5c7ece0785b53ebcb7de6bf36399a681f04fb9e85ddb52c7820342eb163be"}}}