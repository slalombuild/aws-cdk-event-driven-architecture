"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPoolEmail = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const punycode_1 = require("punycode/");
/**
 * Configure how Cognito sends emails
 */
class UserPoolEmail {
    /**
     * Send email using Cognito
     */
    static withCognito(replyTo) {
        return new CognitoEmail(replyTo);
    }
    /**
     * Send email using SES
     */
    static withSES(options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_UserPoolSESOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.withSES);
            }
            throw error;
        }
        return new SESEmail(options);
    }
}
exports.UserPoolEmail = UserPoolEmail;
_a = JSII_RTTI_SYMBOL_1;
UserPoolEmail[_a] = { fqn: "@aws-cdk/aws-cognito.UserPoolEmail", version: "1.199.0" };
class CognitoEmail extends UserPoolEmail {
    constructor(replyTo) {
        super();
        this.replyTo = replyTo;
    }
    _bind(_scope) {
        return {
            replyToEmailAddress: encodeAndTest(this.replyTo),
            emailSendingAccount: 'COGNITO_DEFAULT',
        };
    }
}
class SESEmail extends UserPoolEmail {
    constructor(options) {
        super();
        this.options = options;
    }
    _bind(scope) {
        const region = core_1.Stack.of(scope).region;
        if (core_1.Token.isUnresolved(region) && !this.options.sesRegion) {
            throw new Error('Your stack region cannot be determined so "sesRegion" is required in SESOptions');
        }
        let from = this.options.fromEmail;
        if (this.options.fromName) {
            from = `${this.options.fromName} <${this.options.fromEmail}>`;
        }
        if (this.options.sesVerifiedDomain) {
            const domainFromEmail = this.options.fromEmail.split('@').pop();
            if (domainFromEmail !== this.options.sesVerifiedDomain) {
                throw new Error('"fromEmail" contains a different domain than the "sesVerifiedDomain"');
            }
        }
        return {
            from: encodeAndTest(from),
            replyToEmailAddress: encodeAndTest(this.options.replyTo),
            configurationSet: this.options.configurationSetName,
            emailSendingAccount: 'DEVELOPER',
            sourceArn: core_1.Stack.of(scope).formatArn({
                service: 'ses',
                resource: 'identity',
                resourceName: encodeAndTest(this.options.sesVerifiedDomain ?? this.options.fromEmail),
                region: this.options.sesRegion ?? region,
            }),
        };
    }
}
function encodeAndTest(input) {
    if (input) {
        const local = input.split('@')[0];
        if (!/[\p{ASCII}]+/u.test(local)) {
            throw new Error('the local part of the email address must use ASCII characters only');
        }
        return punycode_1.toASCII(input);
    }
    else {
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,