"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPoolIdentityProviderOidc = exports.OidcAttributeRequestMethod = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const cognito_generated_1 = require("../cognito.generated");
const user_pool_idp_base_1 = require("./private/user-pool-idp-base");
/**
 * The method to use to request attributes
 */
var OidcAttributeRequestMethod;
(function (OidcAttributeRequestMethod) {
    /** GET */
    OidcAttributeRequestMethod["GET"] = "GET";
    /** POST */
    OidcAttributeRequestMethod["POST"] = "POST";
})(OidcAttributeRequestMethod = exports.OidcAttributeRequestMethod || (exports.OidcAttributeRequestMethod = {}));
/**
 * Represents a identity provider that integrates with OpenID Connect
 * @resource AWS::Cognito::UserPoolIdentityProvider
 */
class UserPoolIdentityProviderOidc extends user_pool_idp_base_1.UserPoolIdentityProviderBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_UserPoolIdentityProviderOidcProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, UserPoolIdentityProviderOidc);
            }
            throw error;
        }
        if (props.name && !core_1.Token.isUnresolved(props.name) && (props.name.length < 3 || props.name.length > 32)) {
            throw new Error(`Expected provider name to be between 3 and 32 characters, received ${props.name} (${props.name.length} characters)`);
        }
        const scopes = props.scopes ?? ['openid'];
        const resource = new cognito_generated_1.CfnUserPoolIdentityProvider(this, 'Resource', {
            userPoolId: props.userPool.userPoolId,
            providerName: this.getProviderName(props.name),
            providerType: 'OIDC',
            providerDetails: {
                client_id: props.clientId,
                client_secret: props.clientSecret,
                authorize_scopes: scopes.join(' '),
                attributes_request_method: props.attributeRequestMethod ?? OidcAttributeRequestMethod.GET,
                oidc_issuer: props.issuerUrl,
                authorize_url: props.endpoints?.authorization,
                token_url: props.endpoints?.token,
                attributes_url: props.endpoints?.userInfo,
                jwks_uri: props.endpoints?.jwksUri,
            },
            idpIdentifiers: props.identifiers,
            attributeMapping: super.configureAttributeMapping(),
        });
        this.providerName = super.getResourceNameAttribute(resource.ref);
    }
    getProviderName(name) {
        if (name) {
            if (!core_1.Token.isUnresolved(name) && (name.length < 3 || name.length > 32)) {
                throw new Error(`Expected provider name to be between 3 and 32 characters, received ${name} (${name.length} characters)`);
            }
            return name;
        }
        const uniqueId = core_1.Names.uniqueId(this);
        if (uniqueId.length < 3) {
            return `${uniqueId}oidc`;
        }
        if (uniqueId.length > 32) {
            return uniqueId.substring(0, 16) + uniqueId.substring(uniqueId.length - 16);
        }
        return uniqueId;
    }
}
exports.UserPoolIdentityProviderOidc = UserPoolIdentityProviderOidc;
_a = JSII_RTTI_SYMBOL_1;
UserPoolIdentityProviderOidc[_a] = { fqn: "@aws-cdk/aws-cognito.UserPoolIdentityProviderOidc", version: "1.199.0" };
//# sourceMappingURL=data:application/json;base64,