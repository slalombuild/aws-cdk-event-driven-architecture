{"version":"2","toolVersion":"1.80.0","snippets":{"bb5877bc293b62a05d5850e1ae251c2709aa8c76b4e8f35627447011597ec609":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\")\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\")\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n})","version":"1"},"$":{"source":"import { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":20}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":7,"104":1,"193":1,"194":1,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":1,"290":1},"fqnsFingerprint":"a3bf2cc4a1cff07b93f88152cab8b8542f4d315510815f7a5a519304146b909e"},"eb973f070b0692c2a17735a9c0004bfbd480874699a6621169a0a7b1fbaad328":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    build_args={\n        \"HTTP_PROXY\": \"http://10.20.30.2:1234\"\n    },\n    invalidation=DockerImageAssetInvalidationOptions(\n        build_args=False\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    BuildArgs = new Dictionary<string, string> {\n        { \"HTTP_PROXY\", \"http://10.20.30.2:1234\" }\n    },\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .buildArgs(Map.of(\n                \"HTTP_PROXY\", \"http://10.20.30.2:1234\"))\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tBuildArgs: map[string]*string{\n\t\t\"HTTP_PROXY\": jsii.String(\"http://10.20.30.2:1234\"),\n\t},\n\tInvalidation: &DockerImageAssetInvalidationOptions{\n\t\tBuildArgs: jsii.Boolean(false),\n\t},\n})","version":"1"},"$":{"source":"import { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":57}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":11,"91":1,"104":1,"193":3,"194":1,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":5,"290":1},"fqnsFingerprint":"deb5efb6806128a9a0b9069e08a2792858128e3b669248b173741146fdc2b58c"},"fc7d692127ac6de2ff5a3462cb0051ff1e15a2fcdb5d8af78ddd8972f5211553":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    target=\"a-target\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    Target = \"a-target\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .target(\"a-target\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tTarget: jsii.String(\"a-target\"),\n})","version":"1"},"$":{"source":"import { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  target: 'a-target',\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":74}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  target: 'a-target',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":8,"104":1,"193":1,"194":1,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"a3bf2cc4a1cff07b93f88152cab8b8542f4d315510815f7a5a519304146b909e"},"7915130d5c27abf686f0bf131b6e7d85e9f2ba9502550757d21520c3a1617c01":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset, NetworkMode\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    network_mode=NetworkMode.HOST\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    NetworkMode = NetworkMode.HOST\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\nimport software.amazon.awscdk.services.ecr.assets.NetworkMode;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .networkMode(NetworkMode.HOST)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tNetworkMode: *awscdkawsecrassets.NetworkMode_HOST(),\n})","version":"1"},"$":{"source":"import { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":86}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","@aws-cdk/aws-ecr-assets.NetworkMode","@aws-cdk/aws-ecr-assets.NetworkMode#HOST","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":11,"104":1,"193":1,"194":2,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":2,"281":2,"290":1},"fqnsFingerprint":"451b4f92025b250a7979ae6fa7a6f0089091ebf32367bae13447930877578672"},"b92b0e1cda86633918df90ecd87660e9ec5e910de58ecbbdb55928a4d4129dfb":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset, Platform\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    platform=Platform.LINUX_ARM64\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    Platform = Platform.LINUX_ARM64\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\nimport software.amazon.awscdk.services.ecr.assets.Platform;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .platform(Platform.LINUX_ARM64)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tPlatform: *awscdkawsecrassets.Platform_LINUX_ARM64(),\n})","version":"1"},"$":{"source":"import { DockerImageAsset, Platform } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  platform: Platform.LINUX_ARM64,\n})","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":98}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","@aws-cdk/aws-ecr-assets.Platform","@aws-cdk/aws-ecr-assets.Platform#LINUX_ARM64","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset, Platform } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  platform: Platform.LINUX_ARM64,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":11,"104":1,"193":1,"194":2,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":2,"281":2,"290":1},"fqnsFingerprint":"dfc031506b110d2844b2f1ba151c56176ed266418b073d28bd7c55c8a21fd01f"},"9ced306af8958edcd7adfeba8cbbee89c70ba425ccd84802e53b5aa9b53a95df":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import TarballImageAsset\n\n\nasset = TarballImageAsset(self, \"MyBuildImage\",\n    tarball_file=\"local-image.tar\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new TarballImageAsset(this, \"MyBuildImage\", new TarballImageAssetProps {\n    TarballFile = \"local-image.tar\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.TarballImageAsset;\n\n\nTarballImageAsset asset = TarballImageAsset.Builder.create(this, \"MyBuildImage\")\n        .tarballFile(\"local-image.tar\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewTarballImageAsset(this, jsii.String(\"MyBuildImage\"), &TarballImageAssetProps{\n\tTarballFile: jsii.String(\"local-image.tar\"),\n})","version":"1"},"$":{"source":"import { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-ecr-assets"},"field":{"field":"markdown","line":112}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.TarballImageAsset","@aws-cdk/aws-ecr-assets.TarballImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":4,"104":1,"193":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":1,"290":1},"fqnsFingerprint":"ce8bb6d06539af6c9bf2c48c0d27f0266fcc1b200d8665efdb879f8de38da62f"},"dcc64c89b8e57087a9bd346c425e87e9203b550e13011b17bf02da474fc219da":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset, NetworkMode\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    network_mode=NetworkMode.HOST\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    NetworkMode = NetworkMode.HOST\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\nimport software.amazon.awscdk.services.ecr.assets.NetworkMode;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .networkMode(NetworkMode.HOST)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tNetworkMode: *awscdkawsecrassets.NetworkMode_HOST(),\n})","version":"1"},"$":{"source":"import { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.DockerImageAsset"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","@aws-cdk/aws-ecr-assets.NetworkMode","@aws-cdk/aws-ecr-assets.NetworkMode#HOST","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":11,"104":1,"193":1,"194":2,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":2,"281":2,"290":1},"fqnsFingerprint":"451b4f92025b250a7979ae6fa7a6f0089091ebf32367bae13447930877578672"},"2fd2d78776ebdd00d7b8d9a0ae95a1ffdfa1c272fb7ff8b900adcbdfdf82aab6":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    build_args={\n        \"HTTP_PROXY\": \"http://10.20.30.2:1234\"\n    },\n    invalidation=DockerImageAssetInvalidationOptions(\n        build_args=False\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    BuildArgs = new Dictionary<string, string> {\n        { \"HTTP_PROXY\", \"http://10.20.30.2:1234\" }\n    },\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .buildArgs(Map.of(\n                \"HTTP_PROXY\", \"http://10.20.30.2:1234\"))\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tBuildArgs: map[string]*string{\n\t\t\"HTTP_PROXY\": jsii.String(\"http://10.20.30.2:1234\"),\n\t},\n\tInvalidation: &DockerImageAssetInvalidationOptions{\n\t\tBuildArgs: jsii.Boolean(false),\n\t},\n})","version":"1"},"$":{"source":"import { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":11,"91":1,"104":1,"193":3,"194":1,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":5,"290":1},"fqnsFingerprint":"deb5efb6806128a9a0b9069e08a2792858128e3b669248b173741146fdc2b58c"},"2273f3317dd8cb98c750fa5dc596ffcd81e417037a32bbaf35746e190b2964c7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ecr_assets as ecr_assets\nimport aws_cdk.core as cdk\n\n# network_mode: ecr_assets.NetworkMode\n# platform: ecr_assets.Platform\n\ndocker_image_asset_options = ecr_assets.DockerImageAssetOptions(\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    file=\"file\",\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    invalidation=ecr_assets.DockerImageAssetInvalidationOptions(\n        build_args=False,\n        extra_hash=False,\n        file=False,\n        network_mode=False,\n        platform=False,\n        repository_name=False,\n        target=False\n    ),\n    network_mode=network_mode,\n    platform=platform,\n    repository_name=\"repositoryName\",\n    target=\"target\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.Ecr.Assets;\nusing Amazon.CDK;\n\nNetworkMode networkMode;\nPlatform platform;\nvar dockerImageAssetOptions = new DockerImageAssetOptions {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    File = \"file\",\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false,\n        ExtraHash = false,\n        File = false,\n        NetworkMode = false,\n        Platform = false,\n        RepositoryName = false,\n        Target = false\n    },\n    NetworkMode = networkMode,\n    Platform = platform,\n    RepositoryName = \"repositoryName\",\n    Target = \"target\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ecr.assets.*;\nimport software.amazon.awscdk.core.*;\n\nNetworkMode networkMode;\nPlatform platform;\n\nDockerImageAssetOptions dockerImageAssetOptions = DockerImageAssetOptions.builder()\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .file(\"file\")\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .extraHash(false)\n                .file(false)\n                .networkMode(false)\n                .platform(false)\n                .repositoryName(false)\n                .target(false)\n                .build())\n        .networkMode(networkMode)\n        .platform(platform)\n        .repositoryName(\"repositoryName\")\n        .target(\"target\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assets \"github.com/aws-samples/dummy/awscdkassets\"\nimport ecr_assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar networkMode networkMode\nvar platform platform\n\ndockerImageAssetOptions := &DockerImageAssetOptions{\n\tBuildArgs: map[string]*string{\n\t\t\"buildArgsKey\": jsii.String(\"buildArgs\"),\n\t},\n\tExclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tExtraHash: jsii.String(\"extraHash\"),\n\tFile: jsii.String(\"file\"),\n\tFollow: assets.FollowMode_NEVER,\n\tFollowSymlinks: cdk.SymlinkFollowMode_NEVER,\n\tIgnoreMode: cdk.IgnoreMode_GLOB,\n\tInvalidation: &DockerImageAssetInvalidationOptions{\n\t\tBuildArgs: jsii.Boolean(false),\n\t\tExtraHash: jsii.Boolean(false),\n\t\tFile: jsii.Boolean(false),\n\t\tNetworkMode: jsii.Boolean(false),\n\t\tPlatform: jsii.Boolean(false),\n\t\tRepositoryName: jsii.Boolean(false),\n\t\tTarget: jsii.Boolean(false),\n\t},\n\tNetworkMode: networkMode,\n\tPlatform: platform,\n\tRepositoryName: jsii.String(\"repositoryName\"),\n\tTarget: jsii.String(\"target\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\ndeclare const platform: ecr_assets.Platform;\nconst dockerImageAssetOptions: ecr_assets.DockerImageAssetOptions = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    platform: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  platform: platform,\n  repositoryName: 'repositoryName',\n  target: 'target',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.DockerImageAssetOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assets.FollowMode","@aws-cdk/assets.FollowMode#NEVER","@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions","@aws-cdk/aws-ecr-assets.DockerImageAssetOptions","@aws-cdk/aws-ecr-assets.NetworkMode","@aws-cdk/aws-ecr-assets.Platform","@aws-cdk/core.IgnoreMode","@aws-cdk/core.IgnoreMode#GLOB","@aws-cdk/core.SymlinkFollowMode","@aws-cdk/core.SymlinkFollowMode#NEVER"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\ndeclare const platform: ecr_assets.Platform;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerImageAssetOptions: ecr_assets.DockerImageAssetOptions = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    platform: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  platform: platform,\n  repositoryName: 'repositoryName',\n  target: 'target',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":9,"75":43,"91":7,"130":2,"153":3,"169":3,"192":1,"193":3,"194":6,"225":3,"242":3,"243":3,"254":3,"255":3,"256":3,"281":20,"290":1},"fqnsFingerprint":"92726999214f7858b2f7ecb2dedd8b383540fd0a36e0c8fb85606a07958b8eb9"},"e208cb002aadfae048e7557700fcf665a1127aa8ed5e58526ddb16bde602d229":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    build_args={\n        \"HTTP_PROXY\": \"http://10.20.30.2:1234\"\n    },\n    invalidation=DockerImageAssetInvalidationOptions(\n        build_args=False\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    BuildArgs = new Dictionary<string, string> {\n        { \"HTTP_PROXY\", \"http://10.20.30.2:1234\" }\n    },\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .buildArgs(Map.of(\n                \"HTTP_PROXY\", \"http://10.20.30.2:1234\"))\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tBuildArgs: map[string]*string{\n\t\t\"HTTP_PROXY\": jsii.String(\"http://10.20.30.2:1234\"),\n\t},\n\tInvalidation: &DockerImageAssetInvalidationOptions{\n\t\tBuildArgs: jsii.Boolean(false),\n\t},\n})","version":"1"},"$":{"source":"import { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.DockerImageAssetProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  buildArgs: {\n    HTTP_PROXY: 'http://10.20.30.2:1234',\n  },\n  invalidation: {\n    buildArgs: false,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":4,"75":11,"91":1,"104":1,"193":3,"194":1,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":5,"290":1},"fqnsFingerprint":"deb5efb6806128a9a0b9069e08a2792858128e3b669248b173741146fdc2b58c"},"f894aeba36952865c0a6e64768b511be390a1c9071aa37a8e0f5a26155cbdcbb":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset, NetworkMode\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    network_mode=NetworkMode.HOST\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    NetworkMode = NetworkMode.HOST\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\nimport software.amazon.awscdk.services.ecr.assets.NetworkMode;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .networkMode(NetworkMode.HOST)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tNetworkMode: *awscdkawsecrassets.NetworkMode_HOST(),\n})","version":"1"},"$":{"source":"import { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.NetworkMode"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","@aws-cdk/aws-ecr-assets.NetworkMode","@aws-cdk/aws-ecr-assets.NetworkMode#HOST","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset, NetworkMode } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  networkMode: NetworkMode.HOST,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":11,"104":1,"193":1,"194":2,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":2,"281":2,"290":1},"fqnsFingerprint":"451b4f92025b250a7979ae6fa7a6f0089091ebf32367bae13447930877578672"},"9f8c6e26a297d7cf029d4948206aeee7c77f42d1666bdbf46b89f48283842283":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import DockerImageAsset, Platform\n\n\nasset = DockerImageAsset(self, \"MyBuildImage\",\n    directory=path.join(__dirname, \"my-image\"),\n    platform=Platform.LINUX_ARM64\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new DockerImageAsset(this, \"MyBuildImage\", new DockerImageAssetProps {\n    Directory = Join(__dirname, \"my-image\"),\n    Platform = Platform.LINUX_ARM64\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;\nimport software.amazon.awscdk.services.ecr.assets.Platform;\n\n\nDockerImageAsset asset = DockerImageAsset.Builder.create(this, \"MyBuildImage\")\n        .directory(join(__dirname, \"my-image\"))\n        .platform(Platform.LINUX_ARM64)\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewDockerImageAsset(this, jsii.String(\"MyBuildImage\"), &DockerImageAssetProps{\n\tDirectory: path.join(__dirname, jsii.String(\"my-image\")),\n\tPlatform: *awscdkawsecrassets.Platform_LINUX_ARM64(),\n})","version":"1"},"$":{"source":"import { DockerImageAsset, Platform } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  platform: Platform.LINUX_ARM64,\n})","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.Platform"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.DockerImageAsset","@aws-cdk/aws-ecr-assets.DockerImageAssetProps","@aws-cdk/aws-ecr-assets.Platform","@aws-cdk/aws-ecr-assets.Platform#LINUX_ARM64","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { DockerImageAsset, Platform } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new DockerImageAsset(this, 'MyBuildImage', {\n  directory: path.join(__dirname, 'my-image'),\n  platform: Platform.LINUX_ARM64,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":11,"104":1,"193":1,"194":2,"196":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":2,"281":2,"290":1},"fqnsFingerprint":"dfc031506b110d2844b2f1ba151c56176ed266418b073d28bd7c55c8a21fd01f"},"31b1370e43cb6e1b22494565d15f5551500c72166e79160b649f18e3b5240bdc":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import TarballImageAsset\n\n\nasset = TarballImageAsset(self, \"MyBuildImage\",\n    tarball_file=\"local-image.tar\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new TarballImageAsset(this, \"MyBuildImage\", new TarballImageAssetProps {\n    TarballFile = \"local-image.tar\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.TarballImageAsset;\n\n\nTarballImageAsset asset = TarballImageAsset.Builder.create(this, \"MyBuildImage\")\n        .tarballFile(\"local-image.tar\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewTarballImageAsset(this, jsii.String(\"MyBuildImage\"), &TarballImageAssetProps{\n\tTarballFile: jsii.String(\"local-image.tar\"),\n})","version":"1"},"$":{"source":"import { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.TarballImageAsset"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.TarballImageAsset","@aws-cdk/aws-ecr-assets.TarballImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":4,"104":1,"193":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":1,"290":1},"fqnsFingerprint":"ce8bb6d06539af6c9bf2c48c0d27f0266fcc1b200d8665efdb879f8de38da62f"},"c8b097e26b19ad3ca6fd16f8bb4b4face125820051f5945715ae1ee0997e6d82":{"translations":{"python":{"source":"from aws_cdk.aws_ecr_assets import TarballImageAsset\n\n\nasset = TarballImageAsset(self, \"MyBuildImage\",\n    tarball_file=\"local-image.tar\"\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Ecr.Assets;\n\n\nvar asset = new TarballImageAsset(this, \"MyBuildImage\", new TarballImageAssetProps {\n    TarballFile = \"local-image.tar\"\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.ecr.assets.TarballImageAsset;\n\n\nTarballImageAsset asset = TarballImageAsset.Builder.create(this, \"MyBuildImage\")\n        .tarballFile(\"local-image.tar\")\n        .build();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsecrassets\"\n\n\nasset := awscdkawsecrassets.NewTarballImageAsset(this, jsii.String(\"MyBuildImage\"), &TarballImageAssetProps{\n\tTarballFile: jsii.String(\"local-image.tar\"),\n})","version":"1"},"$":{"source":"import { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-ecr-assets.TarballImageAssetProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-ecr-assets.TarballImageAsset","@aws-cdk/aws-ecr-assets.TarballImageAssetProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { TarballImageAsset } from '@aws-cdk/aws-ecr-assets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new TarballImageAsset(this, 'MyBuildImage', {\n  tarballFile: 'local-image.tar',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}","syntaxKindCounter":{"10":3,"75":4,"104":1,"193":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"257":1,"258":1,"281":1,"290":1},"fqnsFingerprint":"ce8bb6d06539af6c9bf2c48c0d27f0266fcc1b200d8665efdb879f8de38da62f"}}}