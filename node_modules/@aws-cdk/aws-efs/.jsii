{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.199.0",
    "@aws-cdk/aws-iam": "1.199.0",
    "@aws-cdk/aws-kms": "1.199.0",
    "@aws-cdk/cloud-assembly-schema": "1.199.0",
    "@aws-cdk/core": "1.199.0",
    "@aws-cdk/cx-api": "1.199.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::EFS",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.74.0 (build 6d08790)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "efs"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-efs",
  "readme": {
    "markdown": "# Amazon Elastic File System Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\n[Amazon Elastic File System](https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html) (Amazon EFS) provides a simple, scalable,\nfully managed elastic NFS file system for use with AWS Cloud services and on-premises resources.\nAmazon EFS provides file storage in the AWS Cloud. With Amazon EFS, you can create a file system,\nmount the file system on an Amazon EC2 instance, and then read and write data to and from your file system.\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\n## File Systems\n\nAmazon EFS provides elastic, shared file storage that is POSIX-compliant. The file system you create\nsupports concurrent read and write access from multiple Amazon EC2 instances and is accessible from\nall of the Availability Zones in the AWS Region where it is created. Learn more about [EFS file systems](https://docs.aws.amazon.com/efs/latest/ug/creating-using.html)\n\n### Create an Amazon EFS file system\n\nA Virtual Private Cloud (VPC) is required to create an Amazon EFS file system.\nThe following example creates a file system that is encrypted at rest, running in `General Purpose`\nperformance mode, and `Bursting` throughput mode and does not transition files to the Infrequent\nAccess (IA) storage class.\n\n```ts\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n```\n\n⚠️ An Amazon EFS file system's performance mode can't be changed after the file system has been created.\nUpdating this property will replace the file system.\n\nAny file system that has been created outside the stack can be imported into your CDK app.\n\nUse the `fromFileSystemAttributes()` API to import an existing file system.\nHere is an example of giving a role write permissions on a file system.\n\n```ts\nimport * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});\n```\n\n### Permissions\n\nIf you need to grant file system permissions to another resource, you can use the `.grant()` API.\nAs an example, the following code gives `elasticfilesystem:ClientWrite` permissions to an IAM role.\n\n```ts fixture=with-filesystem-instance\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\n\nfileSystem.grant(role, 'elasticfilesystem:ClientWrite');\n```\n\n### Access Point\n\nAn access point is an application-specific view into an EFS file system that applies an operating\nsystem user and group, and a file system path, to any file system request made through the access\npoint. The operating system user and group override any identity information provided by the NFS\nclient. The file system path is exposed as the access point's root directory. Applications using\nthe access point can only access data in its own directory and below. To learn more, see [Mounting a File System Using EFS Access Points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html).\n\nUse the `addAccessPoint` API to create an access point from a fileSystem.\n\n```ts fixture=with-filesystem-instance\nfileSystem.addAccessPoint('AccessPoint');\n```\n\nBy default, when you create an access point, the root(`/`) directory is exposed to the client\nconnecting to the access point. You can specify a custom path with the `path` property.\n\nIf `path` does not exist, it will be created with the settings defined in the `creationInfo`.\nSee [Creating Access Points](https://docs.aws.amazon.com/efs/latest/ug/create-access-point.html) for more details.\n\nAny access point that has been created outside the stack can be imported into your CDK app.\n\nUse the `fromAccessPointAttributes()` API to import an existing access point.\n\n```ts\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n```\n\n⚠️ Notice: When importing an Access Point using `fromAccessPointAttributes()`, you must make sure\nthe mount targets are deployed and their lifecycle state is `available`. Otherwise, you may encounter\nthe following error when deploying:\n> EFS file system &lt;ARN of efs&gt; referenced by access point &lt;ARN of access point of EFS&gt; has\n> mount targets created in all availability zones the function will execute in, but not all\n> are in the available life cycle state yet. Please wait for them to become available and\n> try the request again.\n\n### Connecting\n\nTo control who can access the EFS, use the `.connections` attribute. EFS has\na fixed default port, so you don't need to specify the port:\n\n```ts fixture=with-filesystem-instance\nfileSystem.connections.allowDefaultPortFrom(instance);\n```\n\nLearn more about [managing file system network accessibility](https://docs.aws.amazon.com/efs/latest/ug/manage-fs-access.html)\n\n### Mounting the file system using User Data\n\nAfter you create a file system, you can create mount targets. Then you can mount the file system on\nEC2 instances, containers, and Lambda functions in your virtual private cloud (VPC).\n\nThe following example automatically mounts a file system during instance launch.\n\n```ts fixture=with-filesystem-instance\nfileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\",    // Ubuntu: apt-get -y update\n  \"yum upgrade -y\",                                 // Ubuntu: apt-get -y upgrade\n  \"yum install -y amazon-efs-utils\",                // Ubuntu: apt-get -y install amazon-efs-utils\n  \"yum install -y nfs-utils\",                       // Ubuntu: apt-get -y install nfs-common\n  \"file_system_id_1=\" + fileSystem.fileSystemId,\n  \"efs_mount_point_1=/mnt/efs/fs1\",\n  \"mkdir -p \\\"${efs_mount_point_1}\\\"\",\n  \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" +\n  \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\",\n  \"mount -a -t efs,nfs4 defaults\");\n```\n\nLearn more about [mounting EFS file systems](https://docs.aws.amazon.com/efs/latest/ug/mounting-fs.html)\n\n### Deleting\n\nSince file systems are stateful resources, by default the file system will not be deleted when your\nstack is deleted.\n\nYou can configure the file system to be destroyed on stack deletion by setting a `removalPolicy`\n\n```ts\nconst fileSystem =  new efs.FileSystem(this, 'EfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  removalPolicy: RemovalPolicy.DESTROY,\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-efs",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.EFS",
      "packageId": "Amazon.CDK.AWS.EFS"
    },
    "java": {
      "maven": {
        "artifactId": "efs",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.efs"
    },
    "js": {
      "npm": "@aws-cdk/aws-efs"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-efs",
      "module": "aws_cdk.aws_efs"
    }
  },
  "types": {
    "@aws-cdk/aws-efs.AccessPoint": {
      "assembly": "@aws-cdk/aws-efs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "Represents the AccessPoint.",
        "example": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.AccessPoint",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/access-point.ts",
          "line": 201
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-efs.AccessPointProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-efs.IAccessPoint"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 167
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing Access Point by attributes."
          },
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 171
          },
          "name": "fromAccessPointAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-efs.AccessPointAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-efs.IAccessPoint"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing Access Point by id."
          },
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 178
          },
          "name": "fromAccessPointId",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "accessPointId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-efs.IAccessPoint"
            }
          },
          "static": true
        }
      ],
      "name": "AccessPoint",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the Access Point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 188
          },
          "name": "accessPointArn",
          "overrides": "@aws-cdk/aws-efs.IAccessPoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the Access Point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 194
          },
          "name": "accessPointId",
          "overrides": "@aws-cdk/aws-efs.IAccessPoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The file system of the access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 199
          },
          "name": "fileSystem",
          "overrides": "@aws-cdk/aws-efs.IAccessPoint",
          "type": {
            "fqn": "@aws-cdk/aws-efs.IFileSystem"
          }
        }
      ],
      "symbolId": "lib/access-point:AccessPoint"
    },
    "@aws-cdk/aws-efs.AccessPointAttributes": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Attributes that can be specified when importing an AccessPoint.",
        "example": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.AccessPointAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 120
      },
      "name": "AccessPointAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- determined based on accessPointId",
            "stability": "stable",
            "summary": "The ARN of the AccessPoint One of this, or {@link accessPointId} is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 135
          },
          "name": "accessPointArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- determined based on accessPointArn",
            "stability": "stable",
            "summary": "The ID of the AccessPoint One of this, or {@link accessPointArn} is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 127
          },
          "name": "accessPointId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no EFS file system",
            "stability": "stable",
            "summary": "The EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 142
          },
          "name": "fileSystem",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.IFileSystem"
          }
        }
      ],
      "symbolId": "lib/access-point:AccessPointAttributes"
    },
    "@aws-cdk/aws-efs.AccessPointOptions": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options to create an AccessPoint.",
        "example": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.AccessPointOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 76
      },
      "name": "AccessPointOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- None. The directory specified by `path` must exist.",
            "remarks": "If the\nroot directory specified by `path` does not exist, EFS creates the root directory and applies the\npermissions specified here. If the specified `path` does not exist, you must specify `createAcl`.",
            "stability": "stable",
            "summary": "Specifies the POSIX IDs and permissions to apply when creating the access point's root directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 84
          },
          "name": "createAcl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.Acl"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'/'",
            "stability": "stable",
            "summary": "Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 92
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- user identity not enforced",
            "remarks": "Specify this to enforce a user identity using an access point.",
            "see": "- [Enforcing a User Identity Using an Access Point](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html)",
            "stability": "stable",
            "summary": "The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 104
          },
          "name": "posixUser",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.PosixUser"
          }
        }
      ],
      "symbolId": "lib/access-point:AccessPointOptions"
    },
    "@aws-cdk/aws-efs.AccessPointProps": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for the AccessPoint.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystem: efs.FileSystem;\nconst accessPointProps: efs.AccessPointProps = {\n  fileSystem: fileSystem,\n\n  // the properties below are optional\n  createAcl: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-efs.AccessPointProps",
      "interfaces": [
        "@aws-cdk/aws-efs.AccessPointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 110
      },
      "name": "AccessPointProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The efs filesystem."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 114
          },
          "name": "fileSystem",
          "type": {
            "fqn": "@aws-cdk/aws-efs.IFileSystem"
          }
        }
      ],
      "symbolId": "lib/access-point:AccessPointProps"
    },
    "@aws-cdk/aws-efs.Acl": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Permissions as POSIX ACL.",
        "example": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.Acl",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 33
      },
      "name": "Acl",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Accepts values from 0 to 2^32 (4294967295).",
            "stability": "stable",
            "summary": "Specifies the POSIX group ID to apply to the RootDirectory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 42
          },
          "name": "ownerGid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Accepts values from 0 to 2^32 (4294967295).",
            "stability": "stable",
            "summary": "Specifies the POSIX user ID to apply to the RootDirectory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 37
          },
          "name": "ownerUid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 48
          },
          "name": "permissions",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/access-point:Acl"
    },
    "@aws-cdk/aws-efs.CfnAccessPoint": {
      "assembly": "@aws-cdk/aws-efs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::EFS::AccessPoint",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::EFS::AccessPoint` resource creates an EFS access point. An access point is an application-specific view into an EFS file system that applies an operating system user and group, and a file system path, to any file system request made through the access point. The operating system user and group override any identity information provided by the NFS client. The file system path is exposed as the access point's root directory. Applications using the access point can only access data in its own directory and below. To learn more, see [Mounting a file system using EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) .\n\nThis operation requires permissions for the `elasticfilesystem:CreateAccessPoint` action.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::EFS::AccessPoint`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnAccessPoint = new efs.CfnAccessPoint(this, 'MyCfnAccessPoint', {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPoint",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::EFS::AccessPoint`."
        },
        "locationInModule": {
          "filename": "lib/efs.generated.ts",
          "line": 210
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-efs.CfnAccessPointProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 129
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 229
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 244
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnAccessPoint",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 133
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "AccessPointId"
            },
            "stability": "external",
            "summary": "The ID of the EFS access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 158
          },
          "name": "attrAccessPointId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 164
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 234
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-filesystemid"
            },
            "remarks": "Accepts only the ID format for input when specifying a file system, for example `fs-0123456789abcedf2` .",
            "stability": "external",
            "summary": "The ID of the EFS file system that the access point applies to."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 171
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-accesspointtags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to this resource."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 180
          },
          "name": "accessPointTags",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-clienttoken"
            },
            "stability": "external",
            "summary": "The opaque string specified in the request to ensure idempotent creation."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 187
          },
          "name": "clientToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-posixuser"
            },
            "stability": "external",
            "summary": "The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 194
          },
          "name": "posixUser",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-rootdirectory"
            },
            "stability": "external",
            "summary": "The directory on the Amazon EFS file system that the access point exposes as the root directory to NFS clients using the access point."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 201
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPoint"
    },
    "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-accesspointtag.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Allowed characters in the `Key` and `Value` properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters: `+ - = . _ : /`",
        "stability": "external",
        "summary": "A tag is a key-value pair attached to a file system.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst accessPointTagProperty: efs.CfnAccessPoint.AccessPointTagProperty = {\n  key: 'key',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 258
      },
      "name": "AccessPointTagProperty",
      "namespace": "CfnAccessPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-accesspointtag.html#cfn-efs-accesspoint-accesspointtag-key"
            },
            "remarks": "The key can't start with `aws:` .",
            "stability": "external",
            "summary": "The tag key (String)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 264
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-accesspointtag.html#cfn-efs-accesspoint-accesspointtag-value"
            },
            "stability": "external",
            "summary": "The value of the tag key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 270
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPoint.AccessPointTagProperty"
    },
    "@aws-cdk/aws-efs.CfnAccessPoint.CreationInfoProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-creationinfo.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specifies the POSIX IDs and permissions to apply to the access point's `RootDirectory` > `Path` . If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying `CreationInfo` , you must include values for all properties.\n\nAmazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.\n\n> If you do not provide `CreationInfo` and the specified `RootDirectory` does not exist, attempts to mount the file system using the access point will fail.",
        "stability": "external",
        "summary": "Required if the `RootDirectory` > `Path` specified does not exist.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst creationInfoProperty: efs.CfnAccessPoint.CreationInfoProperty = {\n  ownerGid: 'ownerGid',\n  ownerUid: 'ownerUid',\n  permissions: 'permissions',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.CreationInfoProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 338
      },
      "name": "CreationInfoProperty",
      "namespace": "CfnAccessPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-creationinfo.html#cfn-efs-accesspoint-creationinfo-ownergid"
            },
            "remarks": "Accepts values from 0 to 2^32 (4294967295).",
            "stability": "external",
            "summary": "Specifies the POSIX group ID to apply to the `RootDirectory` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 344
          },
          "name": "ownerGid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-creationinfo.html#cfn-efs-accesspoint-creationinfo-owneruid"
            },
            "remarks": "Accepts values from 0 to 2^32 (4294967295).",
            "stability": "external",
            "summary": "Specifies the POSIX user ID to apply to the `RootDirectory` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 350
          },
          "name": "ownerUid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-creationinfo.html#cfn-efs-accesspoint-creationinfo-permissions"
            },
            "stability": "external",
            "summary": "Specifies the POSIX permissions to apply to the `RootDirectory` , in the format of an octal number representing the file's mode bits."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 356
          },
          "name": "permissions",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPoint.CreationInfoProperty"
    },
    "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-posixuser.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst posixUserProperty: efs.CfnAccessPoint.PosixUserProperty = {\n  gid: 'gid',\n  uid: 'uid',\n\n  // the properties below are optional\n  secondaryGids: ['secondaryGids'],\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 426
      },
      "name": "PosixUserProperty",
      "namespace": "CfnAccessPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-posixuser.html#cfn-efs-accesspoint-posixuser-gid"
            },
            "stability": "external",
            "summary": "The POSIX group ID used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 432
          },
          "name": "gid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-posixuser.html#cfn-efs-accesspoint-posixuser-uid"
            },
            "stability": "external",
            "summary": "The POSIX user ID used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 444
          },
          "name": "uid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-posixuser.html#cfn-efs-accesspoint-posixuser-secondarygids"
            },
            "stability": "external",
            "summary": "Secondary POSIX group IDs used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 438
          },
          "name": "secondaryGids",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPoint.PosixUserProperty"
    },
    "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-rootdirectory.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's `RootDirectory` and it's subdirectories.",
        "stability": "external",
        "summary": "Specifies the directory on the Amazon EFS file system that the access point provides access to.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst rootDirectoryProperty: efs.CfnAccessPoint.RootDirectoryProperty = {\n  creationInfo: {\n    ownerGid: 'ownerGid',\n    ownerUid: 'ownerUid',\n    permissions: 'permissions',\n  },\n  path: 'path',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 513
      },
      "name": "RootDirectoryProperty",
      "namespace": "CfnAccessPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-rootdirectory.html#cfn-efs-accesspoint-rootdirectory-creationinfo"
            },
            "remarks": "If the `RootDirectory` > `Path` specified does not exist, EFS creates the root directory using the `CreationInfo` settings when a client connects to an access point. When specifying the `CreationInfo` , you must provide values for all properties.\n\n> If you do not provide `CreationInfo` and the specified `RootDirectory` > `Path` does not exist, attempts to mount the file system using the access point will fail.",
            "stability": "external",
            "summary": "(Optional) Specifies the POSIX IDs and permissions to apply to the access point's `RootDirectory` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 521
          },
          "name": "creationInfo",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.CreationInfoProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-accesspoint-rootdirectory.html#cfn-efs-accesspoint-rootdirectory-path"
            },
            "remarks": "A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the `CreationInfo` .",
            "stability": "external",
            "summary": "Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 527
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPoint.RootDirectoryProperty"
    },
    "@aws-cdk/aws-efs.CfnAccessPointProps": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnAccessPoint`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnAccessPointProps: efs.CfnAccessPointProps = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  accessPointTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  clientToken: 'clientToken',\n  posixUser: {\n    gid: 'gid',\n    uid: 'uid',\n\n    // the properties below are optional\n    secondaryGids: ['secondaryGids'],\n  },\n  rootDirectory: {\n    creationInfo: {\n      ownerGid: 'ownerGid',\n      ownerUid: 'ownerUid',\n      permissions: 'permissions',\n    },\n    path: 'path',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnAccessPointProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 19
      },
      "name": "CfnAccessPointProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-filesystemid"
            },
            "remarks": "Accepts only the ID format for input when specifying a file system, for example `fs-0123456789abcedf2` .",
            "stability": "external",
            "summary": "The ID of the EFS file system that the access point applies to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 26
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-accesspointtags"
            },
            "remarks": "For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .",
            "stability": "external",
            "summary": "An array of key-value pairs to apply to this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 35
          },
          "name": "accessPointTags",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.AccessPointTagProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-clienttoken"
            },
            "stability": "external",
            "summary": "The opaque string specified in the request to ensure idempotent creation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 42
          },
          "name": "clientToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-posixuser"
            },
            "stability": "external",
            "summary": "The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 49
          },
          "name": "posixUser",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.PosixUserProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html#cfn-efs-accesspoint-rootdirectory"
            },
            "stability": "external",
            "summary": "The directory on the Amazon EFS file system that the access point exposes as the root directory to NFS clients using the access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 56
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnAccessPoint.RootDirectoryProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnAccessPointProps"
    },
    "@aws-cdk/aws-efs.CfnFileSystem": {
      "assembly": "@aws-cdk/aws-efs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::EFS::FileSystem",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::EFS::FileSystem` resource creates a new, empty file system in Amazon Elastic File System ( Amazon EFS ). You must create a mount target ( [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) ) to mount your EFS file system on an Amazon EC2 or other AWS cloud compute resource.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::EFS::FileSystem`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\nconst cfnFileSystem = new efs.CfnFileSystem(this, 'MyCfnFileSystem', /* all optional props */ {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n});"
      },
      "fqn": "@aws-cdk/aws-efs.CfnFileSystem",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::EFS::FileSystem`."
        },
        "locationInModule": {
          "filename": "lib/efs.generated.ts",
          "line": 914
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-efs.CfnFileSystemProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 773
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 943
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 964
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnFileSystem",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 777
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "remarks": "Example: `arn:aws:elasticfilesystem:us-west-2:1111333322228888:file-system/fs-0123456789abcdef8`",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 804
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "FileSystemId"
            },
            "remarks": "For example: `fs-abcdef0123456789a`",
            "stability": "external",
            "summary": "The ID of the EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 810
          },
          "name": "attrFileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 948
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-filesystemtags"
            },
            "remarks": "Each tag is a user-defined key-value pair. Name your file system on creation by including a `\"Key\":\"Name\",\"Value\":\"{value}\"` key-value pair. Each key must be unique. For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference Guide* .",
            "stability": "external",
            "summary": "Use to create one or more tags associated with the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 854
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-filesystempolicy"
            },
            "remarks": "A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using IAM to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide* .",
            "stability": "external",
            "summary": "The `FileSystemPolicy` for the EFS file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 847
          },
          "name": "fileSystemPolicy",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-availabilityzonename"
            },
            "remarks": "It specifies the AWS Availability Zone in which to create the file system. Use the format `us-east-1a` to specify the Availability Zone. For more information about One Zone storage classes, see [Using EFS storage classes](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide* .\n\n> One Zone storage classes are not available in all Availability Zones in AWS Regions where Amazon EFS is available.",
            "stability": "external",
            "summary": "Used to create a file system that uses One Zone storage classes."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 819
          },
          "name": "availabilityZoneName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-backuppolicy"
            },
            "stability": "external",
            "summary": "Use the `BackupPolicy` to turn automatic backups on or off for the file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 826
          },
          "name": "backupPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-bypasspolicylockoutsafetycheck"
            },
            "remarks": "The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future `PutFileSystemPolicy` requests on this file system. Set `BypassPolicyLockoutSafetyCheck` to `True` only when you intend to prevent the IAM principal that is making the request from making subsequent `PutFileSystemPolicy` requests on this file system. The default value is `False` .",
            "stability": "external",
            "summary": "(Optional) A boolean that specifies whether or not to bypass the `FileSystemPolicy` lockout safety check."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 833
          },
          "name": "bypassPolicyLockoutSafetyCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-encrypted"
            },
            "remarks": "When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing AWS KMS key . If you don't specify a KMS key , then the default KMS key for Amazon EFS , `/aws/elasticfilesystem` , is used to protect the encrypted file system.",
            "stability": "external",
            "summary": "A Boolean value that, if true, creates an encrypted file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 840
          },
          "name": "encrypted",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-kmskeyid"
            },
            "remarks": "This parameter is only required if you want to use a nondefault KMS key . If this parameter is not specified, the default KMS key for Amazon EFS is used. This ID can be in one of the following formats:\n\n- Key ID - A unique identifier of the key, for example `1234abcd-12ab-34cd-56ef-1234567890ab` .\n- ARN - An Amazon Resource Name (ARN) for the key, for example `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` .\n- Key alias - A previously created display name for a key, for example `alias/projectKey1` .\n- Key alias ARN - An ARN for a key alias, for example `arn:aws:kms:us-west-2:444455556666:alias/projectKey1` .\n\nIf `KmsKeyId` is specified, the `Encrypted` parameter must be set to true.",
            "stability": "external",
            "summary": "The ID of the AWS KMS key to be used to protect the encrypted file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 868
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-lifecyclepolicies"
            },
            "remarks": "A `LifecycleConfiguration` object informs EFS lifecycle management and intelligent tiering of the following:\n\n- When to move files in the file system from primary storage to the IA storage class.\n- When to move files that are in IA storage to primary storage.\n\n> Amazon EFS requires that each `LifecyclePolicy` object have only a single transition. This means that in a request body, `LifecyclePolicies` needs to be structured as an array of `LifecyclePolicy` objects, one object for each transition, `TransitionToIA` , `TransitionToPrimaryStorageClass` . See the example requests in the following section for more information.",
            "stability": "external",
            "summary": "An array of `LifecyclePolicy` objects that define the file system's `LifecycleConfiguration` object."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 880
          },
          "name": "lifecyclePolicies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-performancemode"
            },
            "remarks": "We recommend `generalPurpose` performance mode for most file systems. File systems using the `maxIO` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created.\n\n> The `maxIO` mode is not supported on file systems using One Zone storage classes.",
            "stability": "external",
            "summary": "The performance mode of the file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 889
          },
          "name": "performanceMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-provisionedthroughputinmibps"
            },
            "remarks": "Valid values are 1-1024. Required if `ThroughputMode` is set to `provisioned` . The upper limit for throughput is 1024 MiB/s. To increase this limit, contact AWS Support . For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide* .",
            "stability": "external",
            "summary": "The throughput, measured in MiB/s, that you want to provision for a file system that you're creating."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 896
          },
          "name": "provisionedThroughputInMibps",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-throughputmode"
            },
            "remarks": "The mode can be `bursting` , `provisioned` , or `elastic` . If you set `ThroughputMode` to `provisioned` , you must also set a value for `ProvisionedThroughputInMibps` . After you create the file system, you can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide* .\n\nDefault is `bursting` .",
            "stability": "external",
            "summary": "Specifies the throughput mode for the file system."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 905
          },
          "name": "throughputMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnFileSystem"
    },
    "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-backuppolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The backup policy turns automatic backups for the file system on or off.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst backupPolicyProperty: efs.CfnFileSystem.BackupPolicyProperty = {\n  status: 'status',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 978
      },
      "name": "BackupPolicyProperty",
      "namespace": "CfnFileSystem",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-backuppolicy.html#cfn-efs-filesystem-backuppolicy-status"
            },
            "remarks": "- *`ENABLED`* - Turns automatic backups on for the file system.\n- *`DISABLED`* - Turns automatic backups off for the file system.",
            "stability": "external",
            "summary": "Set the backup policy status for the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 987
          },
          "name": "status",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnFileSystem.BackupPolicyProperty"
    },
    "@aws-cdk/aws-efs.CfnFileSystem.ElasticFileSystemTagProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-elasticfilesystemtag.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Allowed characters in the `Key` and `Value` properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters: `+ - = . _ : /`",
        "stability": "external",
        "summary": "A tag is a key-value pair attached to a file system.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst elasticFileSystemTagProperty: efs.CfnFileSystem.ElasticFileSystemTagProperty = {\n  key: 'key',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnFileSystem.ElasticFileSystemTagProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 1049
      },
      "name": "ElasticFileSystemTagProperty",
      "namespace": "CfnFileSystem",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-elasticfilesystemtag.html#cfn-efs-filesystem-elasticfilesystemtag-key"
            },
            "remarks": "The key can't start with `aws:` .",
            "stability": "external",
            "summary": "The tag key (String)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1055
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-elasticfilesystemtag.html#cfn-efs-filesystem-elasticfilesystemtag-value"
            },
            "stability": "external",
            "summary": "The value of the tag key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1061
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnFileSystem.ElasticFileSystemTagProperty"
    },
    "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [EFS Intelligent‐Tiering and EFS Lifecycle Management](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html) .\n\n> - Each `LifecyclePolicy` object can have only a single transition. This means that in a request body, `LifecyclePolicies` must be structured as an array of `LifecyclePolicy` objects, one object for each transition, `TransitionToIA` , `TransitionToPrimaryStorageClass` .\n> - See the AWS::EFS::FileSystem examples for the correct `LifecyclePolicy` structure. Do not use the syntax shown on this page.",
        "stability": "external",
        "summary": "Describes a policy used by EFS lifecycle management and EFS Intelligent-Tiering that specifies when to transition files into and out of the file system's Infrequent Access (IA) storage class.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst lifecyclePolicyProperty: efs.CfnFileSystem.LifecyclePolicyProperty = {\n  transitionToIa: 'transitionToIa',\n  transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 1130
      },
      "name": "LifecyclePolicyProperty",
      "namespace": "CfnFileSystem",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html#cfn-efs-filesystem-lifecyclepolicy-transitiontoia"
            },
            "remarks": "Metadata operations such as listing the contents of a directory don't count as file access events.",
            "stability": "external",
            "summary": "Describes the period of time that a file is not accessed, after which it transitions to IA storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1136
          },
          "name": "transitionToIa",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html#cfn-efs-filesystem-lifecyclepolicy-transitiontoprimarystorageclass"
            },
            "remarks": "Metadata operations such as listing the contents of a directory don't count as file access events.",
            "stability": "external",
            "summary": "Describes when to transition a file from IA storage to primary storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1142
          },
          "name": "transitionToPrimaryStorageClass",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnFileSystem.LifecyclePolicyProperty"
    },
    "@aws-cdk/aws-efs.CfnFileSystemProps": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnFileSystem`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\n\ndeclare const fileSystemPolicy: any;\nconst cfnFileSystemProps: efs.CfnFileSystemProps = {\n  availabilityZoneName: 'availabilityZoneName',\n  backupPolicy: {\n    status: 'status',\n  },\n  bypassPolicyLockoutSafetyCheck: false,\n  encrypted: false,\n  fileSystemPolicy: fileSystemPolicy,\n  fileSystemTags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  kmsKeyId: 'kmsKeyId',\n  lifecyclePolicies: [{\n    transitionToIa: 'transitionToIa',\n    transitionToPrimaryStorageClass: 'transitionToPrimaryStorageClass',\n  }],\n  performanceMode: 'performanceMode',\n  provisionedThroughputInMibps: 123,\n  throughputMode: 'throughputMode',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnFileSystemProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 590
      },
      "name": "CfnFileSystemProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-availabilityzonename"
            },
            "remarks": "It specifies the AWS Availability Zone in which to create the file system. Use the format `us-east-1a` to specify the Availability Zone. For more information about One Zone storage classes, see [Using EFS storage classes](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide* .\n\n> One Zone storage classes are not available in all Availability Zones in AWS Regions where Amazon EFS is available.",
            "stability": "external",
            "summary": "Used to create a file system that uses One Zone storage classes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 599
          },
          "name": "availabilityZoneName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-backuppolicy"
            },
            "stability": "external",
            "summary": "Use the `BackupPolicy` to turn automatic backups on or off for the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 606
          },
          "name": "backupPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-efs.CfnFileSystem.BackupPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-bypasspolicylockoutsafetycheck"
            },
            "remarks": "The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future `PutFileSystemPolicy` requests on this file system. Set `BypassPolicyLockoutSafetyCheck` to `True` only when you intend to prevent the IAM principal that is making the request from making subsequent `PutFileSystemPolicy` requests on this file system. The default value is `False` .",
            "stability": "external",
            "summary": "(Optional) A boolean that specifies whether or not to bypass the `FileSystemPolicy` lockout safety check."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 613
          },
          "name": "bypassPolicyLockoutSafetyCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-encrypted"
            },
            "remarks": "When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing AWS KMS key . If you don't specify a KMS key , then the default KMS key for Amazon EFS , `/aws/elasticfilesystem` , is used to protect the encrypted file system.",
            "stability": "external",
            "summary": "A Boolean value that, if true, creates an encrypted file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 620
          },
          "name": "encrypted",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-filesystempolicy"
            },
            "remarks": "A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using IAM to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide* .",
            "stability": "external",
            "summary": "The `FileSystemPolicy` for the EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 627
          },
          "name": "fileSystemPolicy",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-filesystemtags"
            },
            "remarks": "Each tag is a user-defined key-value pair. Name your file system on creation by including a `\"Key\":\"Name\",\"Value\":\"{value}\"` key-value pair. Each key must be unique. For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference Guide* .",
            "stability": "external",
            "summary": "Use to create one or more tags associated with the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 634
          },
          "name": "fileSystemTags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-efs.CfnFileSystem.ElasticFileSystemTagProperty"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-kmskeyid"
            },
            "remarks": "This parameter is only required if you want to use a nondefault KMS key . If this parameter is not specified, the default KMS key for Amazon EFS is used. This ID can be in one of the following formats:\n\n- Key ID - A unique identifier of the key, for example `1234abcd-12ab-34cd-56ef-1234567890ab` .\n- ARN - An Amazon Resource Name (ARN) for the key, for example `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` .\n- Key alias - A previously created display name for a key, for example `alias/projectKey1` .\n- Key alias ARN - An ARN for a key alias, for example `arn:aws:kms:us-west-2:444455556666:alias/projectKey1` .\n\nIf `KmsKeyId` is specified, the `Encrypted` parameter must be set to true.",
            "stability": "external",
            "summary": "The ID of the AWS KMS key to be used to protect the encrypted file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 648
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-lifecyclepolicies"
            },
            "remarks": "A `LifecycleConfiguration` object informs EFS lifecycle management and intelligent tiering of the following:\n\n- When to move files in the file system from primary storage to the IA storage class.\n- When to move files that are in IA storage to primary storage.\n\n> Amazon EFS requires that each `LifecyclePolicy` object have only a single transition. This means that in a request body, `LifecyclePolicies` needs to be structured as an array of `LifecyclePolicy` objects, one object for each transition, `TransitionToIA` , `TransitionToPrimaryStorageClass` . See the example requests in the following section for more information.",
            "stability": "external",
            "summary": "An array of `LifecyclePolicy` objects that define the file system's `LifecycleConfiguration` object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 660
          },
          "name": "lifecyclePolicies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-efs.CfnFileSystem.LifecyclePolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-performancemode"
            },
            "remarks": "We recommend `generalPurpose` performance mode for most file systems. File systems using the `maxIO` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created.\n\n> The `maxIO` mode is not supported on file systems using One Zone storage classes.",
            "stability": "external",
            "summary": "The performance mode of the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 669
          },
          "name": "performanceMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-provisionedthroughputinmibps"
            },
            "remarks": "Valid values are 1-1024. Required if `ThroughputMode` is set to `provisioned` . The upper limit for throughput is 1024 MiB/s. To increase this limit, contact AWS Support . For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide* .",
            "stability": "external",
            "summary": "The throughput, measured in MiB/s, that you want to provision for a file system that you're creating."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 676
          },
          "name": "provisionedThroughputInMibps",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-efs-filesystem-throughputmode"
            },
            "remarks": "The mode can be `bursting` , `provisioned` , or `elastic` . If you set `ThroughputMode` to `provisioned` , you must also set a value for `ProvisionedThroughputInMibps` . After you create the file system, you can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide* .\n\nDefault is `bursting` .",
            "stability": "external",
            "summary": "Specifies the throughput mode for the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 685
          },
          "name": "throughputMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnFileSystemProps"
    },
    "@aws-cdk/aws-efs.CfnMountTarget": {
      "assembly": "@aws-cdk/aws-efs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::EFS::MountTarget",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::EFS::MountTarget` resource is an Amazon EFS resource that creates a mount target for an EFS file system. You can then mount the file system on Amazon EC2 instances or other resources by using the mount target.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::EFS::MountTarget`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnMountTarget = new efs.CfnMountTarget(this, 'MyCfnMountTarget', {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n});"
      },
      "fqn": "@aws-cdk/aws-efs.CfnMountTarget",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::EFS::MountTarget`."
        },
        "locationInModule": {
          "filename": "lib/efs.generated.ts",
          "line": 1379
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-efs.CfnMountTargetProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 1303
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1399
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1413
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnMountTarget",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1307
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "remarks": "Example: `fs-0123456789111222a`",
            "stability": "external",
            "summary": "The ID of the Amazon EFS file system that the mount target provides access to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1334
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "IpAddress"
            },
            "remarks": "Example: 192.0.2.0",
            "stability": "external",
            "summary": "The IPv4 address of the mount target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1342
          },
          "name": "attrIpAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1404
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-filesystemid"
            },
            "stability": "external",
            "summary": "The ID of the file system for which to create the mount target."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1349
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-securitygroups"
            },
            "remarks": "These must be for the same VPC as subnet specified.",
            "stability": "external",
            "summary": "Up to five VPC security group IDs, of the form `sg-xxxxxxxx` ."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1356
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-subnetid"
            },
            "remarks": "For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone.",
            "stability": "external",
            "summary": "The ID of the subnet to add the mount target in."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1363
          },
          "name": "subnetId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-ipaddress"
            },
            "stability": "external",
            "summary": "Valid IPv4 address within the address range of the specified subnet."
          },
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1370
          },
          "name": "ipAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnMountTarget"
    },
    "@aws-cdk/aws-efs.CfnMountTargetProps": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnMountTarget`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as efs from '@aws-cdk/aws-efs';\nconst cfnMountTargetProps: efs.CfnMountTargetProps = {\n  fileSystemId: 'fileSystemId',\n  securityGroups: ['securityGroups'],\n  subnetId: 'subnetId',\n\n  // the properties below are optional\n  ipAddress: 'ipAddress',\n};"
      },
      "fqn": "@aws-cdk/aws-efs.CfnMountTargetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs.generated.ts",
        "line": 1205
      },
      "name": "CfnMountTargetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-filesystemid"
            },
            "stability": "external",
            "summary": "The ID of the file system for which to create the mount target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1212
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-securitygroups"
            },
            "remarks": "These must be for the same VPC as subnet specified.",
            "stability": "external",
            "summary": "Up to five VPC security group IDs, of the form `sg-xxxxxxxx` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1219
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-subnetid"
            },
            "remarks": "For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone.",
            "stability": "external",
            "summary": "The ID of the subnet to add the mount target in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1226
          },
          "name": "subnetId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html#cfn-efs-mounttarget-ipaddress"
            },
            "stability": "external",
            "summary": "Valid IPv4 address within the address range of the specified subnet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs.generated.ts",
            "line": 1233
          },
          "name": "ipAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs.generated:CfnMountTargetProps"
    },
    "@aws-cdk/aws-efs.FileSystem": {
      "assembly": "@aws-cdk/aws-efs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::EFS::FileSystem",
          "exampleMetadata": "infused"
        },
        "remarks": "It creates a new, empty file system in Amazon Elastic File System (Amazon EFS).\nIt also creates mount target (AWS::EFS::MountTarget) implicitly to mount the\nEFS file system on an Amazon Elastic Compute Cloud (Amazon EC2) instance or another resource.",
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html",
        "stability": "stable",
        "summary": "The Elastic File System implementation of IFileSystem.",
        "example": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});"
      },
      "fqn": "@aws-cdk/aws-efs.FileSystem",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructor for creating a new EFS FileSystem."
        },
        "locationInModule": {
          "filename": "lib/efs-file-system.ts",
          "line": 332
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-efs.FileSystemProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 298
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing File System from the given properties."
          },
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 307
          },
          "name": "fromFileSystemAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-efs.FileSystemAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-efs.IFileSystem"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "create access point from this filesystem."
          },
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 401
          },
          "name": "addAccessPoint",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "accessPointOptions",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-efs.AccessPointOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-efs.AccessPoint"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the actions defined in actions to the given grantee on this File System resource."
          },
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 279
          },
          "name": "grant",
          "overrides": "@aws-cdk/aws-efs.IFileSystem",
          "parameters": [
            {
              "docs": {
                "summary": "Principal to grant right to."
              },
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The actions to grant."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        }
      ],
      "name": "FileSystem",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "The default port File System listens on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 302
          },
          "name": "DEFAULT_PORT",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The security groups/rules used to allow network connections to the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 314
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 323
          },
          "name": "fileSystemArn",
          "overrides": "@aws-cdk/aws-efs.IFileSystem",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the file system, assigned by Amazon EFS."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 319
          },
          "name": "fileSystemId",
          "overrides": "@aws-cdk/aws-efs.IFileSystem",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Dependable that can be depended upon to ensure the mount targets of the filesystem are ready."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 325
          },
          "name": "mountTargetsAvailable",
          "overrides": "@aws-cdk/aws-efs.IFileSystem",
          "type": {
            "fqn": "@aws-cdk/core.IDependable"
          }
        }
      ],
      "symbolId": "lib/efs-file-system:FileSystem"
    },
    "@aws-cdk/aws-efs.FileSystemAttributes": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties that describe an existing EFS file system.",
        "example": "import * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.FileSystemAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 231
      },
      "name": "FileSystemAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The security group of the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 235
          },
          "name": "securityGroup",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- determined based on fileSystemId",
            "stability": "stable",
            "summary": "The File System's Arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 249
          },
          "name": "fileSystemArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- determined based on fileSystemArn",
            "stability": "stable",
            "summary": "The File System's ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 242
          },
          "name": "fileSystemId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/efs-file-system:FileSystemAttributes"
    },
    "@aws-cdk/aws-efs.FileSystemProps": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties of EFS FileSystem.",
        "example": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.FileSystemProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 131
      },
      "name": "FileSystemProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "VPC to launch the file system in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 136
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to enable automatic backups for the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 225
          },
          "name": "enableAutomaticBackups",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "aws-cdk": "/aws-efs:defaultEncryptionAtRest' feature flag set, the default is true, otherwise, the default is false.",
              "link": "https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html"
            },
            "default": "- If your application has the '",
            "stability": "stable",
            "summary": "Defines if the data at rest in the file system is encrypted or not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 158
          },
          "name": "encrypted",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CDK generated name",
            "stability": "stable",
            "summary": "The file system's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 165
          },
          "name": "fileSystemName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if 'encrypted' is true, the default key for EFS (/aws/elasticfilesystem) is used",
            "remarks": "This is required to encrypt the data at rest if @encrypted is set to true.",
            "stability": "stable",
            "summary": "The KMS key used for encryption."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 172
          },
          "name": "kmsKey",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-kms.IKey"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None. EFS will not transition files to the IA storage class.",
            "stability": "stable",
            "summary": "A policy used by EFS lifecycle management to transition files to the Infrequent Access (IA) storage class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 179
          },
          "name": "lifecyclePolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.LifecyclePolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None. EFS will not transition files from IA storage to primary storage.",
            "stability": "stable",
            "summary": "A policy used by EFS lifecycle management to transition files from Infrequent Access (IA) storage class to primary storage class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 187
          },
          "name": "outOfInfrequentAccessPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "PerformanceMode.GENERAL_PURPOSE",
            "remarks": "An Amazon EFS file system's performance mode can't be changed after the file system has been created.\nUpdating this property will replace the file system.",
            "stability": "stable",
            "summary": "The performance mode that the file system will operate under."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 195
          },
          "name": "performanceMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.PerformanceMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none, errors out",
            "remarks": "This is a required property if the throughput mode is set to PROVISIONED.\nMust be at least 1MiB/s.",
            "stability": "stable",
            "summary": "Provisioned throughput for the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 211
          },
          "name": "provisionedThroughputPerSecond",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Size"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RemovalPolicy.RETAIN",
            "stability": "stable",
            "summary": "The removal policy to apply to the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 218
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- creates new security group which allows all outbound traffic",
            "stability": "stable",
            "summary": "Security Group to assign to this file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 143
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ThroughputMode.BURSTING",
            "stability": "stable",
            "summary": "Enum to mention the throughput mode of the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 202
          },
          "name": "throughputMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-efs.ThroughputMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the Vpc default strategy if not specified",
            "stability": "stable",
            "summary": "Which subnets to place the mount target in the VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 150
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/efs-file-system:FileSystemProps"
    },
    "@aws-cdk/aws-efs.IAccessPoint": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "stability": "stable",
        "summary": "Represents an EFS AccessPoint."
      },
      "fqn": "@aws-cdk/aws-efs.IAccessPoint",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 9
      },
      "name": "IAccessPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the AccessPoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 22
          },
          "name": "accessPointArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the AccessPoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 15
          },
          "name": "accessPointId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 27
          },
          "name": "fileSystem",
          "type": {
            "fqn": "@aws-cdk/aws-efs.IFileSystem"
          }
        }
      ],
      "symbolId": "lib/access-point:IAccessPoint"
    },
    "@aws-cdk/aws-efs.IFileSystem": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "stability": "stable",
        "summary": "Represents an Amazon EFS file system."
      },
      "fqn": "@aws-cdk/aws-efs.IFileSystem",
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 101
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the actions defined in actions to the given grantee on this File System resource."
          },
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 125
          },
          "name": "grant",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        }
      ],
      "name": "IFileSystem",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 114
          },
          "name": "fileSystemArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the file system, assigned by Amazon EFS."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 107
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Dependable that can be depended upon to ensure the mount targets of the filesystem are ready."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/efs-file-system.ts",
            "line": 119
          },
          "name": "mountTargetsAvailable",
          "type": {
            "fqn": "@aws-cdk/core.IDependable"
          }
        }
      ],
      "symbolId": "lib/efs-file-system:IFileSystem"
    },
    "@aws-cdk/aws-efs.LifecyclePolicy": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-elasticfilesystem-filesystem-lifecyclepolicies",
        "stability": "stable",
        "summary": "EFS Lifecycle Policy, if a file is not accessed for given days, it will move to EFS Infrequent Access.",
        "example": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.LifecyclePolicy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 18
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "After 7 days of not being accessed."
          },
          "name": "AFTER_7_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "After 14 days of not being accessed."
          },
          "name": "AFTER_14_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "After 30 days of not being accessed."
          },
          "name": "AFTER_30_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "After 60 days of not being accessed."
          },
          "name": "AFTER_60_DAYS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "After 90 days of not being accessed."
          },
          "name": "AFTER_90_DAYS"
        }
      ],
      "name": "LifecyclePolicy",
      "symbolId": "lib/efs-file-system:LifecyclePolicy"
    },
    "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html#cfn-efs-filesystem-lifecyclepolicy-transitiontoprimarystorageclass",
        "stability": "stable",
        "summary": "EFS Out Of Infrequent Access Policy, if a file is accessed given times, it will move back to primary storage class.",
        "example": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.OutOfInfrequentAccessPolicy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 51
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "After 1 access."
          },
          "name": "AFTER_1_ACCESS"
        }
      ],
      "name": "OutOfInfrequentAccessPolicy",
      "symbolId": "lib/efs-file-system:OutOfInfrequentAccessPolicy"
    },
    "@aws-cdk/aws-efs.PerformanceMode": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "see": "https://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes",
        "stability": "stable",
        "summary": "EFS Performance mode.",
        "example": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outOfInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.PerformanceMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 63
      },
      "members": [
        {
          "docs": {
            "remarks": "Recommended for the majority of Amazon EFS file systems.",
            "stability": "stable",
            "summary": "General Purpose is ideal for latency-sensitive use cases, like web serving environments, content management systems, home directories, and general file serving."
          },
          "name": "GENERAL_PURPOSE"
        },
        {
          "docs": {
            "remarks": "This scaling is done with a tradeoff\nof slightly higher latencies for file metadata operations.\nHighly parallelized applications and workloads, such as big data analysis,\nmedia processing, and genomics analysis, can benefit from this mode.",
            "stability": "stable",
            "summary": "File systems in the Max I/O mode can scale to higher levels of aggregate throughput and operations per second."
          },
          "name": "MAX_IO"
        }
      ],
      "name": "PerformanceMode",
      "symbolId": "lib/efs-file-system:PerformanceMode"
    },
    "@aws-cdk/aws-efs.PosixUser": {
      "assembly": "@aws-cdk/aws-efs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Represents the PosixUser.",
        "example": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_16_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-efs.PosixUser",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/access-point.ts",
        "line": 54
      },
      "name": "PosixUser",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The POSIX group ID used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 63
          },
          "name": "gid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The POSIX user ID used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 58
          },
          "name": "uid",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Secondary POSIX group IDs used for all file system operations using this access point."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/access-point.ts",
            "line": 70
          },
          "name": "secondaryGids",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/access-point:PosixUser"
    },
    "@aws-cdk/aws-efs.ThroughputMode": {
      "assembly": "@aws-cdk/aws-efs",
      "docs": {
        "see": "https://docs.aws.amazon.com/efs/latest/ug/performance.html#throughput-modes",
        "stability": "stable",
        "summary": "EFS Throughput mode."
      },
      "fqn": "@aws-cdk/aws-efs.ThroughputMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/efs-file-system.ts",
        "line": 86
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "This mode on Amazon EFS scales as the size of the file system in the standard storage class grows."
          },
          "name": "BURSTING"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This mode can instantly provision the throughput of the file system (in MiB/s) independent of the amount of data stored."
          },
          "name": "PROVISIONED"
        }
      ],
      "name": "ThroughputMode",
      "symbolId": "lib/efs-file-system:ThroughputMode"
    }
  },
  "version": "1.199.0",
  "fingerprint": "**********"
}