{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-apigateway": "1.199.0",
    "@aws-cdk/aws-dynamodb": "1.199.0",
    "@aws-cdk/aws-ec2": "1.199.0",
    "@aws-cdk/aws-events": "1.199.0",
    "@aws-cdk/aws-iam": "1.199.0",
    "@aws-cdk/aws-kinesis": "1.199.0",
    "@aws-cdk/aws-lambda": "1.199.0",
    "@aws-cdk/aws-s3": "1.199.0",
    "@aws-cdk/aws-s3-notifications": "1.199.0",
    "@aws-cdk/aws-secretsmanager": "1.199.0",
    "@aws-cdk/aws-sns": "1.199.0",
    "@aws-cdk/aws-sns-subscriptions": "1.199.0",
    "@aws-cdk/aws-sqs": "1.199.0",
    "@aws-cdk/core": "1.199.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-apigateway": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGateway",
          "packageId": "Amazon.CDK.AWS.APIGateway"
        },
        "java": {
          "maven": {
            "artifactId": "apigateway",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigateway"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigateway"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigateway",
          "module": "aws_cdk.aws_apigateway"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-dynamodb": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.DynamoDB",
          "packageId": "Amazon.CDK.AWS.DynamoDB"
        },
        "java": {
          "maven": {
            "artifactId": "dynamodb",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.dynamodb"
        },
        "js": {
          "npm": "@aws-cdk/aws-dynamodb"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-dynamodb",
          "module": "aws_cdk.aws_dynamodb"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kinesis": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Kinesis",
          "packageId": "Amazon.CDK.AWS.Kinesis"
        },
        "java": {
          "maven": {
            "artifactId": "kinesis",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesis"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesis"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesis",
          "module": "aws_cdk.aws_kinesis"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-s3-notifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Notifications",
          "packageId": "Amazon.CDK.AWS.S3.Notifications"
        },
        "java": {
          "maven": {
            "artifactId": "s3-notifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.notifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-notifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-notifications",
          "module": "aws_cdk.aws_s3_notifications"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sns-subscriptions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS.Subscriptions",
          "packageId": "Amazon.CDK.AWS.SNS.Subscriptions"
        },
        "java": {
          "maven": {
            "artifactId": "sns-subscriptions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns.subscriptions"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns-subscriptions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns-subscriptions",
          "module": "aws_cdk.aws_sns_subscriptions"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/aws-stepfunctions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.StepFunctions",
          "packageId": "Amazon.CDK.AWS.StepFunctions"
        },
        "java": {
          "maven": {
            "artifactId": "stepfunctions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.stepfunctions"
        },
        "js": {
          "npm": "@aws-cdk/aws-stepfunctions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-stepfunctions",
          "module": "aws_cdk.aws_stepfunctions"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Event sources for AWS Lambda",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.74.0 (build 6d08790)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "lambda"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-lambda-event-sources",
  "readme": {
    "markdown": "# AWS Lambda Event Sources\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nAn event source mapping is an AWS Lambda resource that reads from an event source and invokes a Lambda function.\nYou can use event source mappings to process items from a stream or queue in services that don't invoke Lambda\nfunctions directly. Lambda provides event source mappings for the following services. Read more about lambda\nevent sources [here](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html).\n\nThis module includes classes that allow using various AWS services as event\nsources for AWS Lambda via the high-level `lambda.addEventSource(source)` API.\n\nNOTE: In most cases, it is also possible to use the resource APIs to invoke an\nAWS Lambda function. This library provides a uniform API for all Lambda event\nsources regardless of the underlying mechanism they use.\n\nThe following code sets up a lambda function with an SQS queue event source -\n\n```ts\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;\n```\n\nThe `eventSourceId` property contains the event source id. This will be a\n[token](https://docs.aws.amazon.com/cdk/latest/guide/tokens.html) that will resolve to the final value at the time of\ndeployment.\n\n## SQS\n\nAmazon Simple Queue Service (Amazon SQS) allows you to build asynchronous\nworkflows. For more information about Amazon SQS, see Amazon Simple Queue\nService. You can configure AWS Lambda to poll for these messages as they arrive\nand then pass the event to a Lambda function invocation. To view a sample event,\nsee [Amazon SQS Event](https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-sqs).\n\nTo set up Amazon Simple Queue Service as an event source for AWS Lambda, you\nfirst create or update an Amazon SQS queue and select custom values for the\nqueue parameters. The following parameters will impact Amazon SQS's polling\nbehavior:\n\n* __visibilityTimeout__: May impact the period between retries.\n* __receiveMessageWaitTime__: Will determine [long\n  poll](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html)\n  duration. The default value is 20 seconds.\n* __batchSize__: Determines how many records are buffered before invoking your lambda function.\n* __maxBatchingWindow__: The maximum amount of time to gather records before invoking the lambda. This increases the likelihood of a full batch at the cost of delayed processing.\n* __enabled__: If the SQS event source mapping should be enabled. The default is true.\n\n```ts\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));\n```\n\n## S3\n\nYou can write Lambda functions to process S3 bucket events, such as the\nobject-created or object-deleted events. For example, when a user uploads a\nphoto to a bucket, you might want Amazon S3 to invoke your Lambda function so\nthat it reads the image and creates a thumbnail for the photo.\n\nYou can use the bucket notification configuration feature in Amazon S3 to\nconfigure the event source mapping, identifying the bucket events that you want\nAmazon S3 to publish and which Lambda function to invoke.\n\n```ts\nimport * as s3 from '@aws-cdk/aws-s3';\nimport { S3EventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst bucket = new s3.Bucket(this, 'mybucket');\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ], // optional\n}));\n```\n\n## SNS\n\nYou can write Lambda functions to process Amazon Simple Notification Service\nnotifications. When a message is published to an Amazon SNS topic, the service\ncan invoke your Lambda function by passing the message payload as a parameter.\nYour Lambda function code can then process the event, for example publish the\nmessage to other Amazon SNS topics, or send the message to other AWS services.\n\nThis also enables you to trigger a Lambda function in response to Amazon\nCloudWatch alarms and other AWS services that use Amazon SNS.\n\nFor an example event, see [Appendix: Message and JSON\nFormats](https://docs.aws.amazon.com/sns/latest/dg/json-formats.html) and\n[Amazon SNS Sample\nEvent](https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-sns).\nFor an example use case, see [Using AWS Lambda with Amazon SNS from Different\nAccounts](https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html).\n\n```ts\nimport * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));\n```\n\nWhen a user calls the SNS Publish API on a topic that your Lambda function is\nsubscribed to, Amazon SNS will call Lambda to invoke your function\nasynchronously. Lambda will then return a delivery status. If there was an error\ncalling Lambda, Amazon SNS will retry invoking the Lambda function up to three\ntimes. After three tries, if Amazon SNS still could not successfully invoke the\nLambda function, then Amazon SNS will send a delivery status failure message to\nCloudWatch.\n\n## DynamoDB Streams\n\nYou can write Lambda functions to process change events from a DynamoDB Table. An event is emitted to a DynamoDB stream (if configured) whenever a write (Put, Delete, Update)\noperation is performed against the table. See [Using AWS Lambda with Amazon DynamoDB](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html) for more information about configuring Lambda function event sources with DynamoDB.\n\nTo process events with a Lambda function, first create or update a DynamoDB table and enable a `stream` specification. Then, create a `DynamoEventSource`\nand add it to your Lambda function. The following parameters will impact Amazon DynamoDB's polling behavior:\n\n* __batchSize__: Determines how many records are buffered before invoking your lambda function - could impact your function's memory usage (if too high) and ability to keep up with incoming data velocity (if too low).\n* __bisectBatchOnError__: If a batch encounters an error, this will cause the batch to be split in two and have each new smaller batch retried, allowing the records in error to be isolated.\n* __reportBatchItemFailures__: Allow functions to return partially successful responses for a batch of records.\n* __maxBatchingWindow__: The maximum amount of time to gather records before invoking the lambda. This increases the likelihood of a full batch at the cost of delayed processing.\n* __maxRecordAge__: The maximum age of a record that will be sent to the function for processing. Records that exceed the max age will be treated as failures.\n* __onFailure__: In the event a record fails after all retries or if the record age has exceeded the configured value, the record will be sent to SQS queue or SNS topic that is specified here\n* __parallelizationFactor__: The number of batches to concurrently process on each shard.\n* __retryAttempts__: The maximum number of times a record should be retried in the event of failure.\n* __startingPosition__: Will determine where to being consumption, either at the most recent ('LATEST') record or the oldest record ('TRIM_HORIZON'). 'TRIM_HORIZON' will ensure you process all available data, while 'LATEST' will ignore all records that arrived prior to attaching the event source.\n* __tumblingWindow__: The duration in seconds of a processing window when using streams.\n* __enabled__: If the DynamoDB Streams event source mapping should be enabled. The default is true.\n\n```ts\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));\n```\n\n## Kinesis\n\nYou can write Lambda functions to process streaming data in Amazon Kinesis Streams. For more information about Amazon Kinesis, see [Amazon Kinesis\nService](https://aws.amazon.com/kinesis/data-streams/). To learn more about configuring Lambda function event sources with kinesis and view a sample event,\nsee [Amazon Kinesis Event](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html).\n\nTo set up Amazon Kinesis as an event source for AWS Lambda, you\nfirst create or update an Amazon Kinesis stream and select custom values for the\nevent source parameters. The following parameters will impact Amazon Kinesis's polling\nbehavior:\n\n* __batchSize__: Determines how many records are buffered before invoking your lambda function - could impact your function's memory usage (if too high) and ability to keep up with incoming data velocity (if too low).\n* __bisectBatchOnError__: If a batch encounters an error, this will cause the batch to be split in two and have each new smaller batch retried, allowing the records in error to be isolated.\n* __reportBatchItemFailures__: Allow functions to return partially successful responses for a batch of records.\n* __maxBatchingWindow__: The maximum amount of time to gather records before invoking the lambda. This increases the likelihood of a full batch at the cost of possibly delaying processing.\n* __maxRecordAge__: The maximum age of a record that will be sent to the function for processing. Records that exceed the max age will be treated as failures.\n* __onFailure__: In the event a record fails and consumes all retries, the record will be sent to SQS queue or SNS topic that is specified here\n* __parallelizationFactor__: The number of batches to concurrently process on each shard.\n* __retryAttempts__: The maximum number of times a record should be retried in the event of failure.\n* __startingPosition__: Will determine where to being consumption, either at the most recent ('LATEST') record or the oldest record ('TRIM_HORIZON'). 'TRIM_HORIZON' will ensure you process all available data, while 'LATEST' will ignore all records that arrived prior to attaching the event source.\n* __tumblingWindow__: The duration in seconds of a processing window when using streams.\n* __enabled__: If the DynamoDB Streams event source mapping should be enabled. The default is true.\n\n```ts\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n```\n\n## Kafka\n\nYou can write Lambda functions to process data either from [Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html) or a [self managed Kafka](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html) cluster.\n\nThe following code sets up Amazon MSK as an event source for a lambda function. Credentials will need to be configured to access the\nMSK cluster, as described in [Username/Password authentication](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html).\n\n```ts\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n```\n\nThe following code sets up a self managed Kafka cluster as an event source. Username and password based authentication\nwill need to be set up as described in [Managing access and permissions](https://docs.aws.amazon.com/lambda/latest/dg/smaa-permissions.html#smaa-permissions-add-secret).\n\n```ts\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n```\n\nIf your self managed Kafka cluster is only reachable via VPC also configure `vpc` `vpcSubnets` and `securityGroup`.\n\n## Roadmap\n\nEventually, this module will support all the event sources described under\n[Supported Event\nSources](https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html)\nin the AWS Lambda Developer Guide.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-lambda-event-sources",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Lambda.EventSources",
      "packageId": "Amazon.CDK.AWS.Lambda.EventSources"
    },
    "java": {
      "maven": {
        "artifactId": "lambda-event-sources",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.lambda.eventsources"
    },
    "js": {
      "npm": "@aws-cdk/aws-lambda-event-sources"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-lambda-event-sources",
      "module": "aws_cdk.aws_lambda_event_sources"
    }
  },
  "types": {
    "@aws-cdk/aws-lambda-event-sources.ApiEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\nconst apiEventSource = new lambda_event_sources.ApiEventSource('method', 'path', /* all optional props */ {\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: apigateway.AuthorizationType.NONE,\n  authorizer: authorizer,\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: model,\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: model,\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidator: requestValidator,\n  requestValidatorOptions: {\n    requestValidatorName: 'requestValidatorName',\n    validateRequestBody: false,\n    validateRequestParameters: false,\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.ApiEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/api.ts",
          "line": 6
        },
        "parameters": [
          {
            "name": "method",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "path",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-apigateway.MethodOptions"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/api.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/api.ts",
            "line": 12
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "ApiEventSource",
      "symbolId": "lib/api:ApiEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.AuthenticationMethod": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "The authentication method to use with SelfManagedKafkaEventSource."
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.AuthenticationMethod",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 43
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "SASL_SCRAM_512_AUTH authentication method for your Kafka cluster."
          },
          "name": "SASL_SCRAM_512_AUTH"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "SASL_SCRAM_256_AUTH authentication method for your Kafka cluster."
          },
          "name": "SASL_SCRAM_256_AUTH"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "BASIC_AUTH (SASL/PLAIN) authentication method for your Kafka cluster."
          },
          "name": "BASIC_AUTH"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "CLIENT_CERTIFICATE_TLS_AUTH (mTLS) authentication method for your Kafka cluster."
          },
          "name": "CLIENT_CERTIFICATE_TLS_AUTH"
        }
      ],
      "name": "AuthenticationMethod",
      "symbolId": "lib/kafka:AuthenticationMethod"
    },
    "@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The set of properties for streaming event sources shared by Dynamo, Kinesis and Kafka.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\nconst baseStreamEventSourceProps: lambda_event_sources.BaseStreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stream.ts",
        "line": 8
      },
      "name": "BaseStreamEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Where to begin consuming the stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 27
          },
          "name": "startingPosition",
          "type": {
            "fqn": "@aws-cdk/aws-lambda.StartingPosition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "100",
            "remarks": "Your function receives an\nevent with all the retrieved records.\n\nValid Range:\n* Minimum value of 1\n* Maximum value of:\n   * 1000 for {@link DynamoEventSource}\n   * 10000 for {@link KinesisEventSource}, {@link ManagedKafkaEventSource} and {@link SelfManagedKafkaEventSource}",
            "stability": "stable",
            "summary": "The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 22
          },
          "name": "batchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "If the stream event source mapping should be enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 42
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(0)",
            "remarks": "Maximum of Duration.minutes(5)",
            "stability": "stable",
            "summary": "The maximum amount of time to gather records before invoking the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 35
          },
          "name": "maxBatchingWindow",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/stream:BaseStreamEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.DynamoEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "base": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
      "docs": {
        "stability": "stable",
        "summary": "Use an Amazon DynamoDB stream as an event source for AWS Lambda.",
        "example": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.DynamoEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/dynamodb.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "table",
            "type": {
              "fqn": "@aws-cdk/aws-dynamodb.ITable"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/dynamodb.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/dynamodb.ts",
            "line": 25
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "DynamoEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The identifier for this EventSourceMapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/dynamodb.ts",
            "line": 41
          },
          "name": "eventSourceMappingId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/dynamodb:DynamoEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/dynamodb.ts",
        "line": 6
      },
      "name": "DynamoEventSourceProps",
      "symbolId": "lib/dynamodb:DynamoEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a Kafka event source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: secretsmanager.Secret;\nconst kafkaEventSourceProps: lambda_event_sources.KafkaEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  topic: 'topic',\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  secret: secret,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 16
      },
      "name": "KafkaEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Kafka topic to subscribe to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 20
          },
          "name": "topic",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "The secret with the Kafka credentials, see https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html for details This field is required if your Kafka brokers are accessed over the Internet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 27
          },
          "name": "secret",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
          }
        }
      ],
      "symbolId": "lib/kafka:KafkaEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.KinesisEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "base": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
      "docs": {
        "stability": "stable",
        "summary": "Use an Amazon Kinesis stream as an event source for AWS Lambda.",
        "example": "import * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.KinesisEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/kinesis.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "stream",
            "type": {
              "fqn": "@aws-cdk/aws-kinesis.IStream"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/kinesis.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/kinesis.ts",
            "line": 25
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "KinesisEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The identifier for this EventSourceMapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kinesis.ts",
            "line": 44
          },
          "name": "eventSourceMappingId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kinesis.ts",
            "line": 15
          },
          "name": "stream",
          "type": {
            "fqn": "@aws-cdk/aws-kinesis.IStream"
          }
        }
      ],
      "symbolId": "lib/kinesis:KinesisEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "import * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kinesis.ts",
        "line": 6
      },
      "name": "KinesisEventSourceProps",
      "symbolId": "lib/kinesis:KinesisEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "base": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
      "docs": {
        "stability": "stable",
        "summary": "Use a MSK cluster as a streaming source for AWS Lambda.",
        "example": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/kafka.ts",
          "line": 110
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 105
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 115
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "ManagedKafkaEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The identifier for this EventSourceMapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 160
          },
          "name": "eventSourceMappingId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/kafka:ManagedKafkaEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for a MSK event source.",
        "example": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 33
      },
      "name": "ManagedKafkaEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "An MSK cluster construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 37
          },
          "name": "clusterArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/kafka:ManagedKafkaEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.S3EventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "Use S3 bucket notifications as an event source for AWS Lambda.",
        "example": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.S3EventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/s3.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "bucket",
            "type": {
              "fqn": "@aws-cdk/aws-s3.Bucket"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.S3EventSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/s3.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/s3.ts",
            "line": 28
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "S3EventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/s3.ts",
            "line": 24
          },
          "name": "bucket",
          "type": {
            "fqn": "@aws-cdk/aws-s3.Bucket"
          }
        }
      ],
      "symbolId": "lib/s3:S3EventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.S3EventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.S3EventSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/s3.ts",
        "line": 5
      },
      "name": "S3EventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The s3 event types that will trigger the notification."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/s3.ts",
            "line": 9
          },
          "name": "events",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-s3.EventType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Each filter must include a `prefix` and/or `suffix` that will be matched\nagainst the s3 object key. Refer to the S3 Developer Guide for details\nabout allowed filter rules.",
            "stability": "stable",
            "summary": "S3 object key filter rules to determine which objects trigger this event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/s3.ts",
            "line": 17
          },
          "name": "filters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-s3.NotificationKeyFilter"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/s3:S3EventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "base": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
      "docs": {
        "stability": "stable",
        "summary": "Use a self hosted Kafka installation as a streaming source for AWS Lambda.",
        "example": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/kafka.ts",
          "line": 175
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 171
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 190
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "SelfManagedKafkaEventSource",
      "symbolId": "lib/kafka:SelfManagedKafkaEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "remarks": "If your Kafka cluster is only reachable via VPC make sure to configure it.",
        "stability": "stable",
        "summary": "Properties for a self managed Kafka cluster event source.",
        "example": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/kafka.ts",
        "line": 66
      },
      "name": "SelfManagedKafkaEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "They are in the format `abc.xyz.com:xxxx`.",
            "stability": "stable",
            "summary": "The list of host and port pairs that are the addresses of the Kafka brokers in a \"bootstrap\" Kafka cluster that a Kafka client connects to initially to bootstrap itself."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 71
          },
          "name": "bootstrapServers",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "AuthenticationMethod.SASL_SCRAM_512_AUTH",
            "stability": "stable",
            "summary": "The authentication method for your Kafka cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 99
          },
          "name": "authenticationMethod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-event-sources.AuthenticationMethod"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none, required if setting vpc",
            "stability": "stable",
            "summary": "If your Kafka brokers are only reachable via VPC, provide the security group here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 92
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "If your Kafka brokers are only reachable via VPC provide the VPC here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 78
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none, required if setting vpc",
            "stability": "stable",
            "summary": "If your Kafka brokers are only reachable via VPC, provide the subnets selection here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/kafka.ts",
            "line": 85
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/kafka:SelfManagedKafkaEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.SnsDlq": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "An SNS dead letter queue destination configuration for a Lambda event source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sns from '@aws-cdk/aws-sns';\n\ndeclare const topic: sns.Topic;\nconst snsDlq = new lambda_event_sources.SnsDlq(topic);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SnsDlq",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/sns-dlq.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "topic",
            "type": {
              "fqn": "@aws-cdk/aws-sns.ITopic"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSourceDlq"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/sns-dlq.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a destination configuration for the DLQ."
          },
          "locationInModule": {
            "filename": "lib/sns-dlq.ts",
            "line": 14
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSourceDlq",
          "parameters": [
            {
              "name": "_target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IEventSourceMapping"
              }
            },
            {
              "name": "targetHandler",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-lambda.DlqDestinationConfig"
            }
          }
        }
      ],
      "name": "SnsDlq",
      "symbolId": "lib/sns-dlq:SnsDlq"
    },
    "@aws-cdk/aws-lambda-event-sources.SnsEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "Use an Amazon SNS topic as an event source for AWS Lambda.",
        "example": "import * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SnsEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/sns.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "topic",
            "type": {
              "fqn": "@aws-cdk/aws-sns.ITopic"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/sns.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/sns.ts",
            "line": 21
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "SnsEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sns.ts",
            "line": 17
          },
          "name": "topic",
          "type": {
            "fqn": "@aws-cdk/aws-sns.ITopic"
          }
        }
      ],
      "symbolId": "lib/sns:SnsEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties forwarded to the Lambda Subscription.",
        "example": "import * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/sns.ts",
        "line": 8
      },
      "name": "SnsEventSourceProps",
      "symbolId": "lib/sns:SnsEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.SqsDlq": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "An SQS dead letter queue destination configuration for a Lambda event source.",
        "example": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SqsDlq",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/sqs-dlq.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "queue",
            "type": {
              "fqn": "@aws-cdk/aws-sqs.IQueue"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSourceDlq"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/sqs-dlq.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns a destination configuration for the DLQ."
          },
          "locationInModule": {
            "filename": "lib/sqs-dlq.ts",
            "line": 14
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSourceDlq",
          "parameters": [
            {
              "name": "_target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IEventSourceMapping"
              }
            },
            {
              "name": "targetHandler",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-lambda.DlqDestinationConfig"
            }
          }
        }
      ],
      "name": "SqsDlq",
      "symbolId": "lib/sqs-dlq:SqsDlq"
    },
    "@aws-cdk/aws-lambda-event-sources.SqsEventSource": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "Use an Amazon SQS queue as an event source for AWS Lambda.",
        "example": "import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SqsEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/sqs.ts",
          "line": 50
        },
        "parameters": [
          {
            "name": "queue",
            "type": {
              "fqn": "@aws-cdk/aws-sqs.IQueue"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/sqs.ts",
        "line": 47
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 69
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSource",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        }
      ],
      "name": "SqsEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The identifier for this EventSourceMapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 85
          },
          "name": "eventSourceMappingId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 50
          },
          "name": "queue",
          "type": {
            "fqn": "@aws-cdk/aws-sqs.IQueue"
          }
        }
      ],
      "symbolId": "lib/sqs:SqsEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/sqs.ts",
        "line": 5
      },
      "name": "SqsEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "10",
            "remarks": "Your function receives an\nevent with all the retrieved records.\n\nValid Range: Minimum value of 1. Maximum value of 10.\nIf `maxBatchingWindow` is configured, this value can go up to 10,000.",
            "stability": "stable",
            "summary": "The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 16
          },
          "name": "batchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "If the SQS event source mapping should be enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 41
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no batching window. The lambda function will be invoked immediately with the records that are available.",
            "remarks": "Valid Range: Minimum value of 0 minutes. Maximum value of 5 minutes.",
            "stability": "stable",
            "summary": "The maximum amount of time to gather records before invoking the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 25
          },
          "name": "maxBatchingWindow",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-batchfailurereporting",
            "stability": "stable",
            "summary": "Allow functions to return partially successful responses for a batch of records."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/sqs.ts",
            "line": 34
          },
          "name": "reportBatchItemFailures",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/sqs:SqsEventSourceProps"
    },
    "@aws-cdk/aws-lambda-event-sources.StreamEventSource": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "docs": {
        "stability": "stable",
        "summary": "Use an stream as an event source for AWS Lambda."
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.StreamEventSource",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/stream.ts",
          "line": 116
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps"
            }
          }
        ],
        "protected": true
      },
      "interfaces": [
        "@aws-cdk/aws-lambda.IEventSource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stream.ts",
        "line": 115
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Called by `lambda.addEventSource` to allow the event source to bind to this function."
          },
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 119
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-lambda.IEventSource",
          "parameters": [
            {
              "name": "_target",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.IFunction"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 121
          },
          "name": "enrichMappingOptions",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-lambda.EventSourceMappingOptions"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-lambda.EventSourceMappingOptions"
            }
          }
        }
      ],
      "name": "StreamEventSource",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 116
          },
          "name": "props",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps"
          }
        }
      ],
      "symbolId": "lib/stream:StreamEventSource"
    },
    "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps": {
      "assembly": "@aws-cdk/aws-lambda-event-sources",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The set of properties for streaming event sources shared by Dynamo and Kinesis.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\nconst streamEventSourceProps: lambda_event_sources.StreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  tumblingWindow: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps",
      "interfaces": [
        "@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stream.ts",
        "line": 49
      },
      "name": "StreamEventSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "If the function returns an error, split the batch in two and retry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 55
          },
          "name": "bisectBatchOnError",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the retention period configured on the stream",
            "remarks": "Valid Range:\n* Minimum value of 60 seconds\n* Maximum value of 7 days",
            "stability": "stable",
            "summary": "The maximum age of a record that Lambda sends to a function for processing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 65
          },
          "name": "maxRecordAge",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- discarded records are ignored",
            "stability": "stable",
            "summary": "An Amazon SQS queue or Amazon SNS topic destination for discarded records."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 109
          },
          "name": "onFailure",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda.IEventSourceDlq"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "Valid Range:\n* Minimum value of 1\n* Maximum value of 10",
            "stability": "stable",
            "summary": "The number of batches to process from each shard concurrently."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 85
          },
          "name": "parallelizationFactor",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting",
            "stability": "stable",
            "summary": "Allow functions to return partially successful responses for a batch of records."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 94
          },
          "name": "reportBatchItemFailures",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- retry until the record expires",
            "stability": "stable",
            "summary": "Maximum number of retry attempts Valid Range: * Minimum value of 0 * Maximum value of 10000."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 75
          },
          "name": "retryAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "The size of the tumbling windows to group records sent to DynamoDB or Kinesis Valid Range: 0 - 15 minutes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stream.ts",
            "line": 102
          },
          "name": "tumblingWindow",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/stream:StreamEventSourceProps"
    }
  },
  "version": "1.199.0",
  "fingerprint": "**********"
}