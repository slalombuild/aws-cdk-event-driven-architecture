{"version":"2","toolVersion":"1.80.0","snippets":{"f107a45f0fea9c7d1dd627c3b945c55892a1668cad1dff6990e692f7654e593a":{"translations":{"python":{"source":"from aws_cdk.aws_lambda_event_sources import SqsEventSource\n\n# fn: lambda.Function\n\nqueue = sqs.Queue(self, \"MyQueue\")\nevent_source = SqsEventSource(queue)\nfn.add_event_source(event_source)\n\nevent_source_id = event_source.event_source_mapping_id","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction fn;\n\nvar queue = new Queue(this, \"MyQueue\");\nvar eventSource = new SqsEventSource(queue);\nfn.AddEventSource(eventSource);\n\nvar eventSourceId = eventSource.EventSourceMappingId;","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"MyQueue\");\nSqsEventSource eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nString eventSourceId = eventSource.getEventSourceMappingId();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar fn function\n\nqueue := sqs.NewQueue(this, jsii.String(\"MyQueue\"))\neventSource := awscdkawslambdaeventsources.NewSqsEventSource(queue)\nfn.AddEventSource(eventSource)\n\neventSourceId := eventSource.eventSourceMappingId","version":"1"},"$":{"source":"import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":26}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SqsEventSource","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":16,"104":1,"130":1,"153":1,"169":1,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"254":1,"255":1,"257":1,"258":1,"290":1},"fqnsFingerprint":"fa75798955b35b54f850234ce850dcdb34d9b63d6910326ab80a41d8613161a9"},"f1ed1abfcfb436d1f1aaa38bc7da591198daab9c6628eac9b0722174b95af16a":{"translations":{"python":{"source":"from aws_cdk.aws_lambda_event_sources import SqsEventSource\n# fn: lambda.Function\n\n\nqueue = sqs.Queue(self, \"MyQueue\",\n    visibility_timeout=Duration.seconds(30),  # default,\n    receive_message_wait_time=Duration.seconds(20)\n)\n\nfn.add_event_source(SqsEventSource(queue,\n    batch_size=10,  # default\n    max_batching_window=Duration.minutes(5),\n    report_batch_item_failures=True\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\nFunction fn;\n\n\nvar queue = new Queue(this, \"MyQueue\", new QueueProps {\n    VisibilityTimeout = Duration.Seconds(30),  // default,\n    ReceiveMessageWaitTime = Duration.Seconds(20)\n});\n\nfn.AddEventSource(new SqsEventSource(queue, new SqsEventSourceProps {\n    BatchSize = 10,  // default\n    MaxBatchingWindow = Duration.Minutes(5),\n    ReportBatchItemFailures = true\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;\nFunction fn;\n\n\nQueue queue = Queue.Builder.create(this, \"MyQueue\")\n        .visibilityTimeout(Duration.seconds(30)) // default,\n        .receiveMessageWaitTime(Duration.seconds(20))\n        .build();\n\nfn.addEventSource(SqsEventSource.Builder.create(queue)\n        .batchSize(10) // default\n        .maxBatchingWindow(Duration.minutes(5))\n        .reportBatchItemFailures(true)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nvar fn function\n\n\nqueue := sqs.NewQueue(this, jsii.String(\"MyQueue\"), &QueueProps{\n\tVisibilityTimeout: awscdkcore.Duration_Seconds(jsii.Number(30)),\n\t // default,\n\tReceiveMessageWaitTime: *awscdkcore.Duration_*Seconds(jsii.Number(20)),\n})\n\nfn.AddEventSource(awscdkawslambdaeventsources.NewSqsEventSource(queue, &SqsEventSourceProps{\n\tBatchSize: jsii.Number(10),\n\t // default\n\tMaxBatchingWindow: *awscdkcore.Duration_Minutes(jsii.Number(5)),\n\tReportBatchItemFailures: jsii.Boolean(true),\n}))","version":"1"},"$":{"source":"import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":62}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SqsEventSource","@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","@aws-cdk/aws-sqs.QueueProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","@aws-cdk/core.Duration#seconds","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":4,"10":2,"75":22,"104":1,"106":1,"130":1,"153":1,"169":1,"193":2,"194":5,"196":4,"197":2,"225":2,"226":1,"242":2,"243":2,"254":1,"255":1,"257":1,"258":1,"281":5,"290":1},"fqnsFingerprint":"8602992876dd7b54633ea598d7440fd5cbe10f34b844bc3f36edbb5970b06a36"},"87825ef29849bead5320d44172eaff97febd8faf9383dc97cb70eb34a3c4e1e5":{"translations":{"python":{"source":"import aws_cdk.aws_s3 as s3\nfrom aws_cdk.aws_lambda_event_sources import S3EventSource\n# fn: lambda.Function\n\n\nbucket = s3.Bucket(self, \"mybucket\")\n\nfn.add_event_source(S3EventSource(bucket,\n    events=[s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],\n    filters=[s3.NotificationKeyFilter(prefix=\"subdir/\")]\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.S3;\nusing Amazon.CDK.AWS.Lambda.EventSources;\nFunction fn;\n\n\nvar bucket = new Bucket(this, \"mybucket\");\n\nfn.AddEventSource(new S3EventSource(bucket, new S3EventSourceProps {\n    Events = new [] { EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED },\n    Filters = new [] { new NotificationKeyFilter { Prefix = \"subdir/\" } }\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.services.lambda.eventsources.S3EventSource;\nFunction fn;\n\n\nBucket bucket = new Bucket(this, \"mybucket\");\n\nfn.addEventSource(S3EventSource.Builder.create(bucket)\n        .events(List.of(EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED))\n        .filters(List.of(NotificationKeyFilter.builder().prefix(\"subdir/\").build()))\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawss3\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nvar fn function\n\n\nbucket := s3.NewBucket(this, jsii.String(\"mybucket\"))\n\nfn.AddEventSource(awscdkawslambdaeventsources.NewS3EventSource(bucket, &S3EventSourceProps{\n\tEvents: []eventType{\n\t\ts3.*eventType_OBJECT_CREATED,\n\t\ts3.*eventType_OBJECT_REMOVED,\n\t},\n\tFilters: []notificationKeyFilter{\n\t\t&notificationKeyFilter{\n\t\t\tPrefix: jsii.String(\"subdir/\"),\n\t\t},\n\t},\n}))","version":"1"},"$":{"source":"import * as s3 from '@aws-cdk/aws-s3';\nimport { S3EventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst bucket = new s3.Bucket(this, 'mybucket');\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ], // optional\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":89}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.S3EventSource","@aws-cdk/aws-lambda-event-sources.S3EventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.EventType","@aws-cdk/aws-s3.EventType#OBJECT_CREATED","@aws-cdk/aws-s3.EventType#OBJECT_REMOVED","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\nimport { S3EventSource } from '@aws-cdk/aws-lambda-event-sources';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst bucket = new s3.Bucket(this, 'mybucket');\n\nfn.addEventSource(new S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ], // optional\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":21,"104":1,"130":1,"153":1,"169":1,"192":2,"193":2,"194":6,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":1,"257":1,"258":1,"281":3,"290":1},"fqnsFingerprint":"37616ec74c41c6b724475caa0d70b2599d094fb7a53280c7881ff62e4112572e"},"fd200ee045f57b48a34e2ee60a1339a54941abed39a714f496127998dec08798":{"translations":{"python":{"source":"import aws_cdk.aws_sns as sns\nfrom aws_cdk.aws_lambda_event_sources import SnsEventSource\n\n# topic: sns.Topic\n\n# fn: lambda.Function\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(SnsEventSource(topic,\n    filter_policy={},\n    dead_letter_queue=dead_letter_queue\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTopic topic;\n\nFunction fn;\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new SnsEventSource(topic, new SnsEventSourceProps {\n    FilterPolicy = new Dictionary<string, object> { },\n    DeadLetterQueue = deadLetterQueue\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.lambda.eventsources.SnsEventSource;\n\nTopic topic;\n\nFunction fn;\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(SnsEventSource.Builder.create(topic)\n        .filterPolicy(Map.of())\n        .deadLetterQueue(deadLetterQueue)\n        .build());","version":"1"},"go":{"source":"import sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar topic topic\n\nvar fn function\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewSnsEventSource(topic, &SnsEventSourceProps{\n\tFilterPolicy: map[string]interface{}{\n\t},\n\tDeadLetterQueue: deadLetterQueue,\n}))","version":"1"},"$":{"source":"import * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":120}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SnsEventSource","@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":18,"104":1,"130":2,"153":2,"169":2,"193":2,"194":2,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"d2faeea16486d79be8e4d71762e4f188a48f2260d9966086b95d088cbf5aae6b"},"2d22c8de99e63d078511b10bd2ace13b6afdc064dc9db6166d4d108f58f27223":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\nfrom aws_cdk.aws_lambda_event_sources import DynamoEventSource, SqsDlq\n\n# table: dynamodb.Table\n\n# fn: lambda.Function\n\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(DynamoEventSource(table,\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    batch_size=5,\n    bisect_batch_on_error=True,\n    on_failure=SqsDlq(dead_letter_queue),\n    retry_attempts=10\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTable table;\n\nFunction fn;\n\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new DynamoEventSource(table, new DynamoEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    BatchSize = 5,\n    BisectBatchOnError = true,\n    OnFailure = new SqsDlq(deadLetterQueue),\n    RetryAttempts = 10\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.lambda.eventsources.DynamoEventSource;\nimport software.amazon.awscdk.services.lambda.eventsources.SqsDlq;\n\nTable table;\n\nFunction fn;\n\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(DynamoEventSource.Builder.create(table)\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .batchSize(5)\n        .bisectBatchOnError(true)\n        .onFailure(new SqsDlq(deadLetterQueue))\n        .retryAttempts(10)\n        .build());","version":"1"},"go":{"source":"import dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar table table\n\nvar fn function\n\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewDynamoEventSource(table, &DynamoEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\tBatchSize: jsii.Number(5),\n\tBisectBatchOnError: jsii.Boolean(true),\n\tOnFailure: *awscdkawslambdaeventsources.NewSqsDlq(deadLetterQueue),\n\tRetryAttempts: jsii.Number(10),\n}))","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":162}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.ITable","@aws-cdk/aws-lambda-event-sources.DynamoEventSource","@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps","@aws-cdk/aws-lambda-event-sources.SqsDlq","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.IEventSourceDlq","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":3,"75":26,"104":1,"106":1,"130":2,"153":2,"169":2,"193":1,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":2,"281":5,"290":1},"fqnsFingerprint":"5f8bb9d07294c756d85085133044b7d0781c84fa78554bb6ff57b4bde33238ad"},"cab1d43a025d2d4acf92030428d9dc8b1b9a85adeafb4d4d1f8e0248226099d5":{"translations":{"python":{"source":"import aws_cdk.aws_kinesis as kinesis\nfrom aws_cdk.aws_lambda_event_sources import KinesisEventSource\n\n# my_function: lambda.Function\n\n\nstream = kinesis.Stream(self, \"MyStream\")\nmy_function.add_event_source(KinesisEventSource(stream,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Kinesis;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\nvar stream = new Stream(this, \"MyStream\");\nmyFunction.AddEventSource(new KinesisEventSource(stream, new KinesisEventSourceProps {\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.kinesis.*;\nimport software.amazon.awscdk.services.lambda.eventsources.KinesisEventSource;\n\nFunction myFunction;\n\n\nStream stream = new Stream(this, \"MyStream\");\nmyFunction.addEventSource(KinesisEventSource.Builder.create(stream)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import kinesis \"github.com/aws-samples/dummy/awscdkawskinesis\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\nstream := kinesis.NewStream(this, jsii.String(\"MyStream\"))\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewKinesisEventSource(stream, &KinesisEventSourceProps{\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":203}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-kinesis.IStream","@aws-cdk/aws-kinesis.Stream","@aws-cdk/aws-lambda-event-sources.KinesisEventSource","@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst stream = new kinesis.Stream(this, 'MyStream');\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"325fc0b1e76f13f3c06e5125ecb7c1036699f66587471cc267d96bc9a8b33399"},"0385cbb6202a2ae225da5dab014f01261cf06e2c3247619012c5af6d0ae36f8d":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import ManagedKafkaEventSource\n\n# my_function: lambda.Function\n\n\n# Your MSK cluster arn\ncluster_arn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\n\n# The secret that allows access to your MSK cluster\n# You still have to make sure that it is associated with your cluster as described in the documentation\nsecret = Secret(self, \"Secret\", secret_name=\"AmazonMSK_KafkaSecret\")\nmy_function.add_event_source(ManagedKafkaEventSource(\n    cluster_arn=cluster_arn,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nvar clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nvar secret = new Secret(this, \"Secret\", new SecretProps { SecretName = \"AmazonMSK_KafkaSecret\" });\nmyFunction.AddEventSource(new ManagedKafkaEventSource(new ManagedKafkaEventSourceProps {\n    ClusterArn = clusterArn,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.ManagedKafkaEventSource;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nString clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nSecret secret = Secret.Builder.create(this, \"Secret\").secretName(\"AmazonMSK_KafkaSecret\").build();\nmyFunction.addEventSource(ManagedKafkaEventSource.Builder.create()\n        .clusterArn(clusterArn)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\n// Your MSK cluster arn\nclusterArn := \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nsecret := awscdkawssecretsmanager.NewSecret(this, jsii.String(\"Secret\"), &SecretProps{\n\tSecretName: jsii.String(\"AmazonMSK_KafkaSecret\"),\n})\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewManagedKafkaEventSource(&ManagedKafkaEventSourceProps{\n\tClusterArn: jsii.String(ClusterArn),\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":223}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret","@aws-cdk/aws-secretsmanager.Secret","@aws-cdk/aws-secretsmanager.SecretProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":6,"75":23,"104":1,"130":1,"153":1,"169":1,"193":2,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"282":1,"290":1},"fqnsFingerprint":"e7f1dd686bd17225bcd91973b75a734b3c1b4383f165db6750e205e834119126"},"78b04588af020c5d60b95117bd2a77c4c0a82e640a5ef95d43710f10b67eded2":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import SelfManagedKafkaEventSource\n\n# The secret that allows access to your self hosted Kafka cluster\n# secret: Secret\n\n# my_function: lambda.Function\n\n\n# The list of Kafka brokers\nbootstrap_servers = [\"kafka-broker:9092\"]\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\nmy_function.add_event_source(SelfManagedKafkaEventSource(\n    bootstrap_servers=bootstrap_servers,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nvar bootstrapServers = new [] { \"kafka-broker:9092\" };\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\nmyFunction.AddEventSource(new SelfManagedKafkaEventSource(new SelfManagedKafkaEventSourceProps {\n    BootstrapServers = bootstrapServers,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.SelfManagedKafkaEventSource;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nString[] bootstrapServers = List.of(\"kafka-broker:9092\");\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\nmyFunction.addEventSource(SelfManagedKafkaEventSource.Builder.create()\n        .bootstrapServers(bootstrapServers)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\n// The secret that allows access to your self hosted Kafka cluster\nvar secret secret\n\nvar myFunction function\n\n\n// The list of Kafka brokers\nbootstrapServers := []*string{\n\t\"kafka-broker:9092\",\n}\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewSelfManagedKafkaEventSource(&SelfManagedKafkaEventSourceProps{\n\tBootstrapServers: bootstrapServers,\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-lambda-event-sources"},"field":{"field":"markdown","line":250}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":4,"75":23,"130":2,"153":1,"169":2,"192":1,"193":1,"194":3,"196":1,"197":1,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"290":1},"fqnsFingerprint":"5c499120018bcb37d50681b2acb24b8bde2cdd810346e01a9247ad9605fe6339"},"cb8d5ec1b879e19ae41d1e1ce9e393a606ca32642fc74cb462c9128c3bf24441":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigateway as apigateway\nimport aws_cdk.aws_lambda_event_sources as lambda_event_sources\n\n# authorizer: apigateway.Authorizer\n# model: apigateway.Model\n# request_validator: apigateway.RequestValidator\n\napi_event_source = lambda_event_sources.ApiEventSource(\"method\", \"path\",\n    api_key_required=False,\n    authorization_scopes=[\"authorizationScopes\"],\n    authorization_type=apigateway.AuthorizationType.NONE,\n    authorizer=authorizer,\n    method_responses=[apigateway.MethodResponse(\n        status_code=\"statusCode\",\n\n        # the properties below are optional\n        response_models={\n            \"response_models_key\": model\n        },\n        response_parameters={\n            \"response_parameters_key\": False\n        }\n    )],\n    operation_name=\"operationName\",\n    request_models={\n        \"request_models_key\": model\n    },\n    request_parameters={\n        \"request_parameters_key\": False\n    },\n    request_validator=request_validator,\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"requestValidatorName\",\n        validate_request_body=False,\n        validate_request_parameters=False\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nAuthorizer authorizer;\nModel model;\nRequestValidator requestValidator;\n\nvar apiEventSource = new ApiEventSource(\"method\", \"path\", new MethodOptions {\n    ApiKeyRequired = false,\n    AuthorizationScopes = new [] { \"authorizationScopes\" },\n    AuthorizationType = AuthorizationType.NONE,\n    Authorizer = authorizer,\n    MethodResponses = new [] { new MethodResponse {\n        StatusCode = \"statusCode\",\n\n        // the properties below are optional\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"responseModelsKey\", model }\n        },\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"responseParametersKey\", false }\n        }\n    } },\n    OperationName = \"operationName\",\n    RequestModels = new Dictionary<string, IModel> {\n        { \"requestModelsKey\", model }\n    },\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"requestParametersKey\", false }\n    },\n    RequestValidator = requestValidator,\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"requestValidatorName\",\n        ValidateRequestBody = false,\n        ValidateRequestParameters = false\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.eventsources.*;\n\nAuthorizer authorizer;\nModel model;\nRequestValidator requestValidator;\n\nApiEventSource apiEventSource = ApiEventSource.Builder.create(\"method\", \"path\")\n        .apiKeyRequired(false)\n        .authorizationScopes(List.of(\"authorizationScopes\"))\n        .authorizationType(AuthorizationType.NONE)\n        .authorizer(authorizer)\n        .methodResponses(List.of(MethodResponse.builder()\n                .statusCode(\"statusCode\")\n\n                // the properties below are optional\n                .responseModels(Map.of(\n                        \"responseModelsKey\", model))\n                .responseParameters(Map.of(\n                        \"responseParametersKey\", false))\n                .build()))\n        .operationName(\"operationName\")\n        .requestModels(Map.of(\n                \"requestModelsKey\", model))\n        .requestParameters(Map.of(\n                \"requestParametersKey\", false))\n        .requestValidator(requestValidator)\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"requestValidatorName\")\n                .validateRequestBody(false)\n                .validateRequestParameters(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigateway \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport lambda_event_sources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar authorizer authorizer\nvar model model\nvar requestValidator requestValidator\n\napiEventSource := lambda_event_sources.NewApiEventSource(jsii.String(\"method\"), jsii.String(\"path\"), &MethodOptions{\n\tApiKeyRequired: jsii.Boolean(false),\n\tAuthorizationScopes: []*string{\n\t\tjsii.String(\"authorizationScopes\"),\n\t},\n\tAuthorizationType: apigateway.AuthorizationType_NONE,\n\tAuthorizer: authorizer,\n\tMethodResponses: []methodResponse{\n\t\t&methodResponse{\n\t\t\tStatusCode: jsii.String(\"statusCode\"),\n\n\t\t\t// the properties below are optional\n\t\t\tResponseModels: map[string]iModel{\n\t\t\t\t\"responseModelsKey\": model,\n\t\t\t},\n\t\t\tResponseParameters: map[string]*bool{\n\t\t\t\t\"responseParametersKey\": jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\tOperationName: jsii.String(\"operationName\"),\n\tRequestModels: map[string]*iModel{\n\t\t\"requestModelsKey\": model,\n\t},\n\tRequestParameters: map[string]*bool{\n\t\t\"requestParametersKey\": jsii.Boolean(false),\n\t},\n\tRequestValidator: requestValidator,\n\tRequestValidatorOptions: &RequestValidatorOptions{\n\t\tRequestValidatorName: jsii.String(\"requestValidatorName\"),\n\t\tValidateRequestBody: jsii.Boolean(false),\n\t\tValidateRequestParameters: jsii.Boolean(false),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\nconst apiEventSource = new lambda_event_sources.ApiEventSource('method', 'path', /* all optional props */ {\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: apigateway.AuthorizationType.NONE,\n  authorizer: authorizer,\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: model,\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: model,\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidator: requestValidator,\n  requestValidatorOptions: {\n    requestValidatorName: 'requestValidatorName',\n    validateRequestBody: false,\n    validateRequestParameters: false,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.ApiEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.AuthorizationType","@aws-cdk/aws-apigateway.AuthorizationType#NONE","@aws-cdk/aws-apigateway.IAuthorizer","@aws-cdk/aws-apigateway.IModel","@aws-cdk/aws-apigateway.IRequestValidator","@aws-cdk/aws-apigateway.MethodOptions","@aws-cdk/aws-apigateway.RequestValidatorOptions","@aws-cdk/aws-lambda-event-sources.ApiEventSource"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigateway from '@aws-cdk/aws-apigateway';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const authorizer: apigateway.Authorizer;\ndeclare const model: apigateway.Model;\ndeclare const requestValidator: apigateway.RequestValidator;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiEventSource = new lambda_event_sources.ApiEventSource('method', 'path', /* all optional props */ {\n  apiKeyRequired: false,\n  authorizationScopes: ['authorizationScopes'],\n  authorizationType: apigateway.AuthorizationType.NONE,\n  authorizer: authorizer,\n  methodResponses: [{\n    statusCode: 'statusCode',\n\n    // the properties below are optional\n    responseModels: {\n      responseModelsKey: model,\n    },\n    responseParameters: {\n      responseParametersKey: false,\n    },\n  }],\n  operationName: 'operationName',\n  requestModels: {\n    requestModelsKey: model,\n  },\n  requestParameters: {\n    requestParametersKey: false,\n  },\n  requestValidator: requestValidator,\n  requestValidatorOptions: {\n    requestValidatorName: 'requestValidatorName',\n    validateRequestBody: false,\n    validateRequestParameters: false,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":8,"75":41,"91":5,"130":3,"153":3,"169":3,"192":2,"193":7,"194":3,"197":1,"225":4,"242":4,"243":4,"254":2,"255":2,"256":2,"281":20,"290":1},"fqnsFingerprint":"a72ab5e5bbdbf0314a213d0e182b78f3e1443aaa8f256e74dd3f0159baad96a3"},"0852018ff1002acb5a3e3336a1649e147494ca4883ead4f622d80acab78abc7e":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_lambda_event_sources as lambda_event_sources\nimport aws_cdk.core as cdk\n\nbase_stream_event_source_props = lambda_event_sources.BaseStreamEventSourceProps(\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n\n    # the properties below are optional\n    batch_size=123,\n    enabled=False,\n    max_batching_window=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK;\nvar baseStreamEventSourceProps = new BaseStreamEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n\n    // the properties below are optional\n    BatchSize = 123,\n    Enabled = false,\n    MaxBatchingWindow = Duration.Minutes(30)\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.core.*;\n\nBaseStreamEventSourceProps baseStreamEventSourceProps = BaseStreamEventSourceProps.builder()\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n\n        // the properties below are optional\n        .batchSize(123)\n        .enabled(false)\n        .maxBatchingWindow(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport lambda_event_sources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nbaseStreamEventSourceProps := &BaseStreamEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\n\t// the properties below are optional\n\tBatchSize: jsii.Number(123),\n\tEnabled: jsii.Boolean(false),\n\tMaxBatchingWindow: cdk.Duration_Minutes(jsii.Number(30)),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\nconst baseStreamEventSourceProps: lambda_event_sources.BaseStreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.BaseStreamEventSourceProps","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseStreamEventSourceProps: lambda_event_sources.BaseStreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":3,"75":16,"91":1,"153":1,"169":1,"193":1,"194":4,"196":1,"225":1,"242":1,"243":1,"254":3,"255":3,"256":3,"281":4,"290":1},"fqnsFingerprint":"a2bb39ab23f3f13ee2bb365223417a3a7564eb4c7ee85f9969000716cee562c5"},"500896119ce0097d4deb140bc3f1bfa0964daf33eed04e06a252055de4a5402d":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\nfrom aws_cdk.aws_lambda_event_sources import DynamoEventSource, SqsDlq\n\n# table: dynamodb.Table\n\n# fn: lambda.Function\n\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(DynamoEventSource(table,\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    batch_size=5,\n    bisect_batch_on_error=True,\n    on_failure=SqsDlq(dead_letter_queue),\n    retry_attempts=10\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTable table;\n\nFunction fn;\n\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new DynamoEventSource(table, new DynamoEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    BatchSize = 5,\n    BisectBatchOnError = true,\n    OnFailure = new SqsDlq(deadLetterQueue),\n    RetryAttempts = 10\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.lambda.eventsources.DynamoEventSource;\nimport software.amazon.awscdk.services.lambda.eventsources.SqsDlq;\n\nTable table;\n\nFunction fn;\n\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(DynamoEventSource.Builder.create(table)\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .batchSize(5)\n        .bisectBatchOnError(true)\n        .onFailure(new SqsDlq(deadLetterQueue))\n        .retryAttempts(10)\n        .build());","version":"1"},"go":{"source":"import dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar table table\n\nvar fn function\n\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewDynamoEventSource(table, &DynamoEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\tBatchSize: jsii.Number(5),\n\tBisectBatchOnError: jsii.Boolean(true),\n\tOnFailure: *awscdkawslambdaeventsources.NewSqsDlq(deadLetterQueue),\n\tRetryAttempts: jsii.Number(10),\n}))","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.DynamoEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.ITable","@aws-cdk/aws-lambda-event-sources.DynamoEventSource","@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps","@aws-cdk/aws-lambda-event-sources.SqsDlq","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.IEventSourceDlq","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":3,"75":26,"104":1,"106":1,"130":2,"153":2,"169":2,"193":1,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":2,"281":5,"290":1},"fqnsFingerprint":"5f8bb9d07294c756d85085133044b7d0781c84fa78554bb6ff57b4bde33238ad"},"ed1c3bd1303811778984b7bad9bfc3c0ecc3bae7ac013bf98ac9020b952eeda9":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\nfrom aws_cdk.aws_lambda_event_sources import DynamoEventSource, SqsDlq\n\n# table: dynamodb.Table\n\n# fn: lambda.Function\n\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(DynamoEventSource(table,\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    batch_size=5,\n    bisect_batch_on_error=True,\n    on_failure=SqsDlq(dead_letter_queue),\n    retry_attempts=10\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTable table;\n\nFunction fn;\n\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new DynamoEventSource(table, new DynamoEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    BatchSize = 5,\n    BisectBatchOnError = true,\n    OnFailure = new SqsDlq(deadLetterQueue),\n    RetryAttempts = 10\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.lambda.eventsources.DynamoEventSource;\nimport software.amazon.awscdk.services.lambda.eventsources.SqsDlq;\n\nTable table;\n\nFunction fn;\n\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(DynamoEventSource.Builder.create(table)\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .batchSize(5)\n        .bisectBatchOnError(true)\n        .onFailure(new SqsDlq(deadLetterQueue))\n        .retryAttempts(10)\n        .build());","version":"1"},"go":{"source":"import dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar table table\n\nvar fn function\n\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewDynamoEventSource(table, &DynamoEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\tBatchSize: jsii.Number(5),\n\tBisectBatchOnError: jsii.Boolean(true),\n\tOnFailure: *awscdkawslambdaeventsources.NewSqsDlq(deadLetterQueue),\n\tRetryAttempts: jsii.Number(10),\n}))","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.ITable","@aws-cdk/aws-lambda-event-sources.DynamoEventSource","@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps","@aws-cdk/aws-lambda-event-sources.SqsDlq","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.IEventSourceDlq","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":3,"75":26,"104":1,"106":1,"130":2,"153":2,"169":2,"193":1,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":2,"281":5,"290":1},"fqnsFingerprint":"5f8bb9d07294c756d85085133044b7d0781c84fa78554bb6ff57b4bde33238ad"},"61b7d7fcc72d2080e346e5544ff65c9f52a1b49f708e86fa83fa59095e9d9a95":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_lambda_event_sources as lambda_event_sources\nimport aws_cdk.aws_secretsmanager as secretsmanager\nimport aws_cdk.core as cdk\n\n# secret: secretsmanager.Secret\n\nkafka_event_source_props = lambda_event_sources.KafkaEventSourceProps(\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    topic=\"topic\",\n\n    # the properties below are optional\n    batch_size=123,\n    enabled=False,\n    max_batching_window=cdk.Duration.minutes(30),\n    secret=secret\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK;\n\nSecret secret;\nvar kafkaEventSourceProps = new KafkaEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    Topic = \"topic\",\n\n    // the properties below are optional\n    BatchSize = 123,\n    Enabled = false,\n    MaxBatchingWindow = Duration.Minutes(30),\n    Secret = secret\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\nimport software.amazon.awscdk.core.*;\n\nSecret secret;\n\nKafkaEventSourceProps kafkaEventSourceProps = KafkaEventSourceProps.builder()\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .topic(\"topic\")\n\n        // the properties below are optional\n        .batchSize(123)\n        .enabled(false)\n        .maxBatchingWindow(Duration.minutes(30))\n        .secret(secret)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport lambda_event_sources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar secret secret\n\nkafkaEventSourceProps := &KafkaEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\tTopic: jsii.String(\"topic\"),\n\n\t// the properties below are optional\n\tBatchSize: jsii.Number(123),\n\tEnabled: jsii.Boolean(false),\n\tMaxBatchingWindow: cdk.Duration_Minutes(jsii.Number(30)),\n\tSecret: secret,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: secretsmanager.Secret;\nconst kafkaEventSourceProps: lambda_event_sources.KafkaEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  topic: 'topic',\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  secret: secret,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.KafkaEventSourceProps","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kafkaEventSourceProps: lambda_event_sources.KafkaEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  topic: 'topic',\n\n  // the properties below are optional\n  batchSize: 123,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  secret: secret,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":5,"75":23,"91":1,"130":1,"153":2,"169":2,"193":1,"194":4,"196":1,"225":2,"242":2,"243":2,"254":4,"255":4,"256":4,"281":6,"290":1},"fqnsFingerprint":"68dd3ddb8cedef69923c4c988e2d9215bd7013bdc05cd94e8f0e7935669e39b6"},"659644f1ff42714717452ffbea054d3bef3f2db7eb4a84a7d9b05e2ada415c31":{"translations":{"python":{"source":"import aws_cdk.aws_kinesis as kinesis\nfrom aws_cdk.aws_lambda_event_sources import KinesisEventSource\n\n# my_function: lambda.Function\n\n\nstream = kinesis.Stream(self, \"MyStream\")\nmy_function.add_event_source(KinesisEventSource(stream,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Kinesis;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\nvar stream = new Stream(this, \"MyStream\");\nmyFunction.AddEventSource(new KinesisEventSource(stream, new KinesisEventSourceProps {\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.kinesis.*;\nimport software.amazon.awscdk.services.lambda.eventsources.KinesisEventSource;\n\nFunction myFunction;\n\n\nStream stream = new Stream(this, \"MyStream\");\nmyFunction.addEventSource(KinesisEventSource.Builder.create(stream)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import kinesis \"github.com/aws-samples/dummy/awscdkawskinesis\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\nstream := kinesis.NewStream(this, jsii.String(\"MyStream\"))\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewKinesisEventSource(stream, &KinesisEventSourceProps{\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.KinesisEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-kinesis.IStream","@aws-cdk/aws-kinesis.Stream","@aws-cdk/aws-lambda-event-sources.KinesisEventSource","@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst stream = new kinesis.Stream(this, 'MyStream');\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"325fc0b1e76f13f3c06e5125ecb7c1036699f66587471cc267d96bc9a8b33399"},"ca8a4acf095a8e5927b2a2c51995d093311f925253d2a882c82811108377c653":{"translations":{"python":{"source":"import aws_cdk.aws_kinesis as kinesis\nfrom aws_cdk.aws_lambda_event_sources import KinesisEventSource\n\n# my_function: lambda.Function\n\n\nstream = kinesis.Stream(self, \"MyStream\")\nmy_function.add_event_source(KinesisEventSource(stream,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Kinesis;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\nvar stream = new Stream(this, \"MyStream\");\nmyFunction.AddEventSource(new KinesisEventSource(stream, new KinesisEventSourceProps {\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.kinesis.*;\nimport software.amazon.awscdk.services.lambda.eventsources.KinesisEventSource;\n\nFunction myFunction;\n\n\nStream stream = new Stream(this, \"MyStream\");\nmyFunction.addEventSource(KinesisEventSource.Builder.create(stream)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import kinesis \"github.com/aws-samples/dummy/awscdkawskinesis\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\nstream := kinesis.NewStream(this, jsii.String(\"MyStream\"))\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewKinesisEventSource(stream, &KinesisEventSourceProps{\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-kinesis.IStream","@aws-cdk/aws-kinesis.Stream","@aws-cdk/aws-lambda-event-sources.KinesisEventSource","@aws-cdk/aws-lambda-event-sources.KinesisEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport { KinesisEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst stream = new kinesis.Stream(this, 'MyStream');\nmyFunction.addEventSource(new KinesisEventSource(stream, {\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":17,"104":1,"130":1,"153":1,"169":1,"193":1,"194":4,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"325fc0b1e76f13f3c06e5125ecb7c1036699f66587471cc267d96bc9a8b33399"},"9eeae57a0c27cc3502831c25c4e0320f020b8e79c515888138554952a11858ea":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import ManagedKafkaEventSource\n\n# my_function: lambda.Function\n\n\n# Your MSK cluster arn\ncluster_arn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\n\n# The secret that allows access to your MSK cluster\n# You still have to make sure that it is associated with your cluster as described in the documentation\nsecret = Secret(self, \"Secret\", secret_name=\"AmazonMSK_KafkaSecret\")\nmy_function.add_event_source(ManagedKafkaEventSource(\n    cluster_arn=cluster_arn,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nvar clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nvar secret = new Secret(this, \"Secret\", new SecretProps { SecretName = \"AmazonMSK_KafkaSecret\" });\nmyFunction.AddEventSource(new ManagedKafkaEventSource(new ManagedKafkaEventSourceProps {\n    ClusterArn = clusterArn,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.ManagedKafkaEventSource;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nString clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nSecret secret = Secret.Builder.create(this, \"Secret\").secretName(\"AmazonMSK_KafkaSecret\").build();\nmyFunction.addEventSource(ManagedKafkaEventSource.Builder.create()\n        .clusterArn(clusterArn)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\n// Your MSK cluster arn\nclusterArn := \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nsecret := awscdkawssecretsmanager.NewSecret(this, jsii.String(\"Secret\"), &SecretProps{\n\tSecretName: jsii.String(\"AmazonMSK_KafkaSecret\"),\n})\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewManagedKafkaEventSource(&ManagedKafkaEventSourceProps{\n\tClusterArn: jsii.String(ClusterArn),\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret","@aws-cdk/aws-secretsmanager.Secret","@aws-cdk/aws-secretsmanager.SecretProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":6,"75":23,"104":1,"130":1,"153":1,"169":1,"193":2,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"282":1,"290":1},"fqnsFingerprint":"e7f1dd686bd17225bcd91973b75a734b3c1b4383f165db6750e205e834119126"},"dbaf88e5dd50a639e4e158a43727b0a47a1e06b7af60e9a74564afea1959ff85":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import ManagedKafkaEventSource\n\n# my_function: lambda.Function\n\n\n# Your MSK cluster arn\ncluster_arn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\n\n# The secret that allows access to your MSK cluster\n# You still have to make sure that it is associated with your cluster as described in the documentation\nsecret = Secret(self, \"Secret\", secret_name=\"AmazonMSK_KafkaSecret\")\nmy_function.add_event_source(ManagedKafkaEventSource(\n    cluster_arn=cluster_arn,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nvar clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nvar secret = new Secret(this, \"Secret\", new SecretProps { SecretName = \"AmazonMSK_KafkaSecret\" });\nmyFunction.AddEventSource(new ManagedKafkaEventSource(new ManagedKafkaEventSourceProps {\n    ClusterArn = clusterArn,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.ManagedKafkaEventSource;\n\nFunction myFunction;\n\n\n// Your MSK cluster arn\nString clusterArn = \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\";\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nSecret secret = Secret.Builder.create(this, \"Secret\").secretName(\"AmazonMSK_KafkaSecret\").build();\nmyFunction.addEventSource(ManagedKafkaEventSource.Builder.create()\n        .clusterArn(clusterArn)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar myFunction function\n\n\n// Your MSK cluster arn\nclusterArn := \"arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4\"\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nsecret := awscdkawssecretsmanager.NewSecret(this, jsii.String(\"Secret\"), &SecretProps{\n\tSecretName: jsii.String(\"AmazonMSK_KafkaSecret\"),\n})\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewManagedKafkaEventSource(&ManagedKafkaEventSourceProps{\n\tClusterArn: jsii.String(ClusterArn),\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.ManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret","@aws-cdk/aws-secretsmanager.Secret","@aws-cdk/aws-secretsmanager.SecretProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { ManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Your MSK cluster arn\nconst clusterArn = 'arn:aws:kafka:us-east-1:0123456789019:cluster/SalesCluster/abcd1234-abcd-cafe-abab-9876543210ab-4';\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your MSK cluster\n// You still have to make sure that it is associated with your cluster as described in the documentation\nconst secret = new Secret(this, 'Secret', { secretName: 'AmazonMSK_KafkaSecret' });\nmyFunction.addEventSource(new ManagedKafkaEventSource({\n  clusterArn,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":6,"75":23,"104":1,"130":1,"153":1,"169":1,"193":2,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"282":1,"290":1},"fqnsFingerprint":"e7f1dd686bd17225bcd91973b75a734b3c1b4383f165db6750e205e834119126"},"2b02eb47215f402ce81361ee134d705bc9db11a66b3df8f0bfb6aed20de0f63a":{"translations":{"python":{"source":"import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_s3 as s3\n\n# fn: lambda.Function\n\nbucket = s3.Bucket(self, \"Bucket\")\nfn.add_event_source(eventsources.S3EventSource(bucket,\n    events=[s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],\n    filters=[s3.NotificationKeyFilter(prefix=\"subdir/\")]\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.S3;\n\nFunction fn;\n\nvar bucket = new Bucket(this, \"Bucket\");\nfn.AddEventSource(new S3EventSource(bucket, new S3EventSourceProps {\n    Events = new [] { EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED },\n    Filters = new [] { new NotificationKeyFilter { Prefix = \"subdir/\" } }\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.s3.*;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.addEventSource(S3EventSource.Builder.create(bucket)\n        .events(List.of(EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED))\n        .filters(List.of(NotificationKeyFilter.builder().prefix(\"subdir/\").build()))\n        .build());","version":"1"},"go":{"source":"import eventsources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar fn function\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nfn.AddEventSource(eventsources.NewS3EventSource(bucket, &S3EventSourceProps{\n\tEvents: []eventType{\n\t\ts3.*eventType_OBJECT_CREATED,\n\t\ts3.*eventType_OBJECT_REMOVED,\n\t},\n\tFilters: []notificationKeyFilter{\n\t\t&notificationKeyFilter{\n\t\t\tPrefix: jsii.String(\"subdir/\"),\n\t\t},\n\t},\n}))","version":"1"},"$":{"source":"import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.S3EventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.S3EventSource","@aws-cdk/aws-lambda-event-sources.S3EventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.EventType","@aws-cdk/aws-s3.EventType#OBJECT_CREATED","@aws-cdk/aws-s3.EventType#OBJECT_REMOVED","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { Aspects, CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { LAMBDA_RECOGNIZE_VERSION_PROPS, LAMBDA_RECOGNIZE_LAYER_VERSION } from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":22,"104":1,"130":1,"153":1,"169":1,"192":2,"193":2,"194":7,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":2,"281":3,"290":1},"fqnsFingerprint":"37616ec74c41c6b724475caa0d70b2599d094fb7a53280c7881ff62e4112572e"},"a2aa9269858975e603efd417f5f6270cacf9331148551c6a672c8d198b700547":{"translations":{"python":{"source":"import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_s3 as s3\n\n# fn: lambda.Function\n\nbucket = s3.Bucket(self, \"Bucket\")\nfn.add_event_source(eventsources.S3EventSource(bucket,\n    events=[s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],\n    filters=[s3.NotificationKeyFilter(prefix=\"subdir/\")]\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.S3;\n\nFunction fn;\n\nvar bucket = new Bucket(this, \"Bucket\");\nfn.AddEventSource(new S3EventSource(bucket, new S3EventSourceProps {\n    Events = new [] { EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED },\n    Filters = new [] { new NotificationKeyFilter { Prefix = \"subdir/\" } }\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.s3.*;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.addEventSource(S3EventSource.Builder.create(bucket)\n        .events(List.of(EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED))\n        .filters(List.of(NotificationKeyFilter.builder().prefix(\"subdir/\").build()))\n        .build());","version":"1"},"go":{"source":"import eventsources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar fn function\n\nbucket := s3.NewBucket(this, jsii.String(\"Bucket\"))\nfn.AddEventSource(eventsources.NewS3EventSource(bucket, &S3EventSourceProps{\n\tEvents: []eventType{\n\t\ts3.*eventType_OBJECT_CREATED,\n\t\ts3.*eventType_OBJECT_REMOVED,\n\t},\n\tFilters: []notificationKeyFilter{\n\t\t&notificationKeyFilter{\n\t\t\tPrefix: jsii.String(\"subdir/\"),\n\t\t},\n\t},\n}))","version":"1"},"$":{"source":"import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.S3EventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.S3EventSource","@aws-cdk/aws-lambda-event-sources.S3EventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-s3.Bucket","@aws-cdk/aws-s3.EventType","@aws-cdk/aws-s3.EventType#OBJECT_CREATED","@aws-cdk/aws-s3.EventType#OBJECT_REMOVED","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { Aspects, CfnOutput, DockerImage, Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { LAMBDA_RECOGNIZE_VERSION_PROPS, LAMBDA_RECOGNIZE_LAYER_VERSION } from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":22,"104":1,"130":1,"153":1,"169":1,"192":2,"193":2,"194":7,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2,"254":2,"255":2,"256":2,"281":3,"290":1},"fqnsFingerprint":"37616ec74c41c6b724475caa0d70b2599d094fb7a53280c7881ff62e4112572e"},"d5a616226ec3e2609c9d75b853bb2b9013b625b446f0010018fa1cbb62fa4d20":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import SelfManagedKafkaEventSource\n\n# The secret that allows access to your self hosted Kafka cluster\n# secret: Secret\n\n# my_function: lambda.Function\n\n\n# The list of Kafka brokers\nbootstrap_servers = [\"kafka-broker:9092\"]\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\nmy_function.add_event_source(SelfManagedKafkaEventSource(\n    bootstrap_servers=bootstrap_servers,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nvar bootstrapServers = new [] { \"kafka-broker:9092\" };\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\nmyFunction.AddEventSource(new SelfManagedKafkaEventSource(new SelfManagedKafkaEventSourceProps {\n    BootstrapServers = bootstrapServers,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.SelfManagedKafkaEventSource;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nString[] bootstrapServers = List.of(\"kafka-broker:9092\");\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\nmyFunction.addEventSource(SelfManagedKafkaEventSource.Builder.create()\n        .bootstrapServers(bootstrapServers)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\n// The secret that allows access to your self hosted Kafka cluster\nvar secret secret\n\nvar myFunction function\n\n\n// The list of Kafka brokers\nbootstrapServers := []*string{\n\t\"kafka-broker:9092\",\n}\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewSelfManagedKafkaEventSource(&SelfManagedKafkaEventSourceProps{\n\tBootstrapServers: bootstrapServers,\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":4,"75":23,"130":2,"153":1,"169":2,"192":1,"193":1,"194":3,"196":1,"197":1,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"290":1},"fqnsFingerprint":"5c499120018bcb37d50681b2acb24b8bde2cdd810346e01a9247ad9605fe6339"},"8bd9e939ad1d5c3a241bb72794350f7895076a7164b9f56dc1cab206383df47c":{"translations":{"python":{"source":"from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import SelfManagedKafkaEventSource\n\n# The secret that allows access to your self hosted Kafka cluster\n# secret: Secret\n\n# my_function: lambda.Function\n\n\n# The list of Kafka brokers\nbootstrap_servers = [\"kafka-broker:9092\"]\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\nmy_function.add_event_source(SelfManagedKafkaEventSource(\n    bootstrap_servers=bootstrap_servers,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nvar bootstrapServers = new [] { \"kafka-broker:9092\" };\n\n// The Kafka topic you want to subscribe to\nvar topic = \"some-cool-topic\";\nmyFunction.AddEventSource(new SelfManagedKafkaEventSource(new SelfManagedKafkaEventSourceProps {\n    BootstrapServers = bootstrapServers,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.SelfManagedKafkaEventSource;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nString[] bootstrapServers = List.of(\"kafka-broker:9092\");\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\nmyFunction.addEventSource(SelfManagedKafkaEventSource.Builder.create()\n        .bootstrapServers(bootstrapServers)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\n// The secret that allows access to your self hosted Kafka cluster\nvar secret secret\n\nvar myFunction function\n\n\n// The list of Kafka brokers\nbootstrapServers := []*string{\n\t\"kafka-broker:9092\",\n}\n\n// The Kafka topic you want to subscribe to\ntopic := \"some-cool-topic\"\nmyFunction.AddEventSource(awscdkawslambdaeventsources.NewSelfManagedKafkaEventSource(&SelfManagedKafkaEventSourceProps{\n\tBootstrapServers: bootstrapServers,\n\tTopic: topic,\n\tSecret: secret,\n\tBatchSize: jsii.Number(100),\n\t // default\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n}))","version":"1"},"$":{"source":"import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource","@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-secretsmanager.ISecret"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":4,"75":23,"130":2,"153":1,"169":2,"192":1,"193":1,"194":3,"196":1,"197":1,"225":4,"226":1,"242":4,"243":4,"254":2,"255":2,"257":2,"258":2,"281":5,"290":1},"fqnsFingerprint":"5c499120018bcb37d50681b2acb24b8bde2cdd810346e01a9247ad9605fe6339"},"49d2bf026e91fe933afd691012d2d90ebada095b82380c02b5008ba7407207e3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda_event_sources as lambda_event_sources\nimport aws_cdk.aws_sns as sns\n\n# topic: sns.Topic\n\nsns_dlq = lambda_event_sources.SnsDlq(topic)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.SNS;\n\nTopic topic;\n\nvar snsDlq = new SnsDlq(topic);","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.sns.*;\n\nTopic topic;\n\nSnsDlq snsDlq = new SnsDlq(topic);","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport lambda_event_sources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport sns \"github.com/aws-samples/dummy/awscdkawssns\"\n\nvar topic topic\n\nsnsDlq := lambda_event_sources.NewSnsDlq(topic)","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sns from '@aws-cdk/aws-sns';\n\ndeclare const topic: sns.Topic;\nconst snsDlq = new lambda_event_sources.SnsDlq(topic);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SnsDlq"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SnsDlq","@aws-cdk/aws-sns.ITopic"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sns from '@aws-cdk/aws-sns';\n\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst snsDlq = new lambda_event_sources.SnsDlq(topic);\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":9,"130":1,"153":1,"169":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":2,"255":2,"256":2,"290":1},"fqnsFingerprint":"e809840e08a3237f9b659e3264318a62c907e46595a480a38d867a84914c1552"},"80db51da31a2104c5cc9d71cb580904faab7b00a84917e3cbe41e7fbb230d0e8":{"translations":{"python":{"source":"import aws_cdk.aws_sns as sns\nfrom aws_cdk.aws_lambda_event_sources import SnsEventSource\n\n# topic: sns.Topic\n\n# fn: lambda.Function\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(SnsEventSource(topic,\n    filter_policy={},\n    dead_letter_queue=dead_letter_queue\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTopic topic;\n\nFunction fn;\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new SnsEventSource(topic, new SnsEventSourceProps {\n    FilterPolicy = new Dictionary<string, object> { },\n    DeadLetterQueue = deadLetterQueue\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.lambda.eventsources.SnsEventSource;\n\nTopic topic;\n\nFunction fn;\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(SnsEventSource.Builder.create(topic)\n        .filterPolicy(Map.of())\n        .deadLetterQueue(deadLetterQueue)\n        .build());","version":"1"},"go":{"source":"import sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar topic topic\n\nvar fn function\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewSnsEventSource(topic, &SnsEventSourceProps{\n\tFilterPolicy: map[string]interface{}{\n\t},\n\tDeadLetterQueue: deadLetterQueue,\n}))","version":"1"},"$":{"source":"import * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SnsEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SnsEventSource","@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":18,"104":1,"130":2,"153":2,"169":2,"193":2,"194":2,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"d2faeea16486d79be8e4d71762e4f188a48f2260d9966086b95d088cbf5aae6b"},"6d136bcd145207860ea1b5c9f9840ac0c118dd443ed3225564410763d9ad4eb0":{"translations":{"python":{"source":"import aws_cdk.aws_sns as sns\nfrom aws_cdk.aws_lambda_event_sources import SnsEventSource\n\n# topic: sns.Topic\n\n# fn: lambda.Function\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(SnsEventSource(topic,\n    filter_policy={},\n    dead_letter_queue=dead_letter_queue\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTopic topic;\n\nFunction fn;\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new SnsEventSource(topic, new SnsEventSourceProps {\n    FilterPolicy = new Dictionary<string, object> { },\n    DeadLetterQueue = deadLetterQueue\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.lambda.eventsources.SnsEventSource;\n\nTopic topic;\n\nFunction fn;\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(SnsEventSource.Builder.create(topic)\n        .filterPolicy(Map.of())\n        .deadLetterQueue(deadLetterQueue)\n        .build());","version":"1"},"go":{"source":"import sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar topic topic\n\nvar fn function\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewSnsEventSource(topic, &SnsEventSourceProps{\n\tFilterPolicy: map[string]interface{}{\n\t},\n\tDeadLetterQueue: deadLetterQueue,\n}))","version":"1"},"$":{"source":"import * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SnsEventSource","@aws-cdk/aws-lambda-event-sources.SnsEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\nimport { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const topic: sns.Topic;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new SnsEventSource(topic, {\n  filterPolicy: { },\n  deadLetterQueue: deadLetterQueue,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":18,"104":1,"130":2,"153":2,"169":2,"193":2,"194":2,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":1,"281":2,"290":1},"fqnsFingerprint":"d2faeea16486d79be8e4d71762e4f188a48f2260d9966086b95d088cbf5aae6b"},"c76a7fd839fdc51072b8f152eea0137475a05e436362996cd72a8063d195af5f":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\nfrom aws_cdk.aws_lambda_event_sources import DynamoEventSource, SqsDlq\n\n# table: dynamodb.Table\n\n# fn: lambda.Function\n\n\ndead_letter_queue = sqs.Queue(self, \"deadLetterQueue\")\nfn.add_event_source(DynamoEventSource(table,\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n    batch_size=5,\n    bisect_batch_on_error=True,\n    on_failure=SqsDlq(dead_letter_queue),\n    retry_attempts=10\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\nTable table;\n\nFunction fn;\n\n\nvar deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.AddEventSource(new DynamoEventSource(table, new DynamoEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n    BatchSize = 5,\n    BisectBatchOnError = true,\n    OnFailure = new SqsDlq(deadLetterQueue),\n    RetryAttempts = 10\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\nimport software.amazon.awscdk.services.lambda.eventsources.DynamoEventSource;\nimport software.amazon.awscdk.services.lambda.eventsources.SqsDlq;\n\nTable table;\n\nFunction fn;\n\n\nQueue deadLetterQueue = new Queue(this, \"deadLetterQueue\");\nfn.addEventSource(DynamoEventSource.Builder.create(table)\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .batchSize(5)\n        .bisectBatchOnError(true)\n        .onFailure(new SqsDlq(deadLetterQueue))\n        .retryAttempts(10)\n        .build());","version":"1"},"go":{"source":"import dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nimport \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar table table\n\nvar fn function\n\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"deadLetterQueue\"))\nfn.AddEventSource(awscdkawslambdaeventsources.NewDynamoEventSource(table, &DynamoEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\tBatchSize: jsii.Number(5),\n\tBisectBatchOnError: jsii.Boolean(true),\n\tOnFailure: *awscdkawslambdaeventsources.NewSqsDlq(deadLetterQueue),\n\tRetryAttempts: jsii.Number(10),\n}))","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\n\ndeclare const fn: lambda.Function;\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SqsDlq"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.ITable","@aws-cdk/aws-lambda-event-sources.DynamoEventSource","@aws-cdk/aws-lambda-event-sources.DynamoEventSourceProps","@aws-cdk/aws-lambda-event-sources.SqsDlq","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-lambda.IEventSourceDlq","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { DynamoEventSource, SqsDlq } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const table: dynamodb.Table;\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst deadLetterQueue = new sqs.Queue(this, 'deadLetterQueue');\nfn.addEventSource(new DynamoEventSource(table, {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n  batchSize: 5,\n  bisectBatchOnError: true,\n  onFailure: new SqsDlq(deadLetterQueue),\n  retryAttempts: 10,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":3,"75":26,"104":1,"106":1,"130":2,"153":2,"169":2,"193":1,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"254":2,"255":2,"256":1,"257":1,"258":2,"281":5,"290":1},"fqnsFingerprint":"5f8bb9d07294c756d85085133044b7d0781c84fa78554bb6ff57b4bde33238ad"},"49161e4852c480a82ad8edb2358f275470aefe544636aa3a87a46ac82f2a5e81":{"translations":{"python":{"source":"from aws_cdk.aws_lambda_event_sources import SqsEventSource\n\n# fn: lambda.Function\n\nqueue = sqs.Queue(self, \"MyQueue\")\nevent_source = SqsEventSource(queue)\nfn.add_event_source(event_source)\n\nevent_source_id = event_source.event_source_mapping_id","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\n\nFunction fn;\n\nvar queue = new Queue(this, \"MyQueue\");\nvar eventSource = new SqsEventSource(queue);\nfn.AddEventSource(eventSource);\n\nvar eventSourceId = eventSource.EventSourceMappingId;","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"MyQueue\");\nSqsEventSource eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nString eventSourceId = eventSource.getEventSourceMappingId();","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\n\nvar fn function\n\nqueue := sqs.NewQueue(this, jsii.String(\"MyQueue\"))\neventSource := awscdkawslambdaeventsources.NewSqsEventSource(queue)\nfn.AddEventSource(eventSource)\n\neventSourceId := eventSource.eventSourceMappingId","version":"1"},"$":{"source":"import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SqsEventSource"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SqsEventSource","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst queue = new sqs.Queue(this, 'MyQueue');\nconst eventSource = new SqsEventSource(queue);\nfn.addEventSource(eventSource);\n\nconst eventSourceId = eventSource.eventSourceMappingId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":16,"104":1,"130":1,"153":1,"169":1,"194":3,"196":1,"197":2,"225":4,"226":1,"242":4,"243":4,"254":1,"255":1,"257":1,"258":1,"290":1},"fqnsFingerprint":"fa75798955b35b54f850234ce850dcdb34d9b63d6910326ab80a41d8613161a9"},"3981e6141126546569896220c4644340f1c63d3cb7e62bbfe1a42aee28b88c8e":{"translations":{"python":{"source":"from aws_cdk.aws_lambda_event_sources import SqsEventSource\n# fn: lambda.Function\n\n\nqueue = sqs.Queue(self, \"MyQueue\",\n    visibility_timeout=Duration.seconds(30),  # default,\n    receive_message_wait_time=Duration.seconds(20)\n)\n\nfn.add_event_source(SqsEventSource(queue,\n    batch_size=10,  # default\n    max_batching_window=Duration.minutes(5),\n    report_batch_item_failures=True\n))","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda.EventSources;\nFunction fn;\n\n\nvar queue = new Queue(this, \"MyQueue\", new QueueProps {\n    VisibilityTimeout = Duration.Seconds(30),  // default,\n    ReceiveMessageWaitTime = Duration.Seconds(20)\n});\n\nfn.AddEventSource(new SqsEventSource(queue, new SqsEventSourceProps {\n    BatchSize = 10,  // default\n    MaxBatchingWindow = Duration.Minutes(5),\n    ReportBatchItemFailures = true\n}));","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;\nFunction fn;\n\n\nQueue queue = Queue.Builder.create(this, \"MyQueue\")\n        .visibilityTimeout(Duration.seconds(30)) // default,\n        .receiveMessageWaitTime(Duration.seconds(20))\n        .build();\n\nfn.addEventSource(SqsEventSource.Builder.create(queue)\n        .batchSize(10) // default\n        .maxBatchingWindow(Duration.minutes(5))\n        .reportBatchItemFailures(true)\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nvar fn function\n\n\nqueue := sqs.NewQueue(this, jsii.String(\"MyQueue\"), &QueueProps{\n\tVisibilityTimeout: awscdkcore.Duration_Seconds(jsii.Number(30)),\n\t // default,\n\tReceiveMessageWaitTime: *awscdkcore.Duration_*Seconds(jsii.Number(20)),\n})\n\nfn.AddEventSource(awscdkawslambdaeventsources.NewSqsEventSource(queue, &SqsEventSourceProps{\n\tBatchSize: jsii.Number(10),\n\t // default\n\tMaxBatchingWindow: *awscdkcore.Duration_Minutes(jsii.Number(5)),\n\tReportBatchItemFailures: jsii.Boolean(true),\n}))","version":"1"},"$":{"source":"import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\ndeclare const fn: lambda.Function;\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.SqsEventSource","@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps","@aws-cdk/aws-lambda.FunctionBase#addEventSource","@aws-cdk/aws-lambda.IEventSource","@aws-cdk/aws-sqs.IQueue","@aws-cdk/aws-sqs.Queue","@aws-cdk/aws-sqs.QueueProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","@aws-cdk/core.Duration#seconds","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst queue = new sqs.Queue(this, 'MyQueue', {\n  visibilityTimeout: Duration.seconds(30),      // default,\n  receiveMessageWaitTime: Duration.seconds(20), // default\n});\n\nfn.addEventSource(new SqsEventSource(queue, {\n  batchSize: 10, // default\n  maxBatchingWindow: Duration.minutes(5),\n  reportBatchItemFailures: true, // default to false\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":4,"10":2,"75":22,"104":1,"106":1,"130":1,"153":1,"169":1,"193":2,"194":5,"196":4,"197":2,"225":2,"226":1,"242":2,"243":2,"254":1,"255":1,"257":1,"258":1,"281":5,"290":1},"fqnsFingerprint":"8602992876dd7b54633ea598d7440fd5cbe10f34b844bc3f36edbb5970b06a36"},"e82562548d42c3206f233768fc8d83c3c326b4382b74a6576e0c1f520195f8a0":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_lambda_event_sources as lambda_event_sources\nimport aws_cdk.core as cdk\n\n# event_source_dlq: lambda.IEventSourceDlq\n\nstream_event_source_props = lambda_event_sources.StreamEventSourceProps(\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON,\n\n    # the properties below are optional\n    batch_size=123,\n    bisect_batch_on_error=False,\n    enabled=False,\n    max_batching_window=cdk.Duration.minutes(30),\n    max_record_age=cdk.Duration.minutes(30),\n    on_failure=event_source_dlq,\n    parallelization_factor=123,\n    report_batch_item_failures=False,\n    retry_attempts=123,\n    tumbling_window=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK;\n\nIEventSourceDlq eventSourceDlq;\nvar streamEventSourceProps = new StreamEventSourceProps {\n    StartingPosition = StartingPosition.TRIM_HORIZON,\n\n    // the properties below are optional\n    BatchSize = 123,\n    BisectBatchOnError = false,\n    Enabled = false,\n    MaxBatchingWindow = Duration.Minutes(30),\n    MaxRecordAge = Duration.Minutes(30),\n    OnFailure = eventSourceDlq,\n    ParallelizationFactor = 123,\n    ReportBatchItemFailures = false,\n    RetryAttempts = 123,\n    TumblingWindow = Duration.Minutes(30)\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.core.*;\n\nIEventSourceDlq eventSourceDlq;\n\nStreamEventSourceProps streamEventSourceProps = StreamEventSourceProps.builder()\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n\n        // the properties below are optional\n        .batchSize(123)\n        .bisectBatchOnError(false)\n        .enabled(false)\n        .maxBatchingWindow(Duration.minutes(30))\n        .maxRecordAge(Duration.minutes(30))\n        .onFailure(eventSourceDlq)\n        .parallelizationFactor(123)\n        .reportBatchItemFailures(false)\n        .retryAttempts(123)\n        .tumblingWindow(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\nimport lambda_event_sources \"github.com/aws-samples/dummy/awscdkawslambdaeventsources\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar eventSourceDlq iEventSourceDlq\n\nstreamEventSourceProps := &StreamEventSourceProps{\n\tStartingPosition: lambda.StartingPosition_TRIM_HORIZON,\n\n\t// the properties below are optional\n\tBatchSize: jsii.Number(123),\n\tBisectBatchOnError: jsii.Boolean(false),\n\tEnabled: jsii.Boolean(false),\n\tMaxBatchingWindow: cdk.Duration_Minutes(jsii.Number(30)),\n\tMaxRecordAge: cdk.Duration_*Minutes(jsii.Number(30)),\n\tOnFailure: eventSourceDlq,\n\tParallelizationFactor: jsii.Number(123),\n\tReportBatchItemFailures: jsii.Boolean(false),\n\tRetryAttempts: jsii.Number(123),\n\tTumblingWindow: cdk.Duration_*Minutes(jsii.Number(30)),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\nconst streamEventSourceProps: lambda_event_sources.StreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  tumblingWindow: cdk.Duration.minutes(30),\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda-event-sources.StreamEventSourceProps","@aws-cdk/aws-lambda.IEventSourceDlq","@aws-cdk/aws-lambda.StartingPosition","@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as lambda_event_sources from '@aws-cdk/aws-lambda-event-sources';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const eventSourceDlq: lambda.IEventSourceDlq;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst streamEventSourceProps: lambda_event_sources.StreamEventSourceProps = {\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n\n  // the properties below are optional\n  batchSize: 123,\n  bisectBatchOnError: false,\n  enabled: false,\n  maxBatchingWindow: cdk.Duration.minutes(30),\n  maxRecordAge: cdk.Duration.minutes(30),\n  onFailure: eventSourceDlq,\n  parallelizationFactor: 123,\n  reportBatchItemFailures: false,\n  retryAttempts: 123,\n  tumblingWindow: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":6,"10":3,"75":33,"91":3,"130":1,"153":2,"169":2,"193":1,"194":8,"196":3,"225":2,"242":2,"243":2,"254":3,"255":3,"256":3,"281":11,"290":1},"fqnsFingerprint":"ee7b46df2fda2f56b6d41b519852ea8a17cdad1668e14e08f3a8610019a217fc"}}}