{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-cloudwatch": "1.199.0",
    "@aws-cdk/aws-events": "1.199.0",
    "@aws-cdk/aws-iam": "1.199.0",
    "@aws-cdk/aws-logs": "1.199.0",
    "@aws-cdk/aws-s3": "1.199.0",
    "@aws-cdk/core": "1.199.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::StepFunctions",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.74.0 (build 6d08790)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "stepfunctions"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-stepfunctions",
  "readme": {
    "markdown": "# AWS Step Functions Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-stepfunctions` package contains constructs for building\nserverless workflows using objects. Use this in conjunction with the\n`@aws-cdk/aws-stepfunctions-tasks` package, which contains classes used\nto call other AWS services.\n\nDefining a workflow looks like this (for the [Step Functions Job Poller\nexample](https://docs.aws.amazon.com/step-functions/latest/dg/job-status-poller-sample.html)):\n\n## Example\n\n```ts\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n```\n\nYou can find more sample snippets and learn more about the service integrations\nin the `@aws-cdk/aws-stepfunctions-tasks` package.\n\n## State Machine\n\nA `stepfunctions.StateMachine` is a resource that takes a state machine\ndefinition. The definition is specified by its start state, and encompasses\nall states reachable from the start state:\n\n```ts\nconst startState = new sfn.Pass(this, 'StartState');\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: startState,\n});\n```\n\nState machines execute using an IAM Role, which will automatically have all\npermissions added that are required to make all state machine tasks execute\nproperly (for example, permissions to invoke any Lambda functions you add to\nyour workflow). A role will be created by default, but you can supply an\nexisting one as well.\n\n## Accessing State (the JsonPath class)\n\nEvery State Machine execution has [State Machine\nData](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-data.html):\na JSON document containing keys and values that is fed into the state machine,\ngets modified as the state machine progresses, and finally is produced as output.\n\nYou can pass fragments of this State Machine Data into Tasks of the state machine.\nTo do so, use the static methods on the `JsonPath` class. For example, to pass\nthe value that's in the data key of `OrderId` to a Lambda function as you invoke\nit, use `JsonPath.stringAt('$.OrderId')`, like so:\n\n```ts\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});\n```\n\nThe following methods are available:\n\n| Method | Purpose |\n|--------|---------|\n| `JsonPath.stringAt('$.Field')` | reference a field, return the type as a `string`. |\n| `JsonPath.listAt('$.Field')` | reference a field, return the type as a list of strings. |\n| `JsonPath.numberAt('$.Field')` | reference a field, return the type as a number. Use this for functions that expect a number argument. |\n| `JsonPath.objectAt('$.Field')` | reference a field, return the type as an `IResolvable`. Use this for functions that expect an object argument. |\n| `JsonPath.entirePayload` | reference the entire data object (equivalent to a path of `$`). |\n| `JsonPath.taskToken` | reference the [Task Token](https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token), used for integration patterns that need to run for a long time. |\n\nYou can also call [intrinsic functions](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html) using the methods on `JsonPath`:\n\n| Method | Purpose |\n|--------|---------|\n| `JsonPath.array(JsonPath.stringAt('$.Field'), ...)` | make an array from other elements. |\n| `JsonPath.format('The value is {}.', JsonPath.stringAt('$.Value'))` | insert elements into a format string. |\n| `JsonPath.stringToJson(JsonPath.stringAt('$.ObjStr'))` | parse a JSON string to an object |\n| `JsonPath.jsonToString(JsonPath.objectAt('$.Obj'))` | stringify an object to a JSON string |\n\n## Amazon States Language\n\nThis library comes with a set of classes that model the [Amazon States\nLanguage](https://states-language.net/spec.html). The following State classes\nare supported:\n\n* [`Task`](#task)\n* [`Pass`](#pass)\n* [`Wait`](#wait)\n* [`Choice`](#choice)\n* [`Parallel`](#parallel)\n* [`Succeed`](#succeed)\n* [`Fail`](#fail)\n* [`Map`](#map)\n* [`Custom State`](#custom-state)\n\nAn arbitrary JSON object (specified at execution start) is passed from state to\nstate and transformed during the execution of the workflow. For more\ninformation, see the States Language spec.\n\n### Task\n\nA `Task` represents some work that needs to be done. The exact work to be\ndone is determine by a class that implements `IStepFunctionsTask`, a collection\nof which can be found in the `@aws-cdk/aws-stepfunctions-tasks` module.\n\nThe tasks in the `@aws-cdk/aws-stepfunctions-tasks` module support the\n[service integration pattern](https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html) that integrates Step Functions with services\ndirectly in the Amazon States language.\n\n### Pass\n\nA `Pass` state passes its input to its output, without performing work.\nPass states are useful when constructing and debugging state machines.\n\nThe following example injects some fixed data into the state machine through\nthe `result` field. The `result` field will be added to the input and the result\nwill be passed as the state's output.\n\n```ts\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n```\n\nThe `Pass` state also supports passing key-value pairs as input. Values can\nbe static, or selected from the input with a path.\n\nThe following example filters the `greeting` field from the state input\nand also injects a field called `otherData`.\n\n```ts\nconst pass = new sfn.Pass(this, 'Filter input and inject data', {\n  parameters: { // input to the pass state\n    input: sfn.JsonPath.stringAt('$.input.greeting'),\n    otherData: 'some-extra-stuff',\n  },\n});\n```\n\nThe object specified in `parameters` will be the input of the `Pass` state.\nSince neither `Result` nor `ResultPath` are supplied, the `Pass` state copies\nits input through to its output.\n\nLearn more about the [Pass state](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-pass-state.html)\n\n### Wait\n\nA `Wait` state waits for a given number of seconds, or until the current time\nhits a particular time. The time to wait may be taken from the execution's JSON\nstate.\n\n```ts\n// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new sfn.Wait(this, 'Wait For Trigger Time', {\n  time: sfn.WaitTime.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nconst startTheWork = new sfn.Pass(this, 'StartTheWork');\nwait.next(startTheWork);\n```\n\n### Choice\n\nA `Choice` state can take a different path through the workflow based on the\nvalues in the execution's JSON state:\n\n```ts\nconst choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);\n```\n\nIf you want to temporarily branch your workflow based on a condition, but have\nall branches come together and continuing as one (similar to how an `if ...\nthen ... else` works in a programming language), use the `.afterwards()` method:\n\n```ts\nconst choice = new sfn.Choice(this, 'What color is it?');\nconst handleBlueItem = new sfn.Pass(this, 'HandleBlueItem');\nconst handleRedItem = new sfn.Pass(this, 'HandleRedItem');\nconst handleOtherItemColor = new sfn.Pass(this, 'HanldeOtherItemColor');\nchoice.when(sfn.Condition.stringEquals('$.color', 'BLUE'), handleBlueItem);\nchoice.when(sfn.Condition.stringEquals('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nconst shipTheItem = new sfn.Pass(this, 'ShipTheItem');\nchoice.afterwards().next(shipTheItem);\n```\n\nIf your `Choice` doesn't have an `otherwise()` and none of the conditions match\nthe JSON state, a `NoChoiceMatched` error will be thrown. Wrap the state machine\nin a `Parallel` state if you want to catch and recover from this.\n\n#### Available Conditions\n\nsee [step function comparison operators](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-choice-state.html#amazon-states-language-choice-state-rules)\n\n* `Condition.isPresent` - matches if a json path is present\n* `Condition.isNotPresent` - matches if a json path is not present\n* `Condition.isString` - matches if a json path contains a string\n* `Condition.isNotString` - matches if a json path is not a string\n* `Condition.isNumeric` - matches if a json path is numeric\n* `Condition.isNotNumeric` - matches if a json path is not numeric\n* `Condition.isBoolean` - matches if a json path is boolean\n* `Condition.isNotBoolean` - matches if a json path is not boolean\n* `Condition.isTimestamp` - matches if a json path is a timestamp\n* `Condition.isNotTimestamp` - matches if a json path is not a timestamp\n* `Condition.isNotNull` - matches if a json path is not null\n* `Condition.isNull` - matches if a json path is null\n* `Condition.booleanEquals` - matches if a boolean field has a given value\n* `Condition.booleanEqualsJsonPath` - matches if a boolean field equals a value in a given mapping path\n* `Condition.stringEqualsJsonPath` - matches if a string field equals a given mapping path\n* `Condition.stringEquals` - matches if a field equals a string value\n* `Condition.stringLessThan` - matches if a string field sorts before a given value\n* `Condition.stringLessThanJsonPath` - matches if a string field sorts before a value at given mapping path\n* `Condition.stringLessThanEquals` - matches if a string field sorts equal to or before a given value\n* `Condition.stringLessThanEqualsJsonPath` - matches if a string field sorts equal to or before a given mapping\n* `Condition.stringGreaterThan` - matches if a string field sorts after a given value\n* `Condition.stringGreaterThanJsonPath` - matches if a string field sorts after a value at a given mapping path\n* `Condition.stringGreaterThanEqualsJsonPath` - matches if a string field sorts after or equal to value at a given mapping path\n* `Condition.stringGreaterThanEquals` - matches if a string field sorts after or equal to a given value\n* `Condition.numberEquals` - matches if a numeric field has the given value\n* `Condition.numberEqualsJsonPath` - matches if a numeric field has the value in a given mapping path\n* `Condition.numberLessThan` - matches if a numeric field is less than the given value\n* `Condition.numberLessThanJsonPath` - matches if a numeric field is less than the value at the given mapping path\n* `Condition.numberLessThanEquals` - matches if a numeric field is less than or equal to the given value\n* `Condition.numberLessThanEqualsJsonPath` - matches if a numeric field is less than or equal to the numeric value at given mapping path\n* `Condition.numberGreaterThan` - matches if a numeric field is greater than the given value\n* `Condition.numberGreaterThanJsonPath` - matches if a numeric field is greater than the value at a given mapping path\n* `Condition.numberGreaterThanEquals` - matches if a numeric field is greater than or equal to the given value\n* `Condition.numberGreaterThanEqualsJsonPath` - matches if a numeric field is greater than or equal to the value at a given mapping path\n* `Condition.timestampEquals` - matches if a timestamp field is the same time as the given timestamp\n* `Condition.timestampEqualsJsonPath` - matches if a timestamp field is the same time as the timestamp at a given mapping path\n* `Condition.timestampLessThan` - matches if a timestamp field is before the given timestamp\n* `Condition.timestampLessThanJsonPath` - matches if a timestamp field is before the timestamp at a given mapping path\n* `Condition.timestampLessThanEquals` - matches if a timestamp field is before or equal to the given timestamp\n* `Condition.timestampLessThanEqualsJsonPath` - matches if a timestamp field is before or equal to the timestamp at a given mapping path\n* `Condition.timestampGreaterThan` - matches if a timestamp field is after the timestamp at a given mapping path\n* `Condition.timestampGreaterThanJsonPath` - matches if a timestamp field is after the timestamp at a given mapping path\n* `Condition.timestampGreaterThanEquals` - matches if a timestamp field is after or equal to the given timestamp\n* `Condition.timestampGreaterThanEqualsJsonPath` - matches if a timestamp field is after or equal to the timestamp at a given mapping path\n* `Condition.stringMatches` - matches if a field matches a string pattern that can contain a wild card (\\*) e.g: log-\\*.txt or \\*LATEST\\*. No other characters other than \"\\*\" have any special meaning - \\* can be escaped: \\\\\\\\*\n\n### Parallel\n\nA `Parallel` state executes one or more subworkflows in parallel. It can also\nbe used to catch and recover from errors in subworkflows.\n\n```ts\nconst parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);\n```\n\n### Succeed\n\nReaching a `Succeed` state terminates the state machine execution with a\nsuccessful status.\n\n```ts\nconst success = new sfn.Succeed(this, 'We did it!');\n```\n\n### Fail\n\nReaching a `Fail` state terminates the state machine execution with a\nfailure status. The fail state should report the reason for the failure.\nFailures can be caught by encompassing `Parallel` states.\n\n```ts\nconst success = new sfn.Fail(this, 'Fail', {\n  error: 'WorkflowFailure',\n  cause: \"Something went wrong\",\n});\n```\n\n### Map\n\nA `Map` state can be used to run a set of steps for each element of an input array.\nA `Map` state will execute the same steps for multiple entries of an array in the state input.\n\nWhile the `Parallel` state executes multiple branches of steps using the same input, a `Map` state will\nexecute the same steps for multiple entries of an array in the state input.\n\n```ts\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n```\n\n### Custom State\n\nIt's possible that the high-level constructs for the states or `stepfunctions-tasks` do not have\nthe states or service integrations you are looking for. The primary reasons for this lack of\nfunctionality are:\n\n* A [service integration](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-service-integrations.html) is available through Amazon States Langauge, but not available as construct\n  classes in the CDK.\n* The state or state properties are available through Step Functions, but are not configurable\n  through constructs\n\nIf a feature is not available, a `CustomState` can be used to supply any Amazon States Language\nJSON-based object as the state definition.\n\n[Code Snippets](https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1) are available and can be plugged in as the state definition.\n\nCustom states can be chained together with any of the other states to create your state machine\ndefinition. You will also need to provide any permissions that are required to the `role` that\nthe State Machine uses.\n\nThe following example uses the `DynamoDB` service integration to insert data into a DynamoDB table.\n\n```ts\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n```\n\n## Task Chaining\n\nTo make defining work flows as convenient (and readable in a top-to-bottom way)\nas writing regular programs, it is possible to chain most methods invocations.\nIn particular, the `.next()` method can be repeated. The result of a series of\n`.next()` calls is called a **Chain**, and can be used when defining the jump\ntargets of `Choice.on` or `Parallel.branch`:\n\n```ts\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\nconst step4 = new sfn.Pass(this, 'Step4');\nconst step5 = new sfn.Pass(this, 'Step5');\nconst step6 = new sfn.Pass(this, 'Step6');\nconst step7 = new sfn.Pass(this, 'Step7');\nconst step8 = new sfn.Pass(this, 'Step8');\nconst step9 = new sfn.Pass(this, 'Step9');\nconst step10 = new sfn.Pass(this, 'Step10');\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.status', 'SUCCESS');\nconst parallel = new sfn.Parallel(this, 'Parallel');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = step1\n  .next(step2)\n  .next(choice\n    .when(condition1, step3.next(step4).next(step5))\n    .otherwise(step6)\n    .afterwards())\n  .next(parallel\n    .branch(step7.next(step8))\n    .branch(step9.next(step10)))\n  .next(finish);\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n```\n\nIf you don't like the visual look of starting a chain directly off the first\nstep, you can use `Chain.start`:\n\n```ts\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\n\nconst definition = sfn.Chain\n  .start(step1)\n  .next(step2)\n  .next(step3)\n  // ...\n```\n\n## State Machine Fragments\n\nIt is possible to define reusable (or abstracted) mini-state machines by\ndefining a construct that implements `IChainable`, which requires you to define\ntwo fields:\n\n* `startState: State`, representing the entry point into this state machine.\n* `endStates: INextable[]`, representing the (one or more) states that outgoing\n  transitions will be added to if you chain onto the fragment.\n\nSince states will be named after their construct IDs, you may need to prefix the\nIDs of states if you plan to instantiate the same state machine fragment\nmultiples times (otherwise all states in every instantiation would have the same\nname).\n\nThe class `StateMachineFragment` contains some helper functions (like\n`prefixStates()`) to make it easier for you to do this. If you define your state\nmachine as a subclass of this, it will be convenient to use:\n\n```ts nofixture\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}\n```\n\nA few utility functions are available to parse state machine fragments.\n\n* `State.findReachableStates`: Retrieve the list of states reachable from a given state.\n* `State.findReachableEndStates`: Retrieve the list of end or terminal states reachable from a given state.\n\n## Activity\n\n**Activities** represent work that is done on some non-Lambda worker pool. The\nStep Functions workflow will submit work to this Activity, and a worker pool\nthat you run yourself, probably on EC2, will pull jobs from the Activity and\nsubmit the results of individual jobs back.\n\nYou need the ARN to do so, so if you use Activities be sure to pass the Activity\nARN into your worker pool:\n\n```ts\nconst activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n```\n\n### Activity-Level Permissions\n\nGranting IAM permissions to an activity can be achieved by calling the `grant(principal, actions)` API:\n\n```ts\nconst activity = new sfn.Activity(this, 'Activity');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\nactivity.grant(role, 'states:SendTaskSuccess');\n```\n\nThis will grant the IAM principal the specified actions onto the activity.\n\n## Metrics\n\n`Task` object expose various metrics on the execution of that particular task. For example,\nto create an alarm on a particular task failing:\n\n```ts\ndeclare const task: sfn.Task;\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n  metric: task.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n```\n\nThere are also metrics on the complete state machine:\n\n```ts\ndeclare const stateMachine: sfn.StateMachine;\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n  metric: stateMachine.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n```\n\nAnd there are metrics on the capacity of all state machines in your account:\n\n```ts\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});\n```\n\n## Error names\n\nStep Functions identifies errors in the Amazon States Language using case-sensitive strings, known as error names.\nThe Amazon States Language defines a set of built-in strings that name well-known errors, all beginning with the `States.` prefix.\n\n* `States.ALL` - A wildcard that matches any known error name.\n* `States.Runtime` - An execution failed due to some exception that could not be processed. Often these are caused by errors at runtime, such as attempting to apply InputPath or OutputPath on a null JSON payload. A `States.Runtime` error is not retriable, and will always cause the execution to fail. A retry or catch on `States.ALL` will NOT catch States.Runtime errors.\n* `States.DataLimitExceeded` - A States.DataLimitExceeded exception will be thrown for the following:\n  * When the output of a connector is larger than payload size quota.\n  * When the output of a state is larger than payload size quota.\n  * When, after Parameters processing, the input of a state is larger than the payload size quota.\n  * See [the AWS documentation](https://docs.aws.amazon.com/step-functions/latest/dg/limits-overview.html) to learn more about AWS Step Functions Quotas.\n* `States.HeartbeatTimeout` - A Task state failed to send a heartbeat for a period longer than the HeartbeatSeconds value.\n* `States.Timeout` - A Task state either ran longer than the TimeoutSeconds value, or failed to send a heartbeat for a period longer than the HeartbeatSeconds value.\n* `States.TaskFailed`- A Task state failed during the execution. When used in a retry or catch, `States.TaskFailed` acts as a wildcard that matches any known error name except for `States.Timeout`.\n\n## Logging\n\nEnable logging to CloudWatch by passing a logging configuration with a\ndestination LogGroup:\n\n```ts\nimport * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n```\n\n## X-Ray tracing\n\nEnable X-Ray tracing for StateMachine:\n\n```ts\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  tracingEnabled: true,\n});\n```\n\nSee [the AWS documentation](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-xray-tracing.html)\nto learn more about AWS Step Functions's X-Ray support.\n\n## State Machine Permission Grants\n\nIAM roles, users, or groups which need to be able to work with a State Machine should be granted IAM permissions.\n\nAny object that implements the `IGrantable` interface (has an associated principal) can be granted permissions by calling:\n\n* `stateMachine.grantStartExecution(principal)` - grants the principal the ability to execute the state machine\n* `stateMachine.grantRead(principal)` - grants the principal read access\n* `stateMachine.grantTaskResponse(principal)` - grants the principal the ability to send task tokens to the state machine\n* `stateMachine.grantExecution(principal, actions)` - grants the principal execution-level permissions for the IAM actions specified\n* `stateMachine.grant(principal, actions)` - grants the principal state-machine-level permissions for the IAM actions specified\n\n### Start Execution Permission\n\nGrant permission to start an execution of a state machine by calling the `grantStartExecution()` API.\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);\n```\n\nThe following permission is provided to a service principal by the `grantStartExecution()` API:\n\n* `states:StartExecution` - to state machine\n\n### Read Permissions\n\nGrant `read` access to a state machine by calling the `grantRead()` API.\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role read access to state machine\nstateMachine.grantRead(role);\n```\n\nThe following read permissions are provided to a service principal by the `grantRead()` API:\n\n* `states:ListExecutions` - to state machine\n* `states:ListStateMachines` - to state machine\n* `states:DescribeExecution` - to executions\n* `states:DescribeStateMachineForExecution` - to executions\n* `states:GetExecutionHistory` - to executions\n* `states:ListActivities` - to `*`\n* `states:DescribeStateMachine` - to `*`\n* `states:DescribeActivity` - to `*`\n\n### Task Response Permissions\n\nGrant permission to allow task responses to a state machine by calling the `grantTaskResponse()` API:\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);\n```\n\nThe following read permissions are provided to a service principal by the `grantRead()` API:\n\n* `states:SendTaskSuccess` - to state machine\n* `states:SendTaskFailure` - to state machine\n* `states:SendTaskHeartbeat` - to state machine\n\n### Execution-level Permissions\n\nGrant execution-level permissions to a state machine by calling the `grantExecution()` API:\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, 'states:GetExecutionHistory');\n```\n\n### Custom Permissions\n\nYou can add any set of permissions to a state machine by calling the `grant()` API.\n\n```ts\nconst user = new iam.User(this, 'MyUser');\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, 'states:SendTaskSuccess');\n```\n\n## Import\n\nAny Step Functions state machine that has been created outside the stack can be imported\ninto your CDK stack.\n\nState machines can be imported by their ARN via the `StateMachine.fromStateMachineArn()` API\n\n```ts\nconst app = new App();\nconst stack = new Stack(app, 'MyStack');\nsfn.StateMachine.fromStateMachineArn(\n  stack,\n  'ImportedStateMachine',\n  'arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ',\n);\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-stepfunctions",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.StepFunctions",
      "packageId": "Amazon.CDK.AWS.StepFunctions"
    },
    "java": {
      "maven": {
        "artifactId": "stepfunctions",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.stepfunctions"
    },
    "js": {
      "npm": "@aws-cdk/aws-stepfunctions"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-stepfunctions",
      "module": "aws_cdk.aws_stepfunctions"
    }
  },
  "types": {
    "@aws-cdk/aws-stepfunctions.Activity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "Define a new Step Functions Activity.",
        "example": "const activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Activity",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/activity.ts",
          "line": 60
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ActivityProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IActivity"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct an Activity from an existing Activity ARN."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 27
          },
          "name": "fromActivityArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "activityArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IActivity"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct an Activity from an existing Activity Name."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 41
          },
          "name": "fromActivityName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "activityName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IActivity"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions on this Activity."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 85
          },
          "name": "grant",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The list of desired actions."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for this Activity."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 98
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity fails."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 176
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times the heartbeat times out for this activity."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 185
          },
          "name": "metricHeartbeatTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, between the time the activity starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 113
          },
          "name": "metricRunTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity is scheduled."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 140
          },
          "name": "metricScheduled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, for which the activity stays in the schedule state."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 122
          },
          "name": "metricScheduleTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity is started."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 158
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity succeeds."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 167
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, between the time the activity is scheduled and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 131
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity times out."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 149
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "Activity",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 53
          },
          "name": "activityArn",
          "overrides": "@aws-cdk/aws-stepfunctions.IActivity",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 58
          },
          "name": "activityName",
          "overrides": "@aws-cdk/aws-stepfunctions.IActivity",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/activity:Activity"
    },
    "@aws-cdk/aws-stepfunctions.ActivityProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a new Step Functions Activity.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst activityProps: stepfunctions.ActivityProps = {\n  activityName: 'activityName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ActivityProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 11
      },
      "name": "ActivityProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- If not supplied, a name is generated",
            "stability": "stable",
            "summary": "The name for this activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 17
          },
          "name": "activityName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/activity:ActivityProps"
    },
    "@aws-cdk/aws-stepfunctions.AfterwardsOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for selecting the choice paths.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst afterwardsOptions: stepfunctions.AfterwardsOptions = {\n  includeErrorHandlers: false,\n  includeOtherwise: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.AfterwardsOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 104
      },
      "name": "AfterwardsOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is true, all states which are error handlers (added through 'onError')\nand states reachable via error handlers will be included as well.",
            "stability": "stable",
            "summary": "Whether to include error handling states."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 113
          },
          "name": "includeErrorHandlers",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is true and the current Choice does not have a default outgoing\ntransition, one will be added included when .next() is called on the chain.",
            "stability": "stable",
            "summary": "Whether to include the default/otherwise transition for the current Choice state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 123
          },
          "name": "includeOtherwise",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/states/choice:AfterwardsOptions"
    },
    "@aws-cdk/aws-stepfunctions.CatchProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Error handler details.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst catchProps: stepfunctions.CatchProps = {\n  errors: ['errors'],\n  resultPath: 'resultPath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CatchProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 135
      },
      "name": "CatchProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "All errors",
            "remarks": "A list of error strings to retry, which can be either predefined errors\n(for example Errors.NoChoiceMatched) or a self-defined error.",
            "stability": "stable",
            "summary": "Errors to recover from by going to the given state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 144
          },
          "name": "errors",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the error\ndata to be discarded.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the error data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 154
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/types:CatchProps"
    },
    "@aws-cdk/aws-stepfunctions.CfnActivity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::StepFunctions::Activity",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "An activity is a task that you write in any programming language and host on any machine that has access to AWS Step Functions . Activities must poll Step Functions using the `GetActivityTask` API action and respond using `SendTask*` API actions. This function lets Step Functions know the existence of your activity and returns an identifier for use in a state machine and when polling from the activity.\n\nFor information about creating an activity, see [Creating an Activity State Machine](https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-creating-activity-state-machine.html) in the *AWS Step Functions Developer Guide* and [CreateActivity](https://docs.aws.amazon.com/step-functions/latest/apireference/API_CreateActivity.html) in the *AWS Step Functions API Reference* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::StepFunctions::Activity`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cfnActivity = new stepfunctions.CfnActivity(this, 'MyCfnActivity', {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::StepFunctions::Activity`."
        },
        "locationInModule": {
          "filename": "lib/stepfunctions.generated.ts",
          "line": 187
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.CfnActivityProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 109
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 203
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 215
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnActivity",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 113
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 138
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "remarks": "`{ \"Fn::GetAtt\": [\"MyActivity\", \"Name\"] }`\n\nReturns a value similar to the following:\n\n`myActivity`\n\nFor more information about using `Fn::GetAtt` , see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html) .",
            "stability": "external",
            "summary": "Returns the name of the activity. For example:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 152
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 208
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-tags"
            },
            "remarks": "Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .",
            "stability": "external",
            "summary": "The list of tags to add to a resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 178
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-name"
            },
            "remarks": "A name must *not* contain:\n\n- white space\n- brackets `< > { } [ ]`\n- wildcard characters `? *`\n- special characters `\" # % \\ ^ | ~ ` $ & , ; : /`\n- control characters ( `U+0000-001F` , `U+007F-009F` )\n\nTo enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.",
            "stability": "external",
            "summary": "The name of the activity."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 169
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnActivity"
    },
    "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `TagsEntry` property specifies *tags* to identify an activity.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tagsEntryProperty: stepfunctions.CfnActivity.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 229
      },
      "name": "TagsEntryProperty",
      "namespace": "CfnActivity",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html#cfn-stepfunctions-activity-tagsentry-key"
            },
            "stability": "external",
            "summary": "The `key` for a key-value pair in a tag entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 235
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html#cfn-stepfunctions-activity-tagsentry-value"
            },
            "stability": "external",
            "summary": "The `value` for a key-value pair in a tag entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 241
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnActivity.TagsEntryProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnActivityProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnActivity`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cfnActivityProps: stepfunctions.CfnActivityProps = {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivityProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 19
      },
      "name": "CfnActivityProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-name"
            },
            "remarks": "A name must *not* contain:\n\n- white space\n- brackets `< > { } [ ]`\n- wildcard characters `? *`\n- special characters `\" # % \\ ^ | ~ ` $ & , ; : /`\n- control characters ( `U+0000-001F` , `U+007F-009F` )\n\nTo enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.",
            "stability": "external",
            "summary": "The name of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 36
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-tags"
            },
            "remarks": "Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .",
            "stability": "external",
            "summary": "The list of tags to add to a resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 45
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnActivityProps"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::StepFunctions::StateMachine",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Provisions a state machine. A state machine consists of a collection of states that can do work ( `Task` states), determine to which states to transition next ( `Choice` states), stop an execution with an error ( `Fail` states), and so on. State machines are specified using a JSON-based, structured language.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::StepFunctions::StateMachine`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\nconst cfnStateMachine = new stepfunctions.CfnStateMachine(this, 'MyCfnStateMachine', {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::StepFunctions::StateMachine`."
        },
        "locationInModule": {
          "filename": "lib/stepfunctions.generated.ts",
          "line": 616
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachineProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 476
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 640
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 660
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnStateMachine",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 480
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 505
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "remarks": "`{ \"Fn::GetAtt\": [\"MyStateMachine\", \"Name\"] }`\n\nReturns the name of your state machine:\n\n`HelloWorld-StateMachine`\n\nIf you did not specify the name it will be similar to the following:\n\n`MyStateMachine-1234abcdefgh`\n\nFor more information about using `Fn::GetAtt` , see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html) .",
            "stability": "external",
            "summary": "Returns the name of the state machine. For example:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 523
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 645
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tags"
            },
            "remarks": "Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .",
            "stability": "external",
            "summary": "The list of tags to add to a resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 600
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definition"
            },
            "remarks": "The state machine definition must be in JSON or YAML, and the format of the object must match the format of your AWS Step Functions template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .",
            "stability": "external",
            "summary": "The Amazon States Language definition of the state machine."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 537
          },
          "name": "definition",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-rolearn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the IAM role to use for this state machine."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 530
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitions3location"
            },
            "remarks": "The state machine definition must be a JSON or YAML file.",
            "stability": "external",
            "summary": "The name of the S3 bucket where the state machine definition is stored."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 544
          },
          "name": "definitionS3Location",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionstring"
            },
            "remarks": "The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .",
            "stability": "external",
            "summary": "The Amazon States Language definition of the state machine."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 551
          },
          "name": "definitionString",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionsubstitutions"
            },
            "remarks": "This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.",
            "stability": "external",
            "summary": "A map (string to string) that specifies the mappings for placeholder variables in the state machine definition."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 558
          },
          "name": "definitionSubstitutions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-loggingconfiguration"
            },
            "remarks": "> By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.",
            "stability": "external",
            "summary": "Defines what execution history events are logged and where they are logged."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 567
          },
          "name": "loggingConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename"
            },
            "remarks": "A name must *not* contain:\n\n- white space\n- brackets `< > { } [ ]`\n- wildcard characters `? *`\n- special characters `\" # % \\ ^ | ~ ` $ & , ; : /`\n- control characters ( `U+0000-001F` , `U+007F-009F` )\n\n> If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the state machine."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 584
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinetype"
            },
            "remarks": "The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.",
            "stability": "external",
            "summary": "Determines whether a `STANDARD` or `EXPRESS` state machine is created."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 591
          },
          "name": "stateMachineType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tracingconfiguration"
            },
            "stability": "external",
            "summary": "Selects whether or not the state machine's AWS X-Ray tracing is enabled."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 607
          },
          "name": "tracingConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-cloudwatchlogsloggroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "> For more information see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.",
        "stability": "external",
        "summary": "Defines a CloudWatch log group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cloudWatchLogsLogGroupProperty: stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty = {\n  logGroupArn: 'logGroupArn',\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 676
      },
      "name": "CloudWatchLogsLogGroupProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-cloudwatchlogsloggroup.html#cfn-stepfunctions-statemachine-cloudwatchlogsloggroup-loggrouparn"
            },
            "remarks": "The ARN must end with `:*`",
            "stability": "external",
            "summary": "The ARN of the the CloudWatch log group to which you want your logs emitted to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 682
          },
          "name": "logGroupArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.CloudWatchLogsLogGroupProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.LogDestinationProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-logdestination.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "> For more information on logging with `EXPRESS` workflows, see [Logging Express Workflows Using CloudWatch Logs](https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html) .",
        "stability": "external",
        "summary": "Defines a destination for `LoggingConfiguration` .",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst logDestinationProperty: stepfunctions.CfnStateMachine.LogDestinationProperty = {\n  cloudWatchLogsLogGroup: {\n    logGroupArn: 'logGroupArn',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.LogDestinationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 745
      },
      "name": "LogDestinationProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-logdestination.html#cfn-stepfunctions-statemachine-logdestination-cloudwatchlogsloggroup"
            },
            "remarks": "For more information, see [AWS::Logs::LogGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html) in the AWS CloudFormation User Guide.",
            "stability": "external",
            "summary": "An object describing a CloudWatch log group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 751
          },
          "name": "cloudWatchLogsLogGroup",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.LogDestinationProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-loggingconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "> By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.",
        "stability": "external",
        "summary": "Defines what execution history events are logged and where they are logged.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst loggingConfigurationProperty: stepfunctions.CfnStateMachine.LoggingConfigurationProperty = {\n  destinations: [{\n    cloudWatchLogsLogGroup: {\n      logGroupArn: 'logGroupArn',\n    },\n  }],\n  includeExecutionData: false,\n  level: 'level',\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 814
      },
      "name": "LoggingConfigurationProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-loggingconfiguration.html#cfn-stepfunctions-statemachine-loggingconfiguration-destinations"
            },
            "remarks": "Limited to size 1. Required, if your log level is not set to `OFF` .",
            "stability": "external",
            "summary": "An array of objects that describes where your execution history events will be logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 820
          },
          "name": "destinations",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.LogDestinationProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-loggingconfiguration.html#cfn-stepfunctions-statemachine-loggingconfiguration-includeexecutiondata"
            },
            "remarks": "When set to `false` , data is excluded.",
            "stability": "external",
            "summary": "Determines whether execution data is included in your log."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 826
          },
          "name": "includeExecutionData",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-loggingconfiguration.html#cfn-stepfunctions-statemachine-loggingconfiguration-level"
            },
            "stability": "external",
            "summary": "Defines which category of execution history events are logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 832
          },
          "name": "level",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.LoggingConfigurationProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-s3location.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The state machine definition must be a JSON or YAML file.",
        "stability": "external",
        "summary": "Defines the S3 bucket location where a state machine definition is stored.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst s3LocationProperty: stepfunctions.CfnStateMachine.S3LocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 899
      },
      "name": "S3LocationProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-s3location.html#cfn-stepfunctions-statemachine-s3location-bucket"
            },
            "stability": "external",
            "summary": "The name of the S3 bucket where the state machine definition JSON or YAML file is stored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 905
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-s3location.html#cfn-stepfunctions-statemachine-s3location-key"
            },
            "stability": "external",
            "summary": "The name of the state machine definition file (Amazon S3 object name)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 911
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-s3location.html#cfn-stepfunctions-statemachine-s3location-version"
            },
            "stability": "external",
            "summary": "For versioning-enabled buckets, a specific version of the state machine definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 917
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.S3LocationProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `TagsEntry` property specifies *tags* to identify a state machine.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tagsEntryProperty: stepfunctions.CfnStateMachine.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 986
      },
      "name": "TagsEntryProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html#cfn-stepfunctions-statemachine-tagsentry-key"
            },
            "stability": "external",
            "summary": "The `key` for a key-value pair in a tag entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 992
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html#cfn-stepfunctions-statemachine-tagsentry-value"
            },
            "stability": "external",
            "summary": "The `value` for a key-value pair in a tag entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 998
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.TagsEntryProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tracingconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "To configure your state machine to send trace data to X-Ray, set `Enabled` to `true` .",
        "stability": "external",
        "summary": "Selects whether or not the state machine's AWS X-Ray tracing is enabled.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tracingConfigurationProperty: stepfunctions.CfnStateMachine.TracingConfigurationProperty = {\n  enabled: false,\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 1064
      },
      "name": "TracingConfigurationProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tracingconfiguration.html#cfn-stepfunctions-statemachine-tracingconfiguration-enabled"
            },
            "stability": "external",
            "summary": "When set to `true` , X-Ray tracing is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 1070
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachine.TracingConfigurationProperty"
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachineProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnStateMachine`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\nconst cfnStateMachineProps: stepfunctions.CfnStateMachineProps = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 306
      },
      "name": "CfnStateMachineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-rolearn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the IAM role to use for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 313
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definition"
            },
            "remarks": "The state machine definition must be in JSON or YAML, and the format of the object must match the format of your AWS Step Functions template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .",
            "stability": "external",
            "summary": "The Amazon States Language definition of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 320
          },
          "name": "definition",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitions3location"
            },
            "remarks": "The state machine definition must be a JSON or YAML file.",
            "stability": "external",
            "summary": "The name of the S3 bucket where the state machine definition is stored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 327
          },
          "name": "definitionS3Location",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionstring"
            },
            "remarks": "The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .",
            "stability": "external",
            "summary": "The Amazon States Language definition of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 334
          },
          "name": "definitionString",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionsubstitutions"
            },
            "remarks": "This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.",
            "stability": "external",
            "summary": "A map (string to string) that specifies the mappings for placeholder variables in the state machine definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 341
          },
          "name": "definitionSubstitutions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-loggingconfiguration"
            },
            "remarks": "> By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.",
            "stability": "external",
            "summary": "Defines what execution history events are logged and where they are logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 350
          },
          "name": "loggingConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename"
            },
            "remarks": "A name must *not* contain:\n\n- white space\n- brackets `< > { } [ ]`\n- wildcard characters `? *`\n- special characters `\" # % \\ ^ | ~ ` $ & , ; : /`\n- control characters ( `U+0000-001F` , `U+007F-009F` )\n\n> If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 367
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinetype"
            },
            "remarks": "The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.",
            "stability": "external",
            "summary": "Determines whether a `STANDARD` or `EXPRESS` state machine is created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 374
          },
          "name": "stateMachineType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tags"
            },
            "remarks": "Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .",
            "stability": "external",
            "summary": "The list of tags to add to a resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 383
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tracingconfiguration"
            },
            "stability": "external",
            "summary": "Selects whether or not the state machine's AWS X-Ray tracing is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 390
          },
          "name": "tracingConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/stepfunctions.generated:CfnStateMachineProps"
    },
    "@aws-cdk/aws-stepfunctions.Chain": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "A Chain has a start and zero or more chainable ends. If there are\nzero ends, calling next() on the Chain will fail.",
        "stability": "stable",
        "summary": "A collection of states to chain onto.",
        "example": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Chain",
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/chain.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Make a Chain with specific start and end states, and a last-added Chainable."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 29
          },
          "name": "custom",
          "parameters": [
            {
              "name": "startState",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            },
            {
              "name": "endStates",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-stepfunctions.INextable"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "lastAdded",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Make a Chain with the start from one chain and the ends from another."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 22
          },
          "name": "sequence",
          "parameters": [
            {
              "name": "start",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Begin a new Chain from one chainable."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 15
          },
          "name": "start",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 57
          },
          "name": "next",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "This can be used to add error handling to a sequence of states.\n\nBe aware that this changes the result of the inner state machine\nto be an array with the result of the state machine in it. Adjust\nyour paths accordingly. For example, change 'outputPath' to\n'$[0]'.",
            "stability": "stable",
            "summary": "Return a single state that encompasses all states in the chain."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 79
          },
          "name": "toSingleState",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        }
      ],
      "name": "Chain",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The chainable end state(s) of this chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 46
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Identify this Chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 36
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The start state of this chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 41
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ],
      "symbolId": "lib/chain:Chain"
    },
    "@aws-cdk/aws-stepfunctions.Choice": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A choice state can be used to make decisions based on the execution\nstate.",
        "stability": "stable",
        "summary": "Define a Choice in the state machine.",
        "example": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Choice",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/choice.ts",
          "line": 49
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ChoiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 46
      },
      "methods": [
        {
          "docs": {
            "remarks": "Use this to combine all possible choice paths back.",
            "stability": "stable",
            "summary": "Return a Chain that contains all reachable end states from this Choice."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 77
          },
          "name": "afterwards",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.AfterwardsOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "If no conditions match and no otherwise() has been given, an execution\nerror will be raised.",
            "stability": "stable",
            "summary": "If none of the given conditions match, continue execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 67
          },
          "name": "otherwise",
          "parameters": [
            {
              "name": "def",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Choice"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 91
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "If the given condition matches, continue execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 56
          },
          "name": "when",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Choice"
            }
          }
        }
      ],
      "name": "Choice",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 47
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/choice:Choice"
    },
    "@aws-cdk/aws-stepfunctions.ChoiceProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Choice state.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst choiceProps: stepfunctions.ChoiceProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ChoiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 11
      },
      "name": "ChoiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 17
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 27
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 37
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/choice:ChoiceProps"
    },
    "@aws-cdk/aws-stepfunctions.Condition": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "A Condition for use in a Choice state branch.",
        "example": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Condition",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/condition.ts",
        "line": 4
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Combine two or more conditions with a logical AND."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 323
          },
          "name": "and",
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a boolean field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 91
          },
          "name": "booleanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a boolean field equals to a value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 98
          },
          "name": "booleanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is boolean."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 51
          },
          "name": "isBoolean",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not boolean."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 58
          },
          "name": "isNotBoolean",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not null."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 79
          },
          "name": "isNotNull",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not numeric."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 44
          },
          "name": "isNotNumeric",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not present."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 16
          },
          "name": "isNotPresent",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not a string."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 30
          },
          "name": "isNotString",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is not a timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 72
          },
          "name": "isNotTimestamp",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is Null."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 85
          },
          "name": "isNull",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is numeric."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 37
          },
          "name": "isNumeric",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is present."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 9
          },
          "name": "isPresent",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is a string."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 23
          },
          "name": "isString",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if variable is a timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 65
          },
          "name": "isTimestamp",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Negate a condition."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 337
          },
          "name": "not",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 175
          },
          "name": "numberEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field has the value in a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 182
          },
          "name": "numberEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is greater than the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 217
          },
          "name": "numberGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is greater than or equal to the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 231
          },
          "name": "numberGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is greater than or equal to the value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 238
          },
          "name": "numberGreaterThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is greater than the value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 224
          },
          "name": "numberGreaterThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is less than the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 189
          },
          "name": "numberLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is less than or equal to the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 203
          },
          "name": "numberLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is less than or equal to the numeric value at given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 210
          },
          "name": "numberLessThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a numeric field is less than the value at the given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 196
          },
          "name": "numberLessThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Combine two or more conditions with a logical OR."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 330
          },
          "name": "or",
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 112
          },
          "name": "stringEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field equals to a value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 105
          },
          "name": "stringEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts after a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 147
          },
          "name": "stringGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts after or equal to a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 168
          },
          "name": "stringGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts after or equal to value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 161
          },
          "name": "stringGreaterThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts after a value at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 154
          },
          "name": "stringGreaterThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts before a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 119
          },
          "name": "stringLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts equal to or before a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 133
          },
          "name": "stringLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts equal to or before a given mapping."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 140
          },
          "name": "stringLessThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a string field sorts before a given value at a particular mapping."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 126
          },
          "name": "stringLessThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a field matches a string pattern that can contain a wild card (*) e.g: log-*.txt or *LATEST*. No other characters other than \"*\" have any special meaning - * can be escaped: \\\\*."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 316
          },
          "name": "stringMatches",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is the same time as the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 245
          },
          "name": "timestampEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is the same time as the timestamp at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 252
          },
          "name": "timestampEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is after the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 287
          },
          "name": "timestampGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is after or equal to the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 301
          },
          "name": "timestampGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is after or equal to the timestamp at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 308
          },
          "name": "timestampGreaterThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is after the timestamp at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 294
          },
          "name": "timestampGreaterThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is before the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 259
          },
          "name": "timestampLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is before or equal to the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 273
          },
          "name": "timestampLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is before or equal to the timestamp at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 280
          },
          "name": "timestampLessThanEqualsJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Matches if a timestamp field is before the timestamp at a given mapping path."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 266
          },
          "name": "timestampLessThanJsonPath",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Render Amazon States Language JSON for the condition."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 344
          },
          "name": "renderCondition",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "Condition",
      "symbolId": "lib/condition:Condition"
    },
    "@aws-cdk/aws-stepfunctions.Context": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "deprecated": "replaced by `JsonPath`",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#wait-token-contextobject",
        "stability": "deprecated",
        "summary": "Extract a field from the State Machine Context data."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Context",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 227
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Instead of using a literal number, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 239
          },
          "name": "numberAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Instead of using a literal string, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 231
          },
          "name": "stringAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Context",
      "properties": [
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "deprecated",
            "summary": "Use the entire context data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 261
          },
          "name": "entireContext",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "External actions will need this token to report step completion\nback to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`\ncalls.",
            "stability": "deprecated",
            "summary": "Return the Task Token field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 251
          },
          "name": "taskToken",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/fields:Context"
    },
    "@aws-cdk/aws-stepfunctions.CustomState": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "stability": "stable",
        "summary": "State defined by supplying Amazon States Language (ASL) in the state machine.",
        "example": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CustomState",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/custom-state.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.CustomStateProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/custom-state.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/custom-state.ts",
            "line": 40
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/custom-state.ts",
            "line": 48
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "CustomState",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/custom-state.ts",
            "line": 23
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/custom-state:CustomState"
    },
    "@aws-cdk/aws-stepfunctions.CustomStateProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a custom state definition.",
        "example": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CustomStateProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/custom-state.ts",
        "line": 9
      },
      "name": "CustomStateProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html",
            "stability": "stable",
            "summary": "Amazon States Language (JSON-based) definition of the state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/custom-state.ts",
            "line": 15
          },
          "name": "stateJson",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/states/custom-state:CustomStateProps"
    },
    "@aws-cdk/aws-stepfunctions.Data": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "deprecated": "replaced by `JsonPath`",
        "stability": "deprecated",
        "summary": "Extract a field from the State Machine data that gets passed around between states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Data",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 173
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Determines if the indicated string is an encoded JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 213
          },
          "name": "isJsonPathString",
          "parameters": [
            {
              "docs": {
                "summary": "string to be evaluated."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Instead of using a literal string list, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 185
          },
          "name": "listAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Instead of using a literal number, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 193
          },
          "name": "numberAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Instead of using a literal string, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 177
          },
          "name": "stringAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Data",
      "properties": [
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "deprecated",
            "summary": "Use the entire data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 204
          },
          "name": "entirePayload",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/fields:Data"
    },
    "@aws-cdk/aws-stepfunctions.Errors": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Predefined error strings Error names in Amazon States Language - https://states-language.net/spec.html#appendix-a Error handling in Step Functions - https://docs.aws.amazon.com/step-functions/latest/dg/concepts-error-handling.html.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst errors = new stepfunctions.Errors();",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Errors",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 42
      },
      "name": "Errors",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Matches any Error."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 46
          },
          "name": "ALL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A branch of a Parallel state failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 84
          },
          "name": "BRANCH_FAILED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Task State failed to heartbeat for a time longer than the “HeartbeatSeconds” value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 51
          },
          "name": "HEARTBEAT_TIMEOUT",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Choice state failed to find a match for the condition field extracted from its input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 90
          },
          "name": "NO_CHOICE_MATCHED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Within a state’s “Parameters” field, the attempt to replace a field whose name ends in “.$” using a Path failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 79
          },
          "name": "PARAMETER_PATH_FAILURE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Task State failed because it had insufficient privileges to execute the specified code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 68
          },
          "name": "PERMISSIONS",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Task State’s “ResultPath” field cannot be applied to the input the state received."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 73
          },
          "name": "RESULT_PATH_MATCH_FAILURE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Task State failed during the execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 62
          },
          "name": "TASKS_FAILED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "A Task State either ran longer than the “TimeoutSeconds” value, or failed to heartbeat for a time longer than the “HeartbeatSeconds” value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 57
          },
          "name": "TIMEOUT",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/types:Errors"
    },
    "@aws-cdk/aws-stepfunctions.Fail": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Fail state terminates the state execution in failure.",
        "stability": "stable",
        "summary": "Define a Fail state in the state machine.",
        "example": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Fail",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/fail.ts",
          "line": 43
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.FailProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/fail.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 53
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Fail",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 38
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/fail:Fail"
    },
    "@aws-cdk/aws-stepfunctions.FailProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Fail state.",
        "example": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FailProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/fail.ts",
        "line": 9
      },
      "name": "FailProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No description",
            "stability": "stable",
            "summary": "A description for the cause of the failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 29
          },
          "name": "cause",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 15
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No error code",
            "stability": "stable",
            "summary": "Error code used to represent this failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 22
          },
          "name": "error",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/fail:FailProps"
    },
    "@aws-cdk/aws-stepfunctions.FieldUtils": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Helper functions to work with structures containing fields."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FieldUtils",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 271
      },
      "methods": [
        {
          "docs": {
            "remarks": "The field is considered included if the field itself or one of its containing\nfields occurs anywhere in the payload.",
            "stability": "stable",
            "summary": "Returns whether the given task structure contains the TaskToken field anywhere."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 292
          },
          "name": "containsTaskToken",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return all JSON paths used in the given structure."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 282
          },
          "name": "findReferencedPaths",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render a JSON structure containing fields to the right StepFunctions structure."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 275
          },
          "name": "renderObject",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        }
      ],
      "name": "FieldUtils",
      "symbolId": "lib/fields:FieldUtils"
    },
    "@aws-cdk/aws-stepfunctions.FindStateOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for finding reachable states.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst findStateOptions: stepfunctions.FindStateOptions = {\n  includeErrorHandlers: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FindStateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 464
      },
      "name": "FindStateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether or not to follow error-handling transitions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 470
          },
          "name": "includeErrorHandlers",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/states/state:FindStateOptions"
    },
    "@aws-cdk/aws-stepfunctions.IActivity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Represents a Step Functions Activity https://docs.aws.amazon.com/step-functions/latest/dg/concepts-activities.html."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IActivity",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 211
      },
      "name": "IActivity",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 217
          },
          "name": "activityArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 224
          },
          "name": "activityName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/activity:IActivity"
    },
    "@aws-cdk/aws-stepfunctions.IChainable": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Interface for objects that can be used in a Chain."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IChainable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 20
      },
      "name": "IChainable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The chainable end state(s) of this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 34
          },
          "name": "endStates",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 24
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The start state of this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 29
          },
          "name": "startState",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ],
      "symbolId": "lib/types:IChainable"
    },
    "@aws-cdk/aws-stepfunctions.INextable": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Interface for states that can have 'next' states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.INextable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 8
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "The chain of states built up",
            "stability": "stable",
            "summary": "Go to the indicated state after this state."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 14
          },
          "name": "next",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        }
      ],
      "name": "INextable",
      "symbolId": "lib/types:INextable"
    },
    "@aws-cdk/aws-stepfunctions.IStateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "A State Machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IStateMachine",
      "interfaces": [
        "@aws-cdk/core.IResource",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 495
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity custom permissions."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 546
          },
          "name": "grant",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The list of desired actions."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions for all executions of a state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 538
          },
          "name": "grantExecution",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The list of desired actions."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity read permissions for this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 523
          },
          "name": "grantRead",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions to start an execution of this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 508
          },
          "name": "grantStartExecution",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions to start a synchronous execution of this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 516
          },
          "name": "grantStartSyncExecution",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity read permissions for this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 530
          },
          "name": "grantTaskResponse",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for this State Machine's executions."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 553
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were aborted."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 574
          },
          "name": "metricAborted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that failed."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 560
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were started."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 595
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that succeeded."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 581
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were throttled."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 567
          },
          "name": "metricThrottled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the interval, in milliseconds, between the time the execution starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 602
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that timed out."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 588
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "IStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ARN of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 500
          },
          "name": "stateMachineArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/state-machine:IStateMachine"
    },
    "@aws-cdk/aws-stepfunctions.IStepFunctionsTask": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "deprecated": "replaced by `TaskStateBase`.",
        "stability": "deprecated",
        "summary": "Interface for resources that can be used as tasks."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IStepFunctionsTask",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Called when the task object is used in a workflow."
          },
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 14
          },
          "name": "bind",
          "parameters": [
            {
              "name": "task",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Task"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig"
            }
          }
        }
      ],
      "name": "IStepFunctionsTask",
      "symbolId": "lib/step-functions-task:IStepFunctionsTask"
    },
    "@aws-cdk/aws-stepfunctions.InputType": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "The type of task input."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.InputType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/input.ts",
        "line": 74
      },
      "members": [
        {
          "docs": {
            "remarks": "valid JSON text: standalone, quote-delimited strings; objects; arrays; numbers; Boolean values; and null.\n\nexample: `literal string`\nexample: {\"json\": \"encoded\"}",
            "stability": "stable",
            "summary": "Use a literal string This might be a JSON-encoded object, or just text."
          },
          "name": "TEXT"
        },
        {
          "docs": {
            "remarks": "example:\n{\n  literal: 'literal',\n  SomeInput: sfn.JsonPath.stringAt('$.someField')\n}",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html",
            "stability": "stable",
            "summary": "Use an object which may contain Data and Context fields as object values, if desired."
          },
          "name": "OBJECT"
        }
      ],
      "name": "InputType",
      "symbolId": "lib/input:InputType"
    },
    "@aws-cdk/aws-stepfunctions.IntegrationPattern": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "You can control these AWS services using service integration patterns:",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html",
        "stability": "stable",
        "summary": "AWS Step Functions integrates with services directly in the Amazon States Language.",
        "example": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IntegrationPattern",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/states/task-base.ts",
        "line": 328
      },
      "members": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-default",
            "stability": "stable",
            "summary": "Step Functions will wait for an HTTP response and then progress to the next state."
          },
          "name": "REQUEST_RESPONSE"
        },
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync",
            "stability": "stable",
            "summary": "Step Functions can wait for a request to complete before progressing to the next state."
          },
          "name": "RUN_JOB"
        },
        {
          "docs": {
            "remarks": "You must set a task token when using the callback pattern",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token",
            "stability": "stable",
            "summary": "Callback tasks provide a way to pause a workflow until a task token is returned."
          },
          "name": "WAIT_FOR_TASK_TOKEN"
        }
      ],
      "name": "IntegrationPattern",
      "symbolId": "lib/states/task-base:IntegrationPattern"
    },
    "@aws-cdk/aws-stepfunctions.JsonPath": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-paths.html",
        "stability": "stable",
        "summary": "Extract a field from the State Machine data or context that gets passed around between states.",
        "example": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$$.State.Name'),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.JsonPath",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "remarks": "Combine any number of string literals or JsonPath expressions into an array.\n\nUse this function if the value of an array element directly has to come\nfrom a JSON Path expression (either the State object or the Context object).\n\nIf the array contains object literals whose values come from a JSON path\nexpression, you do not need to use this function.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html",
            "stability": "stable",
            "summary": "Make an intrinsic States.Array expression."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 102
          },
          "name": "array",
          "parameters": [
            {
              "name": "values",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This can be used to embed JSON Path variables inside a format string.\n\nFor example:\n\n```ts\nsfn.JsonPath.format('Hello, my name is {}.', sfn.JsonPath.stringAt('$.name'))\n```",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html",
            "stability": "stable",
            "summary": "Make an intrinsic States.Format expression."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 119
          },
          "name": "format",
          "parameters": [
            {
              "name": "formatString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "values",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Determines if the indicated string is an encoded JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 64
          },
          "name": "isEncodedJsonPath",
          "parameters": [
            {
              "docs": {
                "summary": "string to be evaluated."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "During the execution of the Step Functions state machine, encode the\ngiven object into a JSON string.\n\nFor example:\n\n```ts\nsfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.someObject'))\n```",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html",
            "stability": "stable",
            "summary": "Make an intrinsic States.JsonToString expression."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 156
          },
          "name": "jsonToString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Instead of using a literal string list, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 27
          },
          "name": "listAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Instead of using a literal number, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 36
          },
          "name": "numberAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Reference a complete (complex) object in a JSON path location."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 44
          },
          "name": "objectAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/core.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Instead of using a literal string, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 19
          },
          "name": "stringAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "During the execution of the Step Functions state machine, parse the given\nargument as JSON into its object form.\n\nFor example:\n\n```ts\nsfn.JsonPath.stringToJson(sfn.JsonPath.stringAt('$.someJsonBody'))\n```",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html",
            "stability": "stable",
            "summary": "Make an intrinsic States.StringToJson expression."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 138
          },
          "name": "stringToJson",
          "parameters": [
            {
              "name": "jsonString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/core.IResolvable"
            }
          },
          "static": true
        }
      ],
      "name": "JsonPath",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "Special string value to discard state input, output or result."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 14
          },
          "name": "DISCARD",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "stable",
            "summary": "Use the entire context data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 85
          },
          "name": "entireContext",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "stable",
            "summary": "Use the entire data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 55
          },
          "name": "entirePayload",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "External actions will need this token to report step completion\nback to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`\ncalls.",
            "stability": "stable",
            "summary": "Return the Task Token field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 75
          },
          "name": "taskToken",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/fields:JsonPath"
    },
    "@aws-cdk/aws-stepfunctions.LogLevel": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "default": "ERROR",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html",
        "stability": "stable",
        "summary": "Defines which category of execution history events are logged.",
        "example": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.LogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 37
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "No Logging."
          },
          "name": "OFF"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Log everything."
          },
          "name": "ALL"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Log all errors."
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Log fatal errors."
          },
          "name": "FATAL"
        }
      ],
      "name": "LogLevel",
      "symbolId": "lib/state-machine:LogLevel"
    },
    "@aws-cdk/aws-stepfunctions.LogOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Defines what execution history events are logged and where they are logged.",
        "example": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.LogOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 59
      },
      "name": "LogOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The log group where the execution history events will be logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 63
          },
          "name": "destination",
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Determines whether execution data is included in your log."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 70
          },
          "name": "includeExecutionData",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ERROR",
            "stability": "stable",
            "summary": "Defines which category of execution history events are logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 77
          },
          "name": "level",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.LogLevel"
          }
        }
      ],
      "symbolId": "lib/state-machine:LogOptions"
    },
    "@aws-cdk/aws-stepfunctions.Map": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A `Map` state can be used to run a set of steps for each element of an input array.\nA Map state will execute the same steps for multiple entries of an array in the state input.\n\nWhile the Parallel state executes multiple branches of steps using the same input, a Map state\nwill execute the same steps for multiple entries of an array in the state input.",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-map-state.html",
        "stability": "stable",
        "summary": "Define a Map state in the state machine.",
        "example": "const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Map",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/map.ts",
          "line": 119
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.MapProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/map.ts",
        "line": 113
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "stable",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 143
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Map"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "stable",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 132
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Map"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Define iterator state machine in Map."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 159
          },
          "name": "iterator",
          "parameters": [
            {
              "name": "iterator",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Map"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 151
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 168
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Validate this state."
          },
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 187
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Map",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 114
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/map:Map"
    },
    "@aws-cdk/aws-stepfunctions.MapProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Map state.",
        "example": "const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.MapProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/map.ts",
        "line": 13
      },
      "name": "MapProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 19
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 29
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "stability": "stable",
            "summary": "JSONPath expression to select the array to iterate over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 56
          },
          "name": "itemsPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- full concurrency",
            "remarks": "An upper bound on the number of iterations you want running at once.",
            "stability": "stable",
            "summary": "MaxConcurrency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 86
          },
          "name": "maxConcurrency",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 39
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "stability": "stable",
            "summary": "The JSON that you want to override your default iteration input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 63
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 49
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "You can use ResultSelector to create a payload with values that are static\nor selected from the state's raw result.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector",
            "stability": "stable",
            "summary": "The JSON that will replace the state's raw result and become the effective result before ResultPath is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/map.ts",
            "line": 77
          },
          "name": "resultSelector",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/states/map:MapProps"
    },
    "@aws-cdk/aws-stepfunctions.Parallel": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Parallel state can be used to run one or more state machines at the same\ntime.\n\nThe Result of a Parallel state is an array of the results of its substatemachines.",
        "stability": "stable",
        "summary": "Define a Parallel state in the state machine.",
        "example": "import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}",
        "custom": {
          "exampleMetadata": "nofixture infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Parallel",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/parallel.ts",
          "line": 76
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/parallel.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "stable",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 99
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "stable",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 88
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overwrites State.bindToGraph. Adds branches to the Parallel state here so that any necessary prefixes are appended first."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 126
          },
          "name": "bindToGraph",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Define one or more branches to run in parallel."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 115
          },
          "name": "branch",
          "parameters": [
            {
              "name": "branches",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 107
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 138
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Validate this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 154
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Parallel",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 73
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/parallel:Parallel"
    },
    "@aws-cdk/aws-stepfunctions.ParallelProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Parallel state.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\nconst parallelProps: stepfunctions.ParallelProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/parallel.ts",
        "line": 11
      },
      "name": "ParallelProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 17
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 27
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 37
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 47
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "You can use ResultSelector to create a payload with values that are static\nor selected from the state's raw result.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector",
            "stability": "stable",
            "summary": "The JSON that will replace the state's raw result and become the effective result before ResultPath is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 61
          },
          "name": "resultSelector",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/states/parallel:ParallelProps"
    },
    "@aws-cdk/aws-stepfunctions.Pass": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Pass state can be used to transform the current execution's state.",
        "stability": "stable",
        "summary": "Define a Pass in the state machine.",
        "example": "const choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Pass",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/pass.ts",
          "line": 126
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.PassProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 121
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 136
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 144
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Pass",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 122
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/pass:Pass"
    },
    "@aws-cdk/aws-stepfunctions.PassProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Pass state.",
        "example": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.PassProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 58
      },
      "name": "PassProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 64
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 74
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 84
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No parameters",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "stable",
            "summary": "Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 113
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No injected result",
            "remarks": "Can be used to inject or replace the current execution state.",
            "stability": "stable",
            "summary": "If given, treat as the result of this operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 103
          },
          "name": "result",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.Result"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 94
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/pass:PassProps"
    },
    "@aws-cdk/aws-stepfunctions.Result": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "The result of a Pass operation.",
        "example": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Result",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/pass.ts",
          "line": 51
        },
        "parameters": [
          {
            "docs": {
              "summary": "result of the Pass operation."
            },
            "name": "value",
            "type": {
              "primitive": "any"
            }
          }
        ],
        "protected": true
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The result of the operation is an array."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 43
          },
          "name": "fromArray",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The result of the operation is a boolean."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 29
          },
          "name": "fromBoolean",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The result of the operation is a number."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 22
          },
          "name": "fromNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The result of the operation is an object."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 36
          },
          "name": "fromObject",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The result of the operation is a string."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 15
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        }
      ],
      "name": "Result",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "result of the Pass operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 51
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/states/pass:Result"
    },
    "@aws-cdk/aws-stepfunctions.RetryProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Retry details.",
        "example": "const parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.RetryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 96
      },
      "name": "RetryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "stability": "stable",
            "summary": "Multiplication for how much longer the wait interval gets on every retry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 129
          },
          "name": "backoffRate",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "All errors",
            "remarks": "A list of error strings to retry, which can be either predefined errors\n(for example Errors.NoChoiceMatched) or a self-defined error.",
            "stability": "stable",
            "summary": "Errors to retry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 105
          },
          "name": "errors",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(1)",
            "stability": "stable",
            "summary": "How many seconds to wait initially before retrying."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 112
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "remarks": "May be 0 to disable retry for specific errors (in case you have\na catch-all retry policy).",
            "stability": "stable",
            "summary": "How many times to retry this particular error."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 122
          },
          "name": "maxAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/types:RetryProps"
    },
    "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "default": "FIRE_AND_FORGET",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html\n\nHere, they are named as FIRE_AND_FORGET, SYNC and WAIT_FOR_TASK_TOKEN respectfully.",
        "stability": "stable",
        "summary": "Three ways to call an integrated service: Request Response, Run a Job and Wait for a Callback with Task Token."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 93
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Call a service and progress to the next state immediately after the API call completes."
          },
          "name": "FIRE_AND_FORGET"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Call a service and wait for a job to complete."
          },
          "name": "SYNC"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Call a service with a task token and wait until that token is returned by SendTaskSuccess/SendTaskFailure with payload."
          },
          "name": "WAIT_FOR_TASK_TOKEN"
        }
      ],
      "name": "ServiceIntegrationPattern",
      "symbolId": "lib/step-functions-task:ServiceIntegrationPattern"
    },
    "@aws-cdk/aws-stepfunctions.SingleStateOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Options for creating a single state.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\nconst singleStateOptions: stepfunctions.SingleStateOptions = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  prefixStates: 'prefixStates',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  stateId: 'stateId',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.SingleStateOptions",
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.ParallelProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine-fragment.ts",
        "line": 70
      },
      "name": "SingleStateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "stateId",
            "stability": "stable",
            "summary": "String to prefix all stateIds in the state machine with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 83
          },
          "name": "prefixStates",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Construct ID of the StateMachineFragment",
            "stability": "stable",
            "summary": "ID of newly created containing state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 76
          },
          "name": "stateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/state-machine-fragment:SingleStateOptions"
    },
    "@aws-cdk/aws-stepfunctions.State": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "Base class for all other state classes."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.State",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/state.ts",
          "line": 195
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 80
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return only the states that allow chaining from an array of states."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 142
          },
          "name": "filterNextables",
          "parameters": [
            {
              "name": "states",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-stepfunctions.State"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-stepfunctions.INextable"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Find the set of end states states reachable through transitions from the given start state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 117
          },
          "name": "findReachableEndStates",
          "parameters": [
            {
              "name": "start",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.FindStateOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-stepfunctions.State"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This does not retrieve states from within sub-graphs, such as states within a Parallel state's branch.",
            "stability": "stable",
            "summary": "Find the set of states reachable through transitions from the given start state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 99
          },
          "name": "findReachableStates",
          "parameters": [
            {
              "name": "start",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.FindStateOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-stepfunctions.State"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a prefix to the stateId of all States found in a construct tree."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 84
          },
          "name": "prefixStates",
          "parameters": [
            {
              "name": "root",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            },
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a paralle branch to this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 326
          },
          "name": "addBranch",
          "parameters": [
            {
              "name": "branch",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a choice branch to this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 315
          },
          "name": "addChoice",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a map iterator to this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 336
          },
          "name": "addIterator",
          "parameters": [
            {
              "name": "iteration",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add a prefix to the stateId of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 222
          },
          "name": "addPrefix",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Don't call this. It will be called automatically when you work\nwith states normally.",
            "stability": "stable",
            "summary": "Register this state as part of the given graph."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 234
          },
          "name": "bindToGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Make the indicated state the default choice transition of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 346
          },
          "name": "makeDefault",
          "parameters": [
            {
              "name": "def",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Make the indicated state the default transition of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 300
          },
          "name": "makeNext",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render parallel branches in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 389
          },
          "name": "renderBranches",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render the choices in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 368
          },
          "name": "renderChoices",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render InputPath/Parameters/OutputPath in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 378
          },
          "name": "renderInputOutput",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render map iterator in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 398
          },
          "name": "renderIterator",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render the default next state in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 357
          },
          "name": "renderNextEnd",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render ResultSelector in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 420
          },
          "name": "renderResultSelector",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render error recovery options in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 410
          },
          "name": "renderRetryCatch",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Render the state as JSON."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 262
          },
          "name": "toStateJson",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "remarks": "Can be overridden by subclasses.",
            "stability": "stable",
            "summary": "Called whenever this state is bound to a graph."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 431
          },
          "name": "whenBoundToGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "State",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 167
          },
          "name": "branches",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 154
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 208
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "First state of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 149
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Tokenized string that evaluates to the state's ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 215
          },
          "name": "stateId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 161
          },
          "name": "comment",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 162
          },
          "name": "inputPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 164
          },
          "name": "outputPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 163
          },
          "name": "parameters",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 165
          },
          "name": "resultPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 166
          },
          "name": "resultSelector",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 169
          },
          "name": "defaultChoice",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 168
          },
          "name": "iteration",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
          }
        }
      ],
      "symbolId": "lib/states/state:State"
    },
    "@aws-cdk/aws-stepfunctions.StateGraph": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "A StateGraph is used to keep track of all states that are connected (have\ntransitions between them). It does not include the substatemachines in\na Parallel's branches: those are their own StateGraphs, but the graphs\nthemselves have a hierarchical relationship as well.\n\nBy assigning states to a definitive StateGraph, we verify that no state\nmachines are constructed. In particular:\n\n- Every state object can only ever be in 1 StateGraph, and not inadvertently\n   be used in two graphs.\n- Every stateId must be unique across all states in the entire state\n   machine.\n\nAll policy statements in all states in all substatemachines are bubbled so\nthat the top-level StateMachine instantiation can read them all and add\nthem to the IAM Role.\n\nYou do not need to instantiate this class; it is used internally.",
        "stability": "stable",
        "summary": "A collection of connected states.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const state: stepfunctions.State;\nconst stateGraph = new stepfunctions.StateGraph(state, 'graphDescription');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateGraph",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/state-graph.ts",
          "line": 62
        },
        "parameters": [
          {
            "docs": {
              "summary": "state that gets executed when the state machine is launched."
            },
            "name": "startState",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.State"
            }
          },
          {
            "docs": {
              "summary": "description of the state machine."
            },
            "name": "graphDescription",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-graph.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Register a Policy Statement used by states in this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 80
          },
          "name": "registerPolicyStatement",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Called by State.bindToGraph().",
            "stability": "stable",
            "summary": "Register a state as part of this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 72
          },
          "name": "registerState",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Resource changes will be bubbled up to the given graph.",
            "stability": "stable",
            "summary": "Register this graph as a child of the given graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 93
          },
          "name": "registerSuperGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language JSON for this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 106
          },
          "name": "toGraphJson",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return a string description of this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 122
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "StateGraph",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The accumulated policy statements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 41
          },
          "name": "policyStatements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "state that gets executed when the state machine is launched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 62
          },
          "name": "startState",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        },
        {
          "docs": {
            "default": "No timeout",
            "remarks": "Read/write. Only makes sense on the top-level graph, subgraphs\ndo not support this feature.",
            "stability": "stable",
            "summary": "Set a timeout to render into the graph JSON."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 36
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/state-graph:StateGraph"
    },
    "@aws-cdk/aws-stepfunctions.StateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "Define a StepFunctions State Machine.",
        "example": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachine",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/state-machine.ts",
          "line": 379
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateMachineProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IStateMachine"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 356
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Import a state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 140
          },
          "name": "fromStateMachineArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "stateMachineArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IStateMachine"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Add the given statement to the role's policy."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 431
          },
          "name": "addToRolePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity custom permissions."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 243
          },
          "name": "grant",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions on all executions of the state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 232
          },
          "name": "grantExecution",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions to read results from state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 185
          },
          "name": "grantRead",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions to start an execution of this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 161
          },
          "name": "grantStartExecution",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity permissions to start a synchronous execution of this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 173
          },
          "name": "grantStartSyncExecution",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant the given identity task response permissions on a state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 217
          },
          "name": "grantTaskResponse",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for this State Machine's executions."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 257
          },
          "name": "metric",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were aborted."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 291
          },
          "name": "metricAborted",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that failed."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 272
          },
          "name": "metricFailed",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were started."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 318
          },
          "name": "metricStarted",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that succeeded."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 300
          },
          "name": "metricSucceeded",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that were throttled."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 281
          },
          "name": "metricThrottled",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- average over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the interval, in milliseconds, between the time the execution starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 327
          },
          "name": "metricTime",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of executions that timed out."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 309
          },
          "name": "metricTimedOut",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "StateMachine",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The principal this state machine is running as."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 424
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Execution role of this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 360
          },
          "name": "role",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The ARN of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 371
          },
          "name": "stateMachineArn",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 366
          },
          "name": "stateMachineName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Type of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 377
          },
          "name": "stateMachineType",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.StateMachineType"
          }
        }
      ],
      "symbolId": "lib/state-machine:StateMachine"
    },
    "@aws-cdk/aws-stepfunctions.StateMachineFragment": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "Base class for reusable state machine fragments.",
        "example": "import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}",
        "custom": {
          "exampleMetadata": "nofixture infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachineFragment",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/construct-compat.ts",
          "line": 74
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-machine-fragment.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 62
          },
          "name": "next",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "Use this to avoid multiple copies of the state machine all having the\nsame state IDs.",
            "stability": "stable",
            "summary": "Prefix the IDs of all states in this state machine fragment."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 36
          },
          "name": "prefixStates",
          "parameters": [
            {
              "docs": {
                "remarks": "Will use construct ID by default.",
                "summary": "The prefix to add."
              },
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateMachineFragment"
            }
          }
        },
        {
          "docs": {
            "remarks": "This can be used to add retry or error handling onto this state\nmachine fragment.\n\nBe aware that this changes the result of the inner state machine\nto be an array with the result of the state machine in it. Adjust\nyour paths accordingly. For example, change 'outputPath' to\n'$[0]'.",
            "stability": "stable",
            "summary": "Wrap all states in this state machine fragment up into a single state."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 52
          },
          "name": "toSingleState",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.SingleStateOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        }
      ],
      "name": "StateMachineFragment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The states to chain onto if this fragment is used."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 22
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 24
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The start state of this state machine fragment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 17
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ],
      "symbolId": "lib/state-machine-fragment:StateMachineFragment"
    },
    "@aws-cdk/aws-stepfunctions.StateMachineProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a State Machine.",
        "example": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 83
      },
      "name": "StateMachineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Definition for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 94
          },
          "name": "definition",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No logging",
            "stability": "stable",
            "summary": "Defines what execution history events are logged and where they are logged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 122
          },
          "name": "logs",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.LogOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A role is automatically created",
            "stability": "stable",
            "summary": "The execution role for the state machine service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 101
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A name is automatically generated",
            "stability": "stable",
            "summary": "A name for the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 89
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "StateMachineType.STANDARD",
            "stability": "stable",
            "summary": "Type of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 115
          },
          "name": "stateMachineType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.StateMachineType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No timeout",
            "stability": "stable",
            "summary": "Maximum run time for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 108
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Specifies whether Amazon X-Ray tracing is enabled for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 129
          },
          "name": "tracingEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/state-machine:StateMachineProps"
    },
    "@aws-cdk/aws-stepfunctions.StateMachineType": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "default": "STANDARD",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html",
        "stability": "stable",
        "summary": "Two types of state machines are available in AWS Step Functions: EXPRESS AND STANDARD.",
        "example": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachineType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 18
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Express Workflows are ideal for high-volume, event processing workloads."
          },
          "name": "EXPRESS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Standard Workflows are ideal for long-running, durable, and auditable workflows."
          },
          "name": "STANDARD"
        }
      ],
      "name": "StateMachineType",
      "symbolId": "lib/state-machine:StateMachineType"
    },
    "@aws-cdk/aws-stepfunctions.StateProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties shared by all states.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const parameters: any;\ndeclare const resultSelector: any;\nconst stateProps: stepfunctions.StateProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 14
      },
      "name": "StateProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "A comment describing this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 20
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 30
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 50
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No parameters",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "stable",
            "summary": "Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 40
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 60
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "You can use ResultSelector to create a payload with values that are static\nor selected from the state's raw result.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector",
            "stability": "stable",
            "summary": "The JSON that will replace the state's raw result and become the effective result before ResultPath is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 74
          },
          "name": "resultSelector",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/states/state:StateProps"
    },
    "@aws-cdk/aws-stepfunctions.StateTransitionMetric": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "These rate limits are shared across all state machines.",
        "stability": "stable",
        "summary": "Metrics on the rate limiting performed on state machine execution.",
        "example": "new cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateTransitionMetric",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-transition-metrics.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for the service's state transition metrics."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 14
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of available state transitions per second."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 46
          },
          "name": "metricConsumedCapacity",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of available state transitions."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 28
          },
          "name": "metricProvisionedBucketSize",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the provisioned steady-state execution rate."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 37
          },
          "name": "metricProvisionedRefillRate",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of throttled state transitions."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 55
          },
          "name": "metricThrottledEvents",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        }
      ],
      "name": "StateTransitionMetric",
      "symbolId": "lib/state-transition-metrics:StateTransitionMetric"
    },
    "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "deprecated": "used by `IStepFunctionsTask`. `IStepFunctionsTask` is deprecated and replaced by `TaskStateBase`.",
        "stability": "deprecated",
        "summary": "Properties that define what kind of task should be created.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metricDimensions: any;\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\nconst stepFunctionsTaskConfig: stepfunctions.StepFunctionsTaskConfig = {\n  resourceArn: 'resourceArn',\n\n  // the properties below are optional\n  heartbeat: cdk.Duration.minutes(30),\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n  parameters: {\n    parametersKey: parameters,\n  },\n  policyStatements: [policyStatement],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 21
      },
      "name": "StepFunctionsTaskConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Either the ARN of a Lambda Function or Activity, or a special\nARN.",
            "stability": "deprecated",
            "summary": "The resource that represents the work to be executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 28
          },
          "name": "resourceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No heart beat timeout",
            "remarks": "If the time between heart beats takes longer than this, a 'Timeout' error is raised.\n\nThis is only relevant when using an Activity type as resource.",
            "stability": "deprecated",
            "summary": "Maximum time between heart beats."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 54
          },
          "name": "heartbeat",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No metrics",
            "stability": "deprecated",
            "summary": "The dimensions to attach to metrics."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 82
          },
          "name": "metricDimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No such metrics",
            "stability": "deprecated",
            "summary": "Prefix for plural metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 75
          },
          "name": "metricPrefixPlural",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No such metrics",
            "stability": "deprecated",
            "summary": "Prefix for singular metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 68
          },
          "name": "metricPrefixSingular",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No parameters",
            "remarks": "The meaning of these parameters is task-dependent.\n\nIts values will be merged with the `parameters` property which is configured directly\non the Task state.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "deprecated",
            "summary": "Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 43
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No policy roles",
            "stability": "deprecated",
            "summary": "Additional policy statements to add to the execution role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 61
          },
          "name": "policyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/step-functions-task:StepFunctionsTaskConfig"
    },
    "@aws-cdk/aws-stepfunctions.Succeed": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Succeed state terminates the state execution in success.",
        "stability": "stable",
        "summary": "Define a Succeed state in the state machine.",
        "example": "const success = new sfn.Succeed(this, 'We did it!');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Succeed",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/succeed.ts",
          "line": 47
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.SucceedProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/succeed.ts",
        "line": 44
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 54
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Succeed",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 45
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/succeed:Succeed"
    },
    "@aws-cdk/aws-stepfunctions.SucceedProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Succeed state.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst succeedProps: stepfunctions.SucceedProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.SucceedProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/succeed.ts",
        "line": 9
      },
      "name": "SucceedProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 15
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 25
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 35
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/succeed:SucceedProps"
    },
    "@aws-cdk/aws-stepfunctions.Task": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "deprecated": "- replaced by service integration specific classes (i.e. LambdaInvoke, SnsPublish)",
        "remarks": "Reaching a Task state causes some work to be executed, represented by the\nTask's resource property. Task constructs represent a generic Amazon\nStates Language Task.\n\nFor some resource types, more specific subclasses of Task may be available\nwhich are more convenient to use.",
        "stability": "deprecated",
        "summary": "Define a Task state in the state machine.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\nconst task = new stepfunctions.Task(this, 'MyTask', {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Task",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/states/task.ts",
          "line": 112
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/task.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "deprecated",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 142
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Task"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "deprecated",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 131
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Task"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Return the given named metric for this Task."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 178
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times this activity fails."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 256
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times the heartbeat times out for this activity."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 265
          },
          "name": "metricHeartbeatTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "deprecated",
            "summary": "The interval, in milliseconds, between the time the Task starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 193
          },
          "name": "metricRunTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times this activity is scheduled."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 220
          },
          "name": "metricScheduled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "deprecated",
            "summary": "The interval, in milliseconds, for which the activity stays in the schedule state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 202
          },
          "name": "metricScheduleTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times this activity is started."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 238
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times this activity succeeds."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 247
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "deprecated",
            "summary": "The interval, in milliseconds, between the time the activity is scheduled and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 211
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "deprecated",
            "summary": "Metric for the number of times this activity times out."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 229
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 150
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 158
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "remarks": "Can be overridden by subclasses.",
            "stability": "deprecated",
            "summary": "Called whenever this state is bound to a graph."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 269
          },
          "name": "whenBoundToGraph",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "Task",
      "properties": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 108
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/task:Task"
    },
    "@aws-cdk/aws-stepfunctions.TaskInput": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "stable",
        "summary": "Type union for task classes that accept multiple types of payload.",
        "example": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskInput",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/input.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "deprecated": "Use `fromJsonPathAt`.",
            "remarks": "Use this when you want to use a subobject or string from\nthe current task context as complete payload\nto a task.",
            "stability": "deprecated",
            "summary": "Use a part of the task context as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 58
          },
          "name": "fromContextAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "deprecated": "Use `fromJsonPathAt`.",
            "remarks": "Use this when you want to use a subobject or string from\nthe current state machine execution as complete payload\nto a task.",
            "stability": "deprecated",
            "summary": "Use a part of the execution data as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 45
          },
          "name": "fromDataAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Use this when you want to use a subobject or string from\nthe current state machine execution or the current task context\nas complete payload to a task.",
            "stability": "stable",
            "summary": "Use a part of the execution data or task context as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 32
          },
          "name": "fromJsonPathAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This object may contain JSON path fields as object values, if desired.",
            "stability": "stable",
            "summary": "Use an object as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 21
          },
          "name": "fromObject",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This might be a JSON-encoded object, or just a text.",
            "stability": "stable",
            "summary": "Use a literal string as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 12
          },
          "name": "fromText",
          "parameters": [
            {
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        }
      ],
      "name": "TaskInput",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "type of task input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 68
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.InputType"
          }
        },
        {
          "docs": {
            "remarks": "It can be a JSON-encoded object, context, data, etc.",
            "stability": "stable",
            "summary": "payload for the corresponding input type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 68
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/input:TaskInput"
    },
    "@aws-cdk/aws-stepfunctions.TaskMetricsConfig": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Task Metrics.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const metricDimensions: any;\nconst taskMetricsConfig: stepfunctions.TaskMetricsConfig = {\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskMetricsConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/task-base.ts",
        "line": 297
      },
      "name": "TaskMetricsConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No metrics",
            "stability": "stable",
            "summary": "The dimensions to attach to metrics."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 317
          },
          "name": "metricDimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No such metrics",
            "stability": "stable",
            "summary": "Prefix for plural metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 310
          },
          "name": "metricPrefixPlural",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No such metrics",
            "stability": "stable",
            "summary": "Prefix for singular metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 303
          },
          "name": "metricPrefixSingular",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/task-base:TaskMetricsConfig"
    },
    "@aws-cdk/aws-stepfunctions.TaskProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "deprecated": "- replaced by service integration specific classes (i.e. LambdaInvoke, SnsPublish)",
        "stability": "deprecated",
        "summary": "Props that are common to all tasks.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\nconst taskProps: stepfunctions.TaskProps = {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/task.ts",
        "line": 18
      },
      "name": "TaskProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Actual task to be invoked in this workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 22
          },
          "name": "task",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.IStepFunctionsTask"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "deprecated",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 29
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "deprecated",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 39
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "deprecated",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 49
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Use the parameters implied by the `task` property",
            "remarks": "It is not recommended to use this field. The object that is passed in\nthe `task` property will take care of returning the right values for the\n`Parameters` field in the Step Functions definition.\n\nThe various classes that implement `IStepFunctionsTask` will take a\nproperties which make sense for the task type. For example, for\n`InvokeFunction` the field that populates the `parameters` field will be\ncalled `payload`, and for the `PublishToTopic` the `parameters` field\nwill be populated via a combination of the referenced topic, subject and\nmessage.\n\nIf passed anyway, the keys in this map will override the parameters\nreturned by the task object.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "deprecated",
            "summary": "Parameters to invoke the task with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 83
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "deprecated",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 59
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "60",
            "remarks": "If the state takes longer than this amount of time to complete, a 'Timeout' error is raised.",
            "stability": "deprecated",
            "summary": "Maximum run time of this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 92
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/states/task:TaskProps"
    },
    "@aws-cdk/aws-stepfunctions.TaskStateBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Task state causes some work to be executed, represented by the\nTask's resource property. Task constructs represent a generic Amazon\nStates Language Task.\n\nFor some resource types, more specific subclasses of Task may be available\nwhich are more convenient to use.",
        "stability": "stable",
        "summary": "Define a Task state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskStateBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/task-base.ts",
          "line": 116
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskStateBaseProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/task-base.ts",
        "line": 106
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "stable",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 140
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskStateBase"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "stable",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 129
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskStateBase"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Return the given named metric for this Task."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 170
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity fails."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 248
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times the heartbeat times out for this activity."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 257
          },
          "name": "metricHeartbeatTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, between the time the Task starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 185
          },
          "name": "metricRunTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity is scheduled."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 212
          },
          "name": "metricScheduled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, for which the activity stays in the schedule state."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 194
          },
          "name": "metricScheduleTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity is started."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 230
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity succeeds."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 239
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- average over 5 minutes",
            "stability": "stable",
            "summary": "The interval, in milliseconds, between the time the activity is scheduled and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 203
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "- sum over 5 minutes",
            "stability": "stable",
            "summary": "Metric for the number of times this activity times out."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 221
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 148
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 156
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "remarks": "Can be overridden by subclasses.",
            "stability": "stable",
            "summary": "Called whenever this state is bound to a graph."
          },
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 261
          },
          "name": "whenBoundToGraph",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "TaskStateBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 108
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 110
          },
          "name": "taskMetrics",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.TaskMetricsConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 111
          },
          "name": "taskPolicies",
          "optional": true,
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/task-base:TaskStateBase"
    },
    "@aws-cdk/aws-stepfunctions.TaskStateBaseProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Props that are common to all tasks.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const resultSelector: any;\nconst taskStateBaseProps: stepfunctions.TaskStateBaseProps = {\n  comment: 'comment',\n  heartbeat: cdk.Duration.minutes(30),\n  inputPath: 'inputPath',\n  integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  timeout: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskStateBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/task-base.ts",
        "line": 14
      },
      "name": "TaskStateBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 20
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Timeout for the heartbeat."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 80
          },
          "name": "heartbeat",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The entire task input (JSON path '$')",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 30
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `IntegrationPattern.REQUEST_RESPONSE` for most tasks.\n`IntegrationPattern.RUN_JOB` for the following exceptions:\n`BatchSubmitJob`, `EmrAddStep`, `EmrCreateCluster`, `EmrTerminationCluster`, and `EmrContainersStartJobRun`.",
            "remarks": "You can control these AWS services using service integration patterns",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token",
            "stability": "stable",
            "summary": "AWS Step Functions integrates with services directly in the Amazon States Language."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 93
          },
          "name": "integrationPattern",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.IntegrationPattern"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The entire JSON node determined by the state input, the task result,\nand resultPath is passed to the next state (JSON path '$')",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "stable",
            "summary": "JSONPath expression to select select a portion of the state output to pass to the next state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 42
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Replaces the entire input with the result (JSON path '$')",
            "remarks": "May also be the special value JsonPath.DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "stable",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 52
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "remarks": "You can use ResultSelector to create a payload with values that are static\nor selected from the state's raw result.",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector",
            "stability": "stable",
            "summary": "The JSON that will replace the state's raw result and become the effective result before ResultPath is applied."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 66
          },
          "name": "resultSelector",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "stable",
            "summary": "Timeout for the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task-base.ts",
            "line": 73
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/states/task-base:TaskStateBaseProps"
    },
    "@aws-cdk/aws-stepfunctions.Wait": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Wait state can be used to delay execution of the state machine for a while.",
        "stability": "stable",
        "summary": "Define a Wait state in the state machine.",
        "example": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Wait",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/states/wait.ts",
          "line": 76
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 71
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 86
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 94
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Wait",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 72
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/states/wait:Wait"
    },
    "@aws-cdk/aws-stepfunctions.WaitProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for defining a Wait state.",
        "example": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.WaitProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 52
      },
      "name": "WaitProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Wait duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 63
          },
          "name": "time",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "stable",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 58
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/states/wait:WaitProps"
    },
    "@aws-cdk/aws-stepfunctions.WaitTime": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-wait-state.html",
        "stability": "stable",
        "summary": "Represents the Wait state which delays a state machine from continuing for a specified time.",
        "example": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-stepfunctions.WaitTime",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Wait a fixed amount of time."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 16
          },
          "name": "duration",
          "parameters": [
            {
              "name": "duration",
              "type": {
                "fqn": "@aws-cdk/core.Duration"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Example value: `$.waitSeconds`",
            "stability": "stable",
            "summary": "Wait for a number of seconds stored in the state object."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 30
          },
          "name": "secondsPath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Example value: `2016-03-14T01:59:00Z`",
            "stability": "stable",
            "summary": "Wait until the given ISO8601 timestamp."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 23
          },
          "name": "timestamp",
          "parameters": [
            {
              "name": "timestamp",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Example value: `$.waitTimestamp`",
            "stability": "stable",
            "summary": "Wait until a timestamp found in the state object."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 37
          },
          "name": "timestampPath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        }
      ],
      "name": "WaitTime",
      "symbolId": "lib/states/wait:WaitTime"
    }
  },
  "version": "1.199.0",
  "fingerprint": "**********"
}