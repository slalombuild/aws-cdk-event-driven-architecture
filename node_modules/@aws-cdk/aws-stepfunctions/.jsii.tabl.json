{"version":"2","toolVersion":"1.80.0","snippets":{"577bdec320c8a3a322d56a5d88f7487e127d391e8380c5723142f962317f436a":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda: lambda.Function\n# get_status_lambda: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nvar submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nvar waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nvar getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nvar finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar submitLambda function\nvar getStatusLambda function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Submit Job\"), &LambdaInvokeProps{\n\tLambdaFunction: submitLambda,\n\t// Lambda's result is in the attribute `Payload`\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\nwaitX := sfn.NewWait(this, jsii.String(\"Wait X Seconds\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\ngetStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Pass just the field named \"guid\" into the Lambda, put the\n\t// Lambda's result in a field called \"status\" in the response\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\njobFailed := sfn.NewFail(this, jsii.String(\"Job Failed\"), &FailProps{\n\tCause: jsii.String(\"AWS Batch Job Failed\"),\n\tError: jsii.String(\"DescribeJob returned FAILED\"),\n})\n\nfinalStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Final Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Use \"guid\" field as input\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\ndefinition := submitJob.Next(waitX).Next(getStatus).Next(sfn.NewChoice(this, jsii.String(\"Job Complete?\")).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"FAILED\")), jobFailed).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCEEDED\")), finalStatus).Otherwise(waitX))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n\tTimeout: awscdkcore.Duration_Minutes(jsii.Number(5)),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":24}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":20,"75":66,"104":7,"130":2,"153":2,"169":2,"193":6,"194":20,"196":10,"197":7,"225":8,"226":1,"242":8,"243":8,"254":1,"255":1,"256":1,"281":12,"282":1,"290":1},"fqnsFingerprint":"4c944ffb8763696561bf43d08c0cccdf86dc10b6bee146083ee98d15a382f58d"},"9cb6551a2b8426d67862b9b808b399cc5e3a130d46af870d901b6c4fce3dcd1e":{"translations":{"python":{"source":"start_state = sfn.Pass(self, \"StartState\")\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=start_state\n)","version":"2"},"csharp":{"source":"var startState = new Pass(this, \"StartState\");\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = startState\n});","version":"1"},"java":{"source":"Pass startState = new Pass(this, \"StartState\");\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(startState)\n        .build();","version":"1"},"go":{"source":"startState := sfn.NewPass(this, jsii.String(\"StartState\"))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: startState,\n})","version":"1"},"$":{"source":"const startState = new sfn.Pass(this, 'StartState');\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: startState,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":84}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst startState = new sfn.Pass(this, 'StartState');\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: startState,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":7,"104":2,"193":1,"194":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":1},"fqnsFingerprint":"7e8b80b099693f2da92275c5b323b2e497aa54c94e1e5c3d56505ab36b694ce2"},"5867bdf1c5420de53f2317a4ff8683e5dc55371932a164fc401072b2a2a8ff2b":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# order_fn: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"InvokeOrderProcessor\",\n    lambda_function=order_fn,\n    payload=sfn.TaskInput.from_object({\n        \"OrderId\": sfn.JsonPath.string_at(\"$.OrderId\")\n    })\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction orderFn;\n\n\nvar submitJob = new LambdaInvoke(this, \"InvokeOrderProcessor\", new LambdaInvokeProps {\n    LambdaFunction = orderFn,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"OrderId\", JsonPath.StringAt(\"$.OrderId\") }\n    })\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction orderFn;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"InvokeOrderProcessor\")\n        .lambdaFunction(orderFn)\n        .payload(TaskInput.fromObject(Map.of(\n                \"OrderId\", JsonPath.stringAt(\"$.OrderId\"))))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar orderFn function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"InvokeOrderProcessor\"), &LambdaInvokeProps{\n\tLambdaFunction: orderFn,\n\tPayload: sfn.TaskInput_FromObject(map[string]interface{}{\n\t\t\"OrderId\": sfn.JsonPath_stringAt(jsii.String(\"$.OrderId\")),\n\t}),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":110}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromObject","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const orderFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'InvokeOrderProcessor', {\n  lambdaFunction: orderFn,\n  payload: sfn.TaskInput.fromObject({\n    OrderId: sfn.JsonPath.stringAt('$.OrderId'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":17,"104":1,"130":1,"153":1,"169":1,"193":2,"194":5,"196":2,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"9c45feeb4e2973abd31cfebd2d4aad9b08421a9990f442c42c4fd4f147fcfaa3"},"e87f7a657b5eb5b10b15af94d88b8f3429754c9ce708ecdc7e5ac9f0fc670227":{"translations":{"python":{"source":"# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)","version":"2"},"csharp":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nvar pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nvar nextState = new Pass(this, \"NextState\");\npass.Next(nextState);","version":"1"},"java":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);","version":"1"},"go":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass := sfn.NewPass(this, jsii.String(\"Add Hello World\"), &PassProps{\n\tResult: sfn.Result_FromObject(map[string]interface{}{\n\t\t\"hello\": jsii.String(\"world\"),\n\t}),\n\tResultPath: jsii.String(\"$.subObject\"),\n})\n\n// Set the next state\nnextState := sfn.NewPass(this, jsii.String(\"NextState\"))\npass.Next(nextState)","version":"1"},"$":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":182}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.Pass#next","@aws-cdk/aws-stepfunctions.PassProps","@aws-cdk/aws-stepfunctions.Result","@aws-cdk/aws-stepfunctions.Result#fromObject","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":15,"104":2,"193":2,"194":5,"196":2,"197":2,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"fefe753be48ea9a6ceb980d76e9d101aa0685ab95970e02ae59c85e028f94bcb"},"37e2379648ce7d30cdbc285d34b8989ee11fd82706d274020b03fc3374104c84":{"translations":{"python":{"source":"pass = sfn.Pass(self, \"Filter input and inject data\",\n    parameters={ # input to the pass state\n        \"input\": sfn.JsonPath.string_at(\"$.input.greeting\"),\n        \"other_data\": \"some-extra-stuff\"}\n)","version":"2"},"csharp":{"source":"var pass = new Pass(this, \"Filter input and inject data\", new PassProps {\n    Parameters = new Dictionary<string, object> {  // input to the pass state\n        { \"input\", JsonPath.StringAt(\"$.input.greeting\") },\n        { \"otherData\", \"some-extra-stuff\" } }\n});","version":"1"},"java":{"source":"Pass pass = Pass.Builder.create(this, \"Filter input and inject data\")\n        .parameters(Map.of( // input to the pass state\n                \"input\", JsonPath.stringAt(\"$.input.greeting\"),\n                \"otherData\", \"some-extra-stuff\"))\n        .build();","version":"1"},"go":{"source":"pass := sfn.NewPass(this, jsii.String(\"Filter input and inject data\"), &PassProps{\n\tParameters: map[string]interface{}{\n\t\t // input to the pass state\n\t\t\"input\": sfn.JsonPath_stringAt(jsii.String(\"$.input.greeting\")),\n\t\t\"otherData\": jsii.String(\"some-extra-stuff\"),\n\t},\n})","version":"1"},"$":{"source":"const pass = new sfn.Pass(this, 'Filter input and inject data', {\n  parameters: { // input to the pass state\n    input: sfn.JsonPath.stringAt('$.input.greeting'),\n    otherData: 'some-extra-stuff',\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":200}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.PassProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pass = new sfn.Pass(this, 'Filter input and inject data', {\n  parameters: { // input to the pass state\n    input: sfn.JsonPath.stringAt('$.input.greeting'),\n    otherData: 'some-extra-stuff',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":9,"104":1,"193":2,"194":3,"196":1,"197":1,"225":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"49ac5a93123343e7729f55a35daec516d48be07ed6ebabbc299ced936fb728ba"},"b632aad2d209a7dc2e4219e160dde825f4245addd25135ef9305a2066ae2b918":{"translations":{"python":{"source":"# Wait until it's the time mentioned in the the state object's \"triggerTime\"\n# field.\nwait = sfn.Wait(self, \"Wait For Trigger Time\",\n    time=sfn.WaitTime.timestamp_path(\"$.triggerTime\")\n)\n\n# Set the next state\nstart_the_work = sfn.Pass(self, \"StartTheWork\")\nwait.next(start_the_work)","version":"2"},"csharp":{"source":"// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nvar wait = new Wait(this, \"Wait For Trigger Time\", new WaitProps {\n    Time = WaitTime.TimestampPath(\"$.triggerTime\")\n});\n\n// Set the next state\nvar startTheWork = new Pass(this, \"StartTheWork\");\nwait.Next(startTheWork);","version":"1"},"java":{"source":"// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nWait wait = Wait.Builder.create(this, \"Wait For Trigger Time\")\n        .time(WaitTime.timestampPath(\"$.triggerTime\"))\n        .build();\n\n// Set the next state\nPass startTheWork = new Pass(this, \"StartTheWork\");\nwait.next(startTheWork);","version":"1"},"go":{"source":"// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nwait := sfn.NewWait(this, jsii.String(\"Wait For Trigger Time\"), &WaitProps{\n\tTime: sfn.WaitTime_TimestampPath(jsii.String(\"$.triggerTime\")),\n})\n\n// Set the next state\nstartTheWork := sfn.NewPass(this, jsii.String(\"StartTheWork\"))\nwait.Next(startTheWork)","version":"1"},"$":{"source":"// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new sfn.Wait(this, 'Wait For Trigger Time', {\n  time: sfn.WaitTime.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nconst startTheWork = new sfn.Pass(this, 'StartTheWork');\nwait.next(startTheWork);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":221}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.Wait#next","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#timestampPath","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new sfn.Wait(this, 'Wait For Trigger Time', {\n  time: sfn.WaitTime.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nconst startTheWork = new sfn.Pass(this, 'StartTheWork');\nwait.next(startTheWork);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":13,"104":2,"193":1,"194":5,"196":2,"197":2,"225":2,"226":1,"242":2,"243":2,"281":1},"fqnsFingerprint":"8ccb0fd953bf5c18845e35881c9a1795eef91ba9d79dcafd20d575afbba2fa50"},"edb39355fd59307ad883d3104a4b8d5b82efb9b97c11257677a7fb9c6a18f612":{"translations":{"python":{"source":"choice = sfn.Choice(self, \"Did it work?\")\n\n# Add conditions with .when()\nsuccess_state = sfn.Pass(self, \"SuccessState\")\nfailure_state = sfn.Pass(self, \"FailureState\")\nchoice.when(sfn.Condition.string_equals(\"$.status\", \"SUCCESS\"), success_state)\nchoice.when(sfn.Condition.number_greater_than(\"$.attempts\", 5), failure_state)\n\n# Use .otherwise() to indicate what should be done if none of the conditions match\ntry_again_state = sfn.Pass(self, \"TryAgainState\")\nchoice.otherwise(try_again_state)","version":"2"},"csharp":{"source":"var choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nvar successState = new Pass(this, \"SuccessState\");\nvar failureState = new Pass(this, \"FailureState\");\nchoice.When(Condition.StringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.When(Condition.NumberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nvar tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.Otherwise(tryAgainState);","version":"1"},"java":{"source":"Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.when(Condition.stringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.when(Condition.numberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.otherwise(tryAgainState);","version":"1"},"go":{"source":"choice := sfn.NewChoice(this, jsii.String(\"Did it work?\"))\n\n// Add conditions with .when()\nsuccessState := sfn.NewPass(this, jsii.String(\"SuccessState\"))\nfailureState := sfn.NewPass(this, jsii.String(\"FailureState\"))\nchoice.When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCESS\")), successState)\nchoice.When(sfn.Condition_NumberGreaterThan(jsii.String(\"$.attempts\"), jsii.Number(5)), failureState)\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\ntryAgainState := sfn.NewPass(this, jsii.String(\"TryAgainState\"))\nchoice.Otherwise(tryAgainState)","version":"1"},"$":{"source":"const choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":238}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#numberGreaterThan","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":7,"75":27,"104":4,"194":11,"196":5,"197":4,"225":4,"226":3,"242":4,"243":4},"fqnsFingerprint":"19490659feb5886418f427bc51f475d6436694fbdcfb6a868ddfe8f494c77e94"},"6c98755426e04957e95b780f975e021952ce7c0bb770008a6caa5de9179b89e2":{"translations":{"python":{"source":"choice = sfn.Choice(self, \"What color is it?\")\nhandle_blue_item = sfn.Pass(self, \"HandleBlueItem\")\nhandle_red_item = sfn.Pass(self, \"HandleRedItem\")\nhandle_other_item_color = sfn.Pass(self, \"HanldeOtherItemColor\")\nchoice.when(sfn.Condition.string_equals(\"$.color\", \"BLUE\"), handle_blue_item)\nchoice.when(sfn.Condition.string_equals(\"$.color\", \"RED\"), handle_red_item)\nchoice.otherwise(handle_other_item_color)\n\n# Use .afterwards() to join all possible paths back together and continue\nship_the_item = sfn.Pass(self, \"ShipTheItem\")\nchoice.afterwards().next(ship_the_item)","version":"2"},"csharp":{"source":"var choice = new Choice(this, \"What color is it?\");\nvar handleBlueItem = new Pass(this, \"HandleBlueItem\");\nvar handleRedItem = new Pass(this, \"HandleRedItem\");\nvar handleOtherItemColor = new Pass(this, \"HanldeOtherItemColor\");\nchoice.When(Condition.StringEquals(\"$.color\", \"BLUE\"), handleBlueItem);\nchoice.When(Condition.StringEquals(\"$.color\", \"RED\"), handleRedItem);\nchoice.Otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nvar shipTheItem = new Pass(this, \"ShipTheItem\");\nchoice.Afterwards().Next(shipTheItem);","version":"1"},"java":{"source":"Choice choice = new Choice(this, \"What color is it?\");\nPass handleBlueItem = new Pass(this, \"HandleBlueItem\");\nPass handleRedItem = new Pass(this, \"HandleRedItem\");\nPass handleOtherItemColor = new Pass(this, \"HanldeOtherItemColor\");\nchoice.when(Condition.stringEquals(\"$.color\", \"BLUE\"), handleBlueItem);\nchoice.when(Condition.stringEquals(\"$.color\", \"RED\"), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nPass shipTheItem = new Pass(this, \"ShipTheItem\");\nchoice.afterwards().next(shipTheItem);","version":"1"},"go":{"source":"choice := sfn.NewChoice(this, jsii.String(\"What color is it?\"))\nhandleBlueItem := sfn.NewPass(this, jsii.String(\"HandleBlueItem\"))\nhandleRedItem := sfn.NewPass(this, jsii.String(\"HandleRedItem\"))\nhandleOtherItemColor := sfn.NewPass(this, jsii.String(\"HanldeOtherItemColor\"))\nchoice.When(sfn.Condition_StringEquals(jsii.String(\"$.color\"), jsii.String(\"BLUE\")), handleBlueItem)\nchoice.When(sfn.Condition_StringEquals(jsii.String(\"$.color\"), jsii.String(\"RED\")), handleRedItem)\nchoice.Otherwise(handleOtherItemColor)\n\n// Use .afterwards() to join all possible paths back together and continue\nshipTheItem := sfn.NewPass(this, jsii.String(\"ShipTheItem\"))\nchoice.Afterwards().Next(shipTheItem)","version":"1"},"$":{"source":"const choice = new sfn.Choice(this, 'What color is it?');\nconst handleBlueItem = new sfn.Pass(this, 'HandleBlueItem');\nconst handleRedItem = new sfn.Pass(this, 'HandleRedItem');\nconst handleOtherItemColor = new sfn.Pass(this, 'HanldeOtherItemColor');\nchoice.when(sfn.Condition.stringEquals('$.color', 'BLUE'), handleBlueItem);\nchoice.when(sfn.Condition.stringEquals('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nconst shipTheItem = new sfn.Pass(this, 'ShipTheItem');\nchoice.afterwards().next(shipTheItem);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":256}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#afterwards","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'What color is it?');\nconst handleBlueItem = new sfn.Pass(this, 'HandleBlueItem');\nconst handleRedItem = new sfn.Pass(this, 'HandleRedItem');\nconst handleOtherItemColor = new sfn.Pass(this, 'HanldeOtherItemColor');\nchoice.when(sfn.Condition.stringEquals('$.color', 'BLUE'), handleBlueItem);\nchoice.when(sfn.Condition.stringEquals('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nconst shipTheItem = new sfn.Pass(this, 'ShipTheItem');\nchoice.afterwards().next(shipTheItem);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":9,"75":34,"104":5,"194":14,"196":7,"197":5,"225":5,"226":4,"242":5,"243":5},"fqnsFingerprint":"dda872954e1bbde2208cda4362877130b4575122c1ddaae1999fc25141782a81"},"539fb875fec880ad97bd950295c2d8062c4a64b0ef1162a7ea60f9fa07e0b3f5":{"translations":{"python":{"source":"parallel = sfn.Parallel(self, \"Do the work in parallel\")\n\n# Add branches to be executed in parallel\nship_item = sfn.Pass(self, \"ShipItem\")\nsend_invoice = sfn.Pass(self, \"SendInvoice\")\nrestock = sfn.Pass(self, \"Restock\")\nparallel.branch(ship_item)\nparallel.branch(send_invoice)\nparallel.branch(restock)\n\n# Retry the whole workflow if something goes wrong\nparallel.add_retry(max_attempts=1)\n\n# How to recover from errors\nsend_failure_notification = sfn.Pass(self, \"SendFailureNotification\")\nparallel.add_catch(send_failure_notification)\n\n# What to do in case everything succeeded\nclose_order = sfn.Pass(self, \"CloseOrder\")\nparallel.next(close_order)","version":"2"},"csharp":{"source":"var parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nvar shipItem = new Pass(this, \"ShipItem\");\nvar sendInvoice = new Pass(this, \"SendInvoice\");\nvar restock = new Pass(this, \"Restock\");\nparallel.Branch(shipItem);\nparallel.Branch(sendInvoice);\nparallel.Branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(new RetryProps { MaxAttempts = 1 });\n\n// How to recover from errors\nvar sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.AddCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nvar closeOrder = new Pass(this, \"CloseOrder\");\nparallel.Next(closeOrder);","version":"1"},"java":{"source":"Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry(RetryProps.builder().maxAttempts(1).build());\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.next(closeOrder);","version":"1"},"go":{"source":"parallel := sfn.NewParallel(this, jsii.String(\"Do the work in parallel\"))\n\n// Add branches to be executed in parallel\nshipItem := sfn.NewPass(this, jsii.String(\"ShipItem\"))\nsendInvoice := sfn.NewPass(this, jsii.String(\"SendInvoice\"))\nrestock := sfn.NewPass(this, jsii.String(\"Restock\"))\nparallel.Branch(shipItem)\nparallel.Branch(sendInvoice)\nparallel.Branch(restock)\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(&RetryProps{\n\tMaxAttempts: jsii.Number(1),\n})\n\n// How to recover from errors\nsendFailureNotification := sfn.NewPass(this, jsii.String(\"SendFailureNotification\"))\nparallel.AddCatch(sendFailureNotification)\n\n// What to do in case everything succeeded\ncloseOrder := sfn.NewPass(this, jsii.String(\"CloseOrder\"))\nparallel.Next(closeOrder)","version":"1"},"$":{"source":"const parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":329}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#addCatch","@aws-cdk/aws-stepfunctions.Parallel#addRetry","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Parallel#next","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.RetryProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":6,"75":36,"104":6,"193":1,"194":12,"196":6,"197":6,"225":6,"226":6,"242":6,"243":6,"281":1},"fqnsFingerprint":"e5a09036ef8d25dad5b8e44710a4ee8981e3d59ca68dfd10c8c8c70d3b400b61"},"81c406035046d5ac40336ddc8b37fca432cfbff63d3b7cc0be68a000a4215730":{"translations":{"python":{"source":"success = sfn.Succeed(self, \"We did it!\")","version":"2"},"csharp":{"source":"var success = new Succeed(this, \"We did it!\");","version":"1"},"java":{"source":"Succeed success = new Succeed(this, \"We did it!\");","version":"1"},"go":{"source":"success := sfn.NewSucceed(this, jsii.String(\"We did it!\"))","version":"1"},"$":{"source":"const success = new sfn.Succeed(this, 'We did it!');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":357}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Succeed","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Succeed(this, 'We did it!');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":3,"104":1,"194":1,"197":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"1217a8491ecc638e35af95f19c5761ed554608a64e41ab6703d0c2330e0615e6"},"67ecfd2548d04d4ed64f2662e3060b7971f078713dbe5fcb423e3512960b8ab1":{"translations":{"python":{"source":"success = sfn.Fail(self, \"Fail\",\n    error=\"WorkflowFailure\",\n    cause=\"Something went wrong\"\n)","version":"2"},"csharp":{"source":"var success = new Fail(this, \"Fail\", new FailProps {\n    Error = \"WorkflowFailure\",\n    Cause = \"Something went wrong\"\n});","version":"1"},"java":{"source":"Fail success = Fail.Builder.create(this, \"Fail\")\n        .error(\"WorkflowFailure\")\n        .cause(\"Something went wrong\")\n        .build();","version":"1"},"go":{"source":"success := sfn.NewFail(this, jsii.String(\"Fail\"), &FailProps{\n\tError: jsii.String(\"WorkflowFailure\"),\n\tCause: jsii.String(\"Something went wrong\"),\n})","version":"1"},"$":{"source":"const success = new sfn.Fail(this, 'Fail', {\n  error: 'WorkflowFailure',\n  cause: \"Something went wrong\",\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":367}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Fail(this, 'Fail', {\n  error: 'WorkflowFailure',\n  cause: \"Something went wrong\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":5,"104":1,"193":1,"194":1,"197":1,"225":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"7032c276bb1929290f28172c277984c86cb488240f1380b2ad08dbd5aa7f6769"},"248585e2c7a8491b43baded5a981d92d0855be249d4df91f5369ee241da81ae0":{"translations":{"python":{"source":"map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))","version":"2"},"csharp":{"source":"var map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));","version":"1"},"java":{"source":"Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));","version":"1"},"go":{"source":"map := sfn.NewMap(this, jsii.String(\"Map State\"), &MapProps{\n\tMaxConcurrency: jsii.Number(1),\n\tItemsPath: sfn.JsonPath_StringAt(jsii.String(\"$.inputForMap\")),\n})\nmap.Iterator(sfn.NewPass(this, jsii.String(\"Pass State\")))","version":"1"},"$":{"source":"const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":382}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.Map","@aws-cdk/aws-stepfunctions.Map#iterator","@aws-cdk/aws-stepfunctions.MapProps","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":12,"104":2,"193":1,"194":5,"196":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"4764bcac4b64fa3599299862edb4c2258e3bb0b44f93a80f00674bcea4357f08"},"f1a7fd25a6bda8d8dbb0f5a0272c5df1c9d748944a81afeefc63422bb4b13f7d":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nvar table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nvar finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nvar custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nvar chain = Chain.Start(custom).Next(finalStatus);\n\nvar sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\n\n\n// create a table\ntable := dynamodb.NewTable(this, jsii.String(\"montable\"), &TableProps{\n\tPartitionKey: &Attribute{\n\t\tName: jsii.String(\"id\"),\n\t\tType: dynamodb.AttributeType_STRING,\n\t},\n})\n\nfinalStatus := sfn.NewPass(this, jsii.String(\"final step\"))\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstateJson := map[string]interface{}{\n\t\"Type\": jsii.String(\"Task\"),\n\t\"Resource\": jsii.String(\"arn:aws:states:::dynamodb:putItem\"),\n\t\"Parameters\": map[string]interface{}{\n\t\t\"TableName\": table.tableName,\n\t\t\"Item\": map[string]map[string]*string{\n\t\t\t\"id\": map[string]*string{\n\t\t\t\t\"S\": jsii.String(\"MyEntry\"),\n\t\t\t},\n\t\t},\n\t},\n\t\"ResultPath\": nil,\n}\n\n// custom state which represents a task to insert data into DynamoDB\ncustom := sfn.NewCustomState(this, jsii.String(\"my custom task\"), &CustomStateProps{\n\tStateJson: StateJson,\n})\n\nchain := sfn.Chain_Start(custom).Next(finalStatus)\n\nsm := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: chain,\n\tTimeout: awscdkcore.Duration_Seconds(jsii.Number(30)),\n})\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm)","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":412}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.Attribute","@aws-cdk/aws-dynamodb.AttributeType","@aws-cdk/aws-dynamodb.AttributeType#STRING","@aws-cdk/aws-dynamodb.Table","@aws-cdk/aws-dynamodb.Table#tableName","@aws-cdk/aws-dynamodb.TableProps","@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.CustomState","@aws-cdk/aws-stepfunctions.CustomStateProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#seconds","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":9,"75":46,"100":1,"104":4,"193":8,"194":12,"196":4,"197":4,"225":6,"226":1,"242":6,"243":6,"254":1,"255":1,"256":1,"281":13,"282":1,"290":1},"fqnsFingerprint":"269f6078fc1689b57b6fb8ff4e7e4348a4854e0d709b4112fd2ccff74a68b6d9"},"8b97703ad211b924488633c3a7b94b0640736a76312e2bd46f9c77f00af7a67b":{"translations":{"python":{"source":"step1 = sfn.Pass(self, \"Step1\")\nstep2 = sfn.Pass(self, \"Step2\")\nstep3 = sfn.Pass(self, \"Step3\")\nstep4 = sfn.Pass(self, \"Step4\")\nstep5 = sfn.Pass(self, \"Step5\")\nstep6 = sfn.Pass(self, \"Step6\")\nstep7 = sfn.Pass(self, \"Step7\")\nstep8 = sfn.Pass(self, \"Step8\")\nstep9 = sfn.Pass(self, \"Step9\")\nstep10 = sfn.Pass(self, \"Step10\")\nchoice = sfn.Choice(self, \"Choice\")\ncondition1 = sfn.Condition.string_equals(\"$.status\", \"SUCCESS\")\nparallel = sfn.Parallel(self, \"Parallel\")\nfinish = sfn.Pass(self, \"Finish\")\n\ndefinition = step1.next(step2).next(choice.when(condition1, step3.next(step4).next(step5)).otherwise(step6).afterwards()).next(parallel.branch(step7.next(step8)).branch(step9.next(step10))).next(finish)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)","version":"2"},"csharp":{"source":"var step1 = new Pass(this, \"Step1\");\nvar step2 = new Pass(this, \"Step2\");\nvar step3 = new Pass(this, \"Step3\");\nvar step4 = new Pass(this, \"Step4\");\nvar step5 = new Pass(this, \"Step5\");\nvar step6 = new Pass(this, \"Step6\");\nvar step7 = new Pass(this, \"Step7\");\nvar step8 = new Pass(this, \"Step8\");\nvar step9 = new Pass(this, \"Step9\");\nvar step10 = new Pass(this, \"Step10\");\nvar choice = new Choice(this, \"Choice\");\nvar condition1 = Condition.StringEquals(\"$.status\", \"SUCCESS\");\nvar parallel = new Parallel(this, \"Parallel\");\nvar finish = new Pass(this, \"Finish\");\n\nvar definition = step1.Next(step2).Next(choice.When(condition1, step3.Next(step4).Next(step5)).Otherwise(step6).Afterwards()).Next(parallel.Branch(step7.Next(step8)).Branch(step9.Next(step10))).Next(finish);\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});","version":"1"},"java":{"source":"Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\nPass step4 = new Pass(this, \"Step4\");\nPass step5 = new Pass(this, \"Step5\");\nPass step6 = new Pass(this, \"Step6\");\nPass step7 = new Pass(this, \"Step7\");\nPass step8 = new Pass(this, \"Step8\");\nPass step9 = new Pass(this, \"Step9\");\nPass step10 = new Pass(this, \"Step10\");\nChoice choice = new Choice(this, \"Choice\");\nCondition condition1 = Condition.stringEquals(\"$.status\", \"SUCCESS\");\nParallel parallel = new Parallel(this, \"Parallel\");\nPass finish = new Pass(this, \"Finish\");\n\nChain definition = step1.next(step2).next(choice.when(condition1, step3.next(step4).next(step5)).otherwise(step6).afterwards()).next(parallel.branch(step7.next(step8)).branch(step9.next(step10))).next(finish);\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();","version":"1"},"go":{"source":"step1 := sfn.NewPass(this, jsii.String(\"Step1\"))\nstep2 := sfn.NewPass(this, jsii.String(\"Step2\"))\nstep3 := sfn.NewPass(this, jsii.String(\"Step3\"))\nstep4 := sfn.NewPass(this, jsii.String(\"Step4\"))\nstep5 := sfn.NewPass(this, jsii.String(\"Step5\"))\nstep6 := sfn.NewPass(this, jsii.String(\"Step6\"))\nstep7 := sfn.NewPass(this, jsii.String(\"Step7\"))\nstep8 := sfn.NewPass(this, jsii.String(\"Step8\"))\nstep9 := sfn.NewPass(this, jsii.String(\"Step9\"))\nstep10 := sfn.NewPass(this, jsii.String(\"Step10\"))\nchoice := sfn.NewChoice(this, jsii.String(\"Choice\"))\ncondition1 := sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCESS\"))\nparallel := sfn.NewParallel(this, jsii.String(\"Parallel\"))\nfinish := sfn.NewPass(this, jsii.String(\"Finish\"))\n\ndefinition := step1.Next(step2).Next(choice.When(condition1, step3.Next(step4).Next(step5)).Otherwise(step6).Afterwards()).Next(parallel.Branch(step7.Next(step8)).Branch(step9.Next(step10))).Next(finish)\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})","version":"1"},"$":{"source":"const step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\nconst step4 = new sfn.Pass(this, 'Step4');\nconst step5 = new sfn.Pass(this, 'Step5');\nconst step6 = new sfn.Pass(this, 'Step6');\nconst step7 = new sfn.Pass(this, 'Step7');\nconst step8 = new sfn.Pass(this, 'Step8');\nconst step9 = new sfn.Pass(this, 'Step9');\nconst step10 = new sfn.Pass(this, 'Step10');\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.status', 'SUCCESS');\nconst parallel = new sfn.Parallel(this, 'Parallel');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = step1\n  .next(step2)\n  .next(choice\n    .when(condition1, step3.next(step4).next(step5))\n    .otherwise(step6)\n    .afterwards())\n  .next(parallel\n    .branch(step7.next(step8))\n    .branch(step9.next(step10)))\n  .next(finish);\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":466}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#afterwards","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.Pass#next","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\nconst step4 = new sfn.Pass(this, 'Step4');\nconst step5 = new sfn.Pass(this, 'Step5');\nconst step6 = new sfn.Pass(this, 'Step6');\nconst step7 = new sfn.Pass(this, 'Step7');\nconst step8 = new sfn.Pass(this, 'Step8');\nconst step9 = new sfn.Pass(this, 'Step9');\nconst step10 = new sfn.Pass(this, 'Step10');\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.status', 'SUCCESS');\nconst parallel = new sfn.Parallel(this, 'Parallel');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = step1\n  .next(step2)\n  .next(choice\n    .when(condition1, step3.next(step4).next(step5))\n    .otherwise(step6)\n    .afterwards())\n  .next(parallel\n    .branch(step7.next(step8))\n    .branch(step9.next(step10)))\n  .next(finish);\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":16,"75":74,"104":14,"193":1,"194":29,"196":14,"197":14,"225":15,"226":1,"242":15,"243":15,"282":1},"fqnsFingerprint":"3585d8c7b468a1ec97c5b49fb79673100fcec480456ccb2145a9a6823c565bcd"},"4f94de47e0e561df30ac2856dc47575b70078fe7640fa3da0123163f78d4ce74":{"translations":{"python":{"source":"step1 = sfn.Pass(self, \"Step1\")\nstep2 = sfn.Pass(self, \"Step2\")\nstep3 = sfn.Pass(self, \"Step3\")\n\ndefinition = sfn.Chain.start(step1).next(step2).next(step3)","version":"2"},"csharp":{"source":"var step1 = new Pass(this, \"Step1\");\nvar step2 = new Pass(this, \"Step2\");\nvar step3 = new Pass(this, \"Step3\");\n\nvar definition = Chain.Start(step1).Next(step2).Next(step3);","version":"1"},"java":{"source":"Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\n\nChain definition = Chain.start(step1).next(step2).next(step3);","version":"1"},"go":{"source":"step1 := sfn.NewPass(this, jsii.String(\"Step1\"))\nstep2 := sfn.NewPass(this, jsii.String(\"Step2\"))\nstep3 := sfn.NewPass(this, jsii.String(\"Step3\"))\n\ndefinition := sfn.Chain_Start(step1).Next(step2).Next(step3)","version":"1"},"$":{"source":"const step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\n\nconst definition = sfn.Chain\n  .start(step1)\n  .next(step2)\n  .next(step3)\n  // ...","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":501}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\n\nconst definition = sfn.Chain\n  .start(step1)\n  .next(step2)\n  .next(step3)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":18,"104":3,"194":7,"196":3,"197":3,"225":4,"242":4,"243":4},"fqnsFingerprint":"6ddc195909501ae44a2995c494d361acdca196a1bae455fcee8f3272e66a2f32"},"e5099e7a54221558d0b09986468b0f603e2b9a3f66906c41690d20d4c2c7f783":{"translations":{"python":{"source":"from aws_cdk.core import Stack\nfrom constructs import Construct\nimport aws_cdk.aws_stepfunctions as sfn\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        parallel = sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())\n\n        sfn.StateMachine(self, \"MyStateMachine\",\n            definition=parallel\n        )","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.StepFunctions;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        var choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        var parallel = new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n\n        new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n            Definition = parallel\n        });\n    }\n}","version":"1"},"java":{"source":"import software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        Parallel parallel = new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n\n        StateMachine.Builder.create(this, \"MyStateMachine\")\n                .definition(parallel)\n                .build();\n    }\n}","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\nimport \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntype myJobProps struct {\n\tjobFlavor *string\n}\n\ntype myJob struct {\n\tstateMachineFragment\n\tstartState state\n\tendStates []iNextable\n}\n\nfunc newMyJob(parent construct, id *string, props myJobProps) *myJob {\n\tthis := &myJob{}\n\tsfn.NewStateMachineFragment_Override(this, parent, id)\n\n\tchoice := sfn.NewChoice(this, jsii.String(\"Choice\")).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"left\")), sfn.NewPass(this, jsii.String(\"Left Branch\"))).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"right\")), sfn.NewPass(this, jsii.String(\"Right Branch\")))\n\n\t// ...\n\n\tthis.startState = choice\n\tthis.endStates = choice.Afterwards().EndStates\n\treturn this\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tnewStack_Override(this, scope, id)\n\t// Do 3 different variants of MyJob in parallel\n\tparallel := sfn.NewParallel(this, jsii.String(\"All jobs\")).Branch(NewMyJob(this, jsii.String(\"Quick\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"quick\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Medium\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"medium\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Slow\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"slow\"),\n\t}).PrefixStates())\n\n\tsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\t\tDefinition: parallel,\n\t})\n\treturn this\n}","version":"1"},"$":{"source":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":532}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain#endStates","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#afterwards","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineFragment","@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","syntaxKindCounter":{"10":18,"62":2,"75":68,"102":2,"104":10,"119":2,"138":2,"143":3,"153":2,"156":5,"158":1,"159":2,"162":2,"169":5,"174":1,"193":4,"194":22,"196":13,"197":8,"209":2,"216":2,"223":2,"225":2,"226":5,"242":2,"243":2,"245":2,"246":1,"254":3,"255":3,"256":1,"257":2,"258":2,"279":2,"281":4,"290":1},"fqnsFingerprint":"7d47d38fc9f46e1dc27acfc8017f8baa78f65505c802c9c2035781fd7376bdb2"},"b935d978138e9a99fb6a73b910ade83dd33bd6e7d9aea06fffc647fa8a372dfa":{"translations":{"python":{"source":"activity = sfn.Activity(self, \"Activity\")\n\n# Read this CloudFormation Output from your application and use it to poll for work on\n# the activity.\nCfnOutput(self, \"ActivityArn\", value=activity.activity_arn)","version":"2"},"csharp":{"source":"var activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, \"ActivityArn\", new CfnOutputProps { Value = activity.ActivityArn });","version":"1"},"java":{"source":"Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nCfnOutput.Builder.create(this, \"ActivityArn\").value(activity.getActivityArn()).build();","version":"1"},"go":{"source":"activity := sfn.NewActivity(this, jsii.String(\"Activity\"))\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nawscdkcore.NewCfnOutput(this, jsii.String(\"ActivityArn\"), &CfnOutputProps{\n\tValue: activity.ActivityArn,\n})","version":"1"},"$":{"source":"const activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":590}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Activity","@aws-cdk/aws-stepfunctions.Activity#activityArn","@aws-cdk/core.CfnOutput","@aws-cdk/core.CfnOutputProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":7,"104":2,"193":1,"194":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":1},"fqnsFingerprint":"9301f901967be05921ec545c6d9ac2fb842fd347430c2d9870f30ff472b10dcc"},"f7e11e96e15862db03b4aee794e84c4c382a0b9f775e9a08a4a78271b530a49c":{"translations":{"python":{"source":"activity = sfn.Activity(self, \"Activity\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\nactivity.grant(role, \"states:SendTaskSuccess\")","version":"2"},"csharp":{"source":"var activity = new Activity(this, \"Activity\");\n\nvar role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\nactivity.Grant(role, \"states:SendTaskSuccess\");","version":"1"},"java":{"source":"Activity activity = new Activity(this, \"Activity\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\nactivity.grant(role, \"states:SendTaskSuccess\");","version":"1"},"go":{"source":"activity := sfn.NewActivity(this, jsii.String(\"Activity\"))\n\nrole := iam.NewRole(this, jsii.String(\"Role\"), &RoleProps{\n\tAssumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\n\nactivity.Grant(role, jsii.String(\"states:SendTaskSuccess\"))","version":"1"},"$":{"source":"const activity = new sfn.Activity(this, 'Activity');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\nactivity.grant(role, 'states:SendTaskSuccess');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":602}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.IPrincipal","@aws-cdk/aws-iam.Role","@aws-cdk/aws-iam.RoleProps","@aws-cdk/aws-iam.ServicePrincipal","@aws-cdk/aws-stepfunctions.Activity","@aws-cdk/aws-stepfunctions.Activity#grant","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\nactivity.grant(role, 'states:SendTaskSuccess');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":12,"104":2,"193":1,"194":4,"196":1,"197":3,"225":2,"226":1,"242":2,"243":2,"281":1},"fqnsFingerprint":"95207c145333cfad8eafcd13ae69d885ba401924ba7d9b00b965482074b5bb33"},"d97a84fa1cdb61ea017948bb1d7b915732e4702365f1a8f3f98d7040429806b4":{"translations":{"python":{"source":"# task: sfn.Task\n\ncloudwatch.Alarm(self, \"TaskAlarm\",\n    metric=task.metric_failed(),\n    threshold=1,\n    evaluation_periods=1\n)","version":"2"},"csharp":{"source":"Task task;\n\nnew Alarm(this, \"TaskAlarm\", new AlarmProps {\n    Metric = task.MetricFailed(),\n    Threshold = 1,\n    EvaluationPeriods = 1\n});","version":"1"},"java":{"source":"Task task;\n\nAlarm.Builder.create(this, \"TaskAlarm\")\n        .metric(task.metricFailed())\n        .threshold(1)\n        .evaluationPeriods(1)\n        .build();","version":"1"},"go":{"source":"var task task\n\ncloudwatch.NewAlarm(this, jsii.String(\"TaskAlarm\"), &AlarmProps{\n\tMetric: task.MetricFailed(),\n\tThreshold: jsii.Number(1),\n\tEvaluationPeriods: jsii.Number(1),\n})","version":"1"},"$":{"source":"declare const task: sfn.Task;\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n  metric: task.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":619}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-cloudwatch.Alarm","@aws-cdk/aws-cloudwatch.AlarmProps","@aws-cdk/aws-cloudwatch.IMetric","@aws-cdk/aws-stepfunctions.Task#metricFailed","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const task: sfn.Task;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n  metric: task.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":1,"75":10,"104":1,"130":1,"153":1,"169":1,"193":1,"194":2,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":3,"290":1},"fqnsFingerprint":"cfc37d527f1960a9972cb2c6b18cbf3060302d5cd7b2f293c0b6086843ea5bdd"},"887b09300f4b75043173c6b8a4abfb456644a0f39ebb6413243c039c869fd0b6":{"translations":{"python":{"source":"# state_machine: sfn.StateMachine\n\ncloudwatch.Alarm(self, \"StateMachineAlarm\",\n    metric=state_machine.metric_failed(),\n    threshold=1,\n    evaluation_periods=1\n)","version":"2"},"csharp":{"source":"StateMachine stateMachine;\n\nnew Alarm(this, \"StateMachineAlarm\", new AlarmProps {\n    Metric = stateMachine.MetricFailed(),\n    Threshold = 1,\n    EvaluationPeriods = 1\n});","version":"1"},"java":{"source":"StateMachine stateMachine;\n\nAlarm.Builder.create(this, \"StateMachineAlarm\")\n        .metric(stateMachine.metricFailed())\n        .threshold(1)\n        .evaluationPeriods(1)\n        .build();","version":"1"},"go":{"source":"var stateMachine stateMachine\n\ncloudwatch.NewAlarm(this, jsii.String(\"StateMachineAlarm\"), &AlarmProps{\n\tMetric: stateMachine.metricFailed(),\n\tThreshold: jsii.Number(1),\n\tEvaluationPeriods: jsii.Number(1),\n})","version":"1"},"$":{"source":"declare const stateMachine: sfn.StateMachine;\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n  metric: stateMachine.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":630}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-cloudwatch.Alarm","@aws-cdk/aws-cloudwatch.AlarmProps","@aws-cdk/aws-cloudwatch.IMetric","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stateMachine: sfn.StateMachine;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n  metric: stateMachine.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":1,"75":10,"104":1,"130":1,"153":1,"169":1,"193":1,"194":2,"196":1,"197":1,"225":1,"226":1,"242":1,"243":1,"281":3,"290":1},"fqnsFingerprint":"1851773af204fc6026f4724854a4a33aa132045528bc4c315b492f72e1d51c55"},"fd9f8138ad6aa3aa123a574ef4d936018033cbe4149bf34b311308a938209704":{"translations":{"python":{"source":"cloudwatch.Alarm(self, \"ThrottledAlarm\",\n    metric=sfn.StateTransitionMetric.metric_throttled_events(),\n    threshold=10,\n    evaluation_periods=2\n)","version":"2"},"csharp":{"source":"new Alarm(this, \"ThrottledAlarm\", new AlarmProps {\n    Metric = StateTransitionMetric.MetricThrottledEvents(),\n    Threshold = 10,\n    EvaluationPeriods = 2\n});","version":"1"},"java":{"source":"Alarm.Builder.create(this, \"ThrottledAlarm\")\n        .metric(StateTransitionMetric.metricThrottledEvents())\n        .threshold(10)\n        .evaluationPeriods(2)\n        .build();","version":"1"},"go":{"source":"cloudwatch.NewAlarm(this, jsii.String(\"ThrottledAlarm\"), &AlarmProps{\n\tMetric: sfn.StateTransitionMetric_MetricThrottledEvents(),\n\tThreshold: jsii.Number(10),\n\tEvaluationPeriods: jsii.Number(2),\n})","version":"1"},"$":{"source":"new cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":641}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-cloudwatch.Alarm","@aws-cdk/aws-cloudwatch.AlarmProps","@aws-cdk/aws-cloudwatch.IMetric","@aws-cdk/aws-stepfunctions.StateTransitionMetric","@aws-cdk/aws-stepfunctions.StateTransitionMetric#metricThrottledEvents","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":1,"75":8,"104":1,"193":1,"194":3,"196":1,"197":1,"226":1,"281":3},"fqnsFingerprint":"3918461778425d4d688416091c4989d89a6e3df74471e803b2f1a3dca1dbd68e"},"eb729d4bac2d83a91384b64fdd3fb67ea6dec22375993c67bbbb2031f08ae9e8":{"translations":{"python":{"source":"import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Logs;\n\n\nvar logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();","version":"1"},"go":{"source":"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyLogGroup\"))\n\nsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"Pass\"))),\n\tLogs: &LogOptions{\n\t\tDestination: logGroup,\n\t\tLevel: sfn.LogLevel_ALL,\n\t},\n})","version":"1"},"$":{"source":"import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":670}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.LogLevel","@aws-cdk/aws-stepfunctions.LogLevel#ALL","@aws-cdk/aws-stepfunctions.LogOptions","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":19,"104":3,"193":2,"194":7,"196":1,"197":3,"225":1,"226":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"9573e2f088154713294145419996b1b3dd6469ab0b3dafb7a0720698b5bf19ac"},"21109a748e6f7b98ba4f415b4b24bcb357671f00b731eccac26803669172508e":{"translations":{"python":{"source":"sfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    tracing_enabled=True\n)","version":"2"},"csharp":{"source":"new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    TracingEnabled = true\n});","version":"1"},"java":{"source":"StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .tracingEnabled(true)\n        .build();","version":"1"},"go":{"source":"sfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"Pass\"))),\n\tTracingEnabled: jsii.Boolean(true),\n})","version":"1"},"$":{"source":"new sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  tracingEnabled: true,\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":688}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  tracingEnabled: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":9,"104":2,"106":1,"193":1,"194":4,"196":1,"197":2,"226":1,"281":2},"fqnsFingerprint":"fe0b2ff12e73d230e0bce058472dd3073b564053a811bef977fd9277419dfe73"},"06188f104789e85511682559743862ca211781c4ba8e1ee601104a79fa36d852":{"translations":{"python":{"source":"# definition: sfn.IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role permission to start execution of state machine\nstate_machine.grant_start_execution(role)","version":"2"},"csharp":{"source":"IChainable definition;\nvar role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role permission to start execution of state machine\nstateMachine.GrantStartExecution(role);","version":"1"},"java":{"source":"IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);","version":"1"},"go":{"source":"var definition iChainable\nrole := iam.NewRole(this, jsii.String(\"Role\"), &RoleProps{\n\tAssumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role)","version":"1"},"$":{"source":"const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":714}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.IPrincipal","@aws-cdk/aws-iam.Role","@aws-cdk/aws-iam.RoleProps","@aws-cdk/aws-iam.ServicePrincipal","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":16,"104":2,"130":1,"153":1,"169":1,"193":2,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":1,"282":1,"290":1},"fqnsFingerprint":"578dc3a74a56bc46e9a549a6a93703b8028bf3cb68ad25103abd47bf5daf8089"},"cae53105e6e37074392426e6236e3e1d95c05662b4359199f244c1ac6082cf78":{"translations":{"python":{"source":"# definition: sfn.IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role read access to state machine\nstate_machine.grant_read(role)","version":"2"},"csharp":{"source":"IChainable definition;\nvar role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role read access to state machine\nstateMachine.GrantRead(role);","version":"1"},"java":{"source":"IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role read access to state machine\nstateMachine.grantRead(role);","version":"1"},"go":{"source":"var definition iChainable\nrole := iam.NewRole(this, jsii.String(\"Role\"), &RoleProps{\n\tAssumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})\n\n// Give role read access to state machine\nstateMachine.grantRead(role)","version":"1"},"$":{"source":"const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role read access to state machine\nstateMachine.grantRead(role);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":736}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.IPrincipal","@aws-cdk/aws-iam.Role","@aws-cdk/aws-iam.RoleProps","@aws-cdk/aws-iam.ServicePrincipal","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role read access to state machine\nstateMachine.grantRead(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":16,"104":2,"130":1,"153":1,"169":1,"193":2,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":1,"282":1,"290":1},"fqnsFingerprint":"578dc3a74a56bc46e9a549a6a93703b8028bf3cb68ad25103abd47bf5daf8089"},"2a3f3d0a242ba776a3d14d3743593b8c3f32f27ba8cd2b4d59b44275d8d73911":{"translations":{"python":{"source":"# definition: sfn.IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role task response permissions to the state machine\nstate_machine.grant_task_response(role)","version":"2"},"csharp":{"source":"IChainable definition;\nvar role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role task response permissions to the state machine\nstateMachine.GrantTaskResponse(role);","version":"1"},"java":{"source":"IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);","version":"1"},"go":{"source":"var definition iChainable\nrole := iam.NewRole(this, jsii.String(\"Role\"), &RoleProps{\n\tAssumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role)","version":"1"},"$":{"source":"const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":765}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.IPrincipal","@aws-cdk/aws-iam.Role","@aws-cdk/aws-iam.RoleProps","@aws-cdk/aws-iam.ServicePrincipal","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":16,"104":2,"130":1,"153":1,"169":1,"193":2,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":1,"282":1,"290":1},"fqnsFingerprint":"578dc3a74a56bc46e9a549a6a93703b8028bf3cb68ad25103abd47bf5daf8089"},"8a4d57b553060b5a9f71018cb331018bf696c6aa6eb0f479f8d0f44fd1730b3c":{"translations":{"python":{"source":"# definition: sfn.IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role permission to get execution history of ALL executions for the state machine\nstate_machine.grant_execution(role, \"states:GetExecutionHistory\")","version":"2"},"csharp":{"source":"IChainable definition;\nvar role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.GrantExecution(role, \"states:GetExecutionHistory\");","version":"1"},"java":{"source":"IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, \"states:GetExecutionHistory\");","version":"1"},"go":{"source":"var definition iChainable\nrole := iam.NewRole(this, jsii.String(\"Role\"), &RoleProps{\n\tAssumedBy: iam.NewServicePrincipal(jsii.String(\"lambda.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, jsii.String(\"states:GetExecutionHistory\"))","version":"1"},"$":{"source":"const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, 'states:GetExecutionHistory');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":789}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.IPrincipal","@aws-cdk/aws-iam.Role","@aws-cdk/aws-iam.RoleProps","@aws-cdk/aws-iam.ServicePrincipal","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, 'states:GetExecutionHistory');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":16,"104":2,"130":1,"153":1,"169":1,"193":2,"194":4,"196":1,"197":3,"225":3,"226":1,"242":3,"243":3,"281":1,"282":1,"290":1},"fqnsFingerprint":"578dc3a74a56bc46e9a549a6a93703b8028bf3cb68ad25103abd47bf5daf8089"},"4c095d485ca2a81dc944e46efd75f89cc1dd77829d71c80ea181c694ba93509a":{"translations":{"python":{"source":"# definition: sfn.IChainable\nuser = iam.User(self, \"MyUser\")\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# give user permission to send task success to the state machine\nstate_machine.grant(user, \"states:SendTaskSuccess\")","version":"2"},"csharp":{"source":"IChainable definition;\nvar user = new User(this, \"MyUser\");\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n//give user permission to send task success to the state machine\nstateMachine.Grant(user, \"states:SendTaskSuccess\");","version":"1"},"java":{"source":"IChainable definition;\nUser user = new User(this, \"MyUser\");\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, \"states:SendTaskSuccess\");","version":"1"},"go":{"source":"var definition iChainable\nuser := iam.NewUser(this, jsii.String(\"MyUser\"))\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n})\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, jsii.String(\"states:SendTaskSuccess\"))","version":"1"},"$":{"source":"const user = new iam.User(this, 'MyUser');\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, 'states:SendTaskSuccess');","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":807}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-iam.User","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser');\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, 'states:SendTaskSuccess');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":13,"104":2,"130":1,"153":1,"169":1,"193":1,"194":3,"196":1,"197":2,"225":3,"226":1,"242":3,"243":3,"282":1,"290":1},"fqnsFingerprint":"d05998056f99101ab495a09955680ce5ab7a5db384bf34693868d4737a29c2dc"},"337d476c24f4d100e73ad2a2a96fa5ab28050626f6591369081e9b744b76fa9f":{"translations":{"python":{"source":"app = App()\nstack = Stack(app, \"MyStack\")\nsfn.StateMachine.from_state_machine_arn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\")","version":"2"},"csharp":{"source":"var app = new App();\nvar stack = new Stack(app, \"MyStack\");\nStateMachine.FromStateMachineArn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\");","version":"1"},"java":{"source":"App app = new App();\nStack stack = new Stack(app, \"MyStack\");\nStateMachine.fromStateMachineArn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\");","version":"1"},"go":{"source":"app := awscdkcore.NewApp()\nstack := awscdkcore.Newstack(app, jsii.String(\"MyStack\"))\nsfn.StateMachine_FromStateMachineArn(stack, jsii.String(\"ImportedStateMachine\"), jsii.String(\"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\"))","version":"1"},"$":{"source":"const app = new App();\nconst stack = new Stack(app, 'MyStack');\nsfn.StateMachine.fromStateMachineArn(\n  stack,\n  'ImportedStateMachine',\n  'arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ',\n);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/aws-stepfunctions"},"field":{"field":"markdown","line":826}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/core.App","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst app = new App();\nconst stack = new Stack(app, 'MyStack');\nsfn.StateMachine.fromStateMachineArn(\n  stack,\n  'ImportedStateMachine',\n  'arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":9,"194":2,"196":1,"197":2,"225":2,"226":1,"242":2,"243":2},"fqnsFingerprint":"6625225f70e726809b5ec5204e72b2c2f58ad61bf139e98c70a977d38b3ea237"},"c57e777037d80fe4924f1a62529c62c42c2fd32d3dea9f34b38c6d1947c30293":{"translations":{"python":{"source":"activity = sfn.Activity(self, \"Activity\")\n\n# Read this CloudFormation Output from your application and use it to poll for work on\n# the activity.\nCfnOutput(self, \"ActivityArn\", value=activity.activity_arn)","version":"2"},"csharp":{"source":"var activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, \"ActivityArn\", new CfnOutputProps { Value = activity.ActivityArn });","version":"1"},"java":{"source":"Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nCfnOutput.Builder.create(this, \"ActivityArn\").value(activity.getActivityArn()).build();","version":"1"},"go":{"source":"activity := sfn.NewActivity(this, jsii.String(\"Activity\"))\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nawscdkcore.NewCfnOutput(this, jsii.String(\"ActivityArn\"), &CfnOutputProps{\n\tValue: activity.ActivityArn,\n})","version":"1"},"$":{"source":"const activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Activity"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Activity","@aws-cdk/aws-stepfunctions.Activity#activityArn","@aws-cdk/core.CfnOutput","@aws-cdk/core.CfnOutputProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":7,"104":2,"193":1,"194":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":1},"fqnsFingerprint":"9301f901967be05921ec545c6d9ac2fb842fd347430c2d9870f30ff472b10dcc"},"23dc79f48282995fe9e5304f20fdc765fa986c3856df7ad2ce5aaa2fdb4c1fb6":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nactivity_props = stepfunctions.ActivityProps(\n    activity_name=\"activityName\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar activityProps = new ActivityProps {\n    ActivityName = \"activityName\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nActivityProps activityProps = ActivityProps.builder()\n        .activityName(\"activityName\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nactivityProps := &ActivityProps{\n\tActivityName: jsii.String(\"activityName\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst activityProps: stepfunctions.ActivityProps = {\n  activityName: 'activityName',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.ActivityProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.ActivityProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst activityProps: stepfunctions.ActivityProps = {\n  activityName: 'activityName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":5,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"0c6663237d18eb6ec0ec60c816eaaf4a021c786a5c9e9a06992c42a1a15a4e69"},"f6a97c319224fca28e143833984acc4111d3b49d0cba4c64057c027a2ea8e43b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nafterwards_options = stepfunctions.AfterwardsOptions(\n    include_error_handlers=False,\n    include_otherwise=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar afterwardsOptions = new AfterwardsOptions {\n    IncludeErrorHandlers = false,\n    IncludeOtherwise = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nAfterwardsOptions afterwardsOptions = AfterwardsOptions.builder()\n        .includeErrorHandlers(false)\n        .includeOtherwise(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nafterwardsOptions := &AfterwardsOptions{\n\tIncludeErrorHandlers: jsii.Boolean(false),\n\tIncludeOtherwise: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst afterwardsOptions: stepfunctions.AfterwardsOptions = {\n  includeErrorHandlers: false,\n  includeOtherwise: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.AfterwardsOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.AfterwardsOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst afterwardsOptions: stepfunctions.AfterwardsOptions = {\n  includeErrorHandlers: false,\n  includeOtherwise: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"91":2,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"68719fe5ea75f5cd2f4452a9d67dd68632fbdd3870946dc9fa7f71c1b3d016b4"},"007957fefd03978428ae31b68f74ab41b69b756e94a071bf94117e77d869ada7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ncatch_props = stepfunctions.CatchProps(\n    errors=[\"errors\"],\n    result_path=\"resultPath\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar catchProps = new CatchProps {\n    Errors = new [] { \"errors\" },\n    ResultPath = \"resultPath\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nCatchProps catchProps = CatchProps.builder()\n        .errors(List.of(\"errors\"))\n        .resultPath(\"resultPath\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ncatchProps := &CatchProps{\n\tErrors: []*string{\n\t\tjsii.String(\"errors\"),\n\t},\n\tResultPath: jsii.String(\"resultPath\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst catchProps: stepfunctions.CatchProps = {\n  errors: ['errors'],\n  resultPath: 'resultPath',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CatchProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CatchProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst catchProps: stepfunctions.CatchProps = {\n  errors: ['errors'],\n  resultPath: 'resultPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":6,"153":1,"169":1,"192":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"71575838cc00fc18492c220b37c2cb975f8fb76c8da3f66c580b1f641d817fbf"},"288fb40992e19dc2d66f94ec027e7c55b2a92e152d806c59c6e6c6fd8465fa31":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ncfn_activity = stepfunctions.CfnActivity(self, \"MyCfnActivity\",\n    name=\"name\",\n\n    # the properties below are optional\n    tags=[stepfunctions.CfnActivity.TagsEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar cfnActivity = new CfnActivity(this, \"MyCfnActivity\", new CfnActivityProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Tags = new [] { new TagsEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nCfnActivity cfnActivity = CfnActivity.Builder.create(this, \"MyCfnActivity\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .tags(List.of(TagsEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ncfnActivity := stepfunctions.NewCfnActivity(this, jsii.String(\"MyCfnActivity\"), &CfnActivityProps{\n\tName: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tTags: []tagsEntryProperty{\n\t\t&tagsEntryProperty{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cfnActivity = new stepfunctions.CfnActivity(this, 'MyCfnActivity', {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnActivity"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnActivity","@aws-cdk/aws-stepfunctions.CfnActivityProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnActivity = new stepfunctions.CfnActivity(this, 'MyCfnActivity', {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":8,"104":1,"192":1,"193":2,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"a1b2abefda4d6c68dc679a2ec7e9145220e7d854419359d25afc843c5e40a565"},"50fc852c2e47023e8271def5f9d757d29f64eb328c20dd1a3f87a17158dfd7c3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ntags_entry_property = stepfunctions.CfnActivity.TagsEntryProperty(\n    key=\"key\",\n    value=\"value\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar tagsEntryProperty = new TagsEntryProperty {\n    Key = \"key\",\n    Value = \"value\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nTagsEntryProperty tagsEntryProperty = TagsEntryProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntagsEntryProperty := &TagsEntryProperty{\n\tKey: jsii.String(\"key\"),\n\tValue: jsii.String(\"value\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tagsEntryProperty: stepfunctions.CfnActivity.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagsEntryProperty: stepfunctions.CfnActivity.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"673a7e7af80dc216a40e6b2ff675f1890e544dfb8c6ee961df283843abcaa9ed"},"5ba9834af0b025c9c6fc8c9fd0d1391b879b26a48ac495b764529c553c9717f9":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ncfn_activity_props = stepfunctions.CfnActivityProps(\n    name=\"name\",\n\n    # the properties below are optional\n    tags=[stepfunctions.CfnActivity.TagsEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar cfnActivityProps = new CfnActivityProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Tags = new [] { new TagsEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nCfnActivityProps cfnActivityProps = CfnActivityProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .tags(List.of(TagsEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ncfnActivityProps := &CfnActivityProps{\n\tName: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tTags: []tagsEntryProperty{\n\t\t&tagsEntryProperty{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cfnActivityProps: stepfunctions.CfnActivityProps = {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnActivityProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnActivityProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnActivityProps: stepfunctions.CfnActivityProps = {\n  name: 'name',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"153":1,"169":1,"192":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"6d3b929d2f46e28587cdc23b0ef9ec9b917df8b6ecb6a8a3bcccb846f192baef"},"b84a85d2de5225c6c7492fc3f41b9e209944aad7645ae7729d660f05362596f5":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# definition: Any\n# definition_substitutions: Any\n\ncfn_state_machine = stepfunctions.CfnStateMachine(self, \"MyCfnStateMachine\",\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    definition=definition,\n    definition_s3_location=stepfunctions.CfnStateMachine.S3LocationProperty(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        version=\"version\"\n    ),\n    definition_string=\"definitionString\",\n    definition_substitutions={\n        \"definition_substitutions_key\": definition_substitutions\n    },\n    logging_configuration=stepfunctions.CfnStateMachine.LoggingConfigurationProperty(\n        destinations=[stepfunctions.CfnStateMachine.LogDestinationProperty(\n            cloud_watch_logs_log_group=stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty(\n                log_group_arn=\"logGroupArn\"\n            )\n        )],\n        include_execution_data=False,\n        level=\"level\"\n    ),\n    state_machine_name=\"stateMachineName\",\n    state_machine_type=\"stateMachineType\",\n    tags=[stepfunctions.CfnStateMachine.TagsEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_configuration=stepfunctions.CfnStateMachine.TracingConfigurationProperty(\n        enabled=False\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar definition;\nvar definitionSubstitutions;\n\nvar cfnStateMachine = new CfnStateMachine(this, \"MyCfnStateMachine\", new CfnStateMachineProps {\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    Definition = definition,\n    DefinitionS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        Version = \"version\"\n    },\n    DefinitionString = \"definitionString\",\n    DefinitionSubstitutions = new Dictionary<string, object> {\n        { \"definitionSubstitutionsKey\", definitionSubstitutions }\n    },\n    LoggingConfiguration = new LoggingConfigurationProperty {\n        Destinations = new [] { new LogDestinationProperty {\n            CloudWatchLogsLogGroup = new CloudWatchLogsLogGroupProperty {\n                LogGroupArn = \"logGroupArn\"\n            }\n        } },\n        IncludeExecutionData = false,\n        Level = \"level\"\n    },\n    StateMachineName = \"stateMachineName\",\n    StateMachineType = \"stateMachineType\",\n    Tags = new [] { new TagsEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingConfiguration = new TracingConfigurationProperty {\n        Enabled = false\n    }\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject definition;\nObject definitionSubstitutions;\n\nCfnStateMachine cfnStateMachine = CfnStateMachine.Builder.create(this, \"MyCfnStateMachine\")\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .definition(definition)\n        .definitionS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .definitionString(\"definitionString\")\n        .definitionSubstitutions(Map.of(\n                \"definitionSubstitutionsKey\", definitionSubstitutions))\n        .loggingConfiguration(LoggingConfigurationProperty.builder()\n                .destinations(List.of(LogDestinationProperty.builder()\n                        .cloudWatchLogsLogGroup(CloudWatchLogsLogGroupProperty.builder()\n                                .logGroupArn(\"logGroupArn\")\n                                .build())\n                        .build()))\n                .includeExecutionData(false)\n                .level(\"level\")\n                .build())\n        .stateMachineName(\"stateMachineName\")\n        .stateMachineType(\"stateMachineType\")\n        .tags(List.of(TagsEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingConfiguration(TracingConfigurationProperty.builder()\n                .enabled(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar definition interface{}\nvar definitionSubstitutions interface{}\n\ncfnStateMachine := stepfunctions.NewCfnStateMachine(this, jsii.String(\"MyCfnStateMachine\"), &CfnStateMachineProps{\n\tRoleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\tDefinition: definition,\n\tDefinitionS3Location: &S3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tKey: jsii.String(\"key\"),\n\n\t\t// the properties below are optional\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tDefinitionString: jsii.String(\"definitionString\"),\n\tDefinitionSubstitutions: map[string]interface{}{\n\t\t\"definitionSubstitutionsKey\": definitionSubstitutions,\n\t},\n\tLoggingConfiguration: &LoggingConfigurationProperty{\n\t\tDestinations: []interface{}{\n\t\t\t&LogDestinationProperty{\n\t\t\t\tCloudWatchLogsLogGroup: &CloudWatchLogsLogGroupProperty{\n\t\t\t\t\tLogGroupArn: jsii.String(\"logGroupArn\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tIncludeExecutionData: jsii.Boolean(false),\n\t\tLevel: jsii.String(\"level\"),\n\t},\n\tStateMachineName: jsii.String(\"stateMachineName\"),\n\tStateMachineType: jsii.String(\"stateMachineType\"),\n\tTags: []tagsEntryProperty{\n\t\t&tagsEntryProperty{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tTracingConfiguration: &TracingConfigurationProperty{\n\t\tEnabled: jsii.Boolean(false),\n\t},\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\nconst cfnStateMachine = new stepfunctions.CfnStateMachine(this, 'MyCfnStateMachine', {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine","@aws-cdk/aws-stepfunctions.CfnStateMachineProps","@aws-cdk/core.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStateMachine = new stepfunctions.CfnStateMachine(this, 'MyCfnStateMachine', {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":13,"75":30,"91":2,"104":1,"125":2,"130":2,"192":2,"193":8,"194":1,"197":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":22,"290":1},"fqnsFingerprint":"0f1602554d8e82c267e42087200e3658806b9c3f3d89a0a5e1ebf45a56e1117c"},"06745cd2243c6e4a9bcc5ca0867cdb0ef22239f7ceb432df810b0ea456efe737":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ncloud_watch_logs_log_group_property = stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty(\n    log_group_arn=\"logGroupArn\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar cloudWatchLogsLogGroupProperty = new CloudWatchLogsLogGroupProperty {\n    LogGroupArn = \"logGroupArn\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nCloudWatchLogsLogGroupProperty cloudWatchLogsLogGroupProperty = CloudWatchLogsLogGroupProperty.builder()\n        .logGroupArn(\"logGroupArn\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ncloudWatchLogsLogGroupProperty := &CloudWatchLogsLogGroupProperty{\n\tLogGroupArn: jsii.String(\"logGroupArn\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst cloudWatchLogsLogGroupProperty: stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty = {\n  logGroupArn: 'logGroupArn',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudWatchLogsLogGroupProperty: stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty = {\n  logGroupArn: 'logGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":6,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"16110e143a79e2a1b59f1c250c34da6431d237fda8b0145c349bb99347a705f2"},"0c736671b624adb567a5778c15c15a9a5b81a032d28b28ddc7a5d3d764b7aa0b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nlog_destination_property = stepfunctions.CfnStateMachine.LogDestinationProperty(\n    cloud_watch_logs_log_group=stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty(\n        log_group_arn=\"logGroupArn\"\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar logDestinationProperty = new LogDestinationProperty {\n    CloudWatchLogsLogGroup = new CloudWatchLogsLogGroupProperty {\n        LogGroupArn = \"logGroupArn\"\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nLogDestinationProperty logDestinationProperty = LogDestinationProperty.builder()\n        .cloudWatchLogsLogGroup(CloudWatchLogsLogGroupProperty.builder()\n                .logGroupArn(\"logGroupArn\")\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nlogDestinationProperty := &LogDestinationProperty{\n\tCloudWatchLogsLogGroup: &CloudWatchLogsLogGroupProperty{\n\t\tLogGroupArn: jsii.String(\"logGroupArn\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst logDestinationProperty: stepfunctions.CfnStateMachine.LogDestinationProperty = {\n  cloudWatchLogsLogGroup: {\n    logGroupArn: 'logGroupArn',\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.LogDestinationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.LogDestinationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logDestinationProperty: stepfunctions.CfnStateMachine.LogDestinationProperty = {\n  cloudWatchLogsLogGroup: {\n    logGroupArn: 'logGroupArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":7,"153":2,"169":1,"193":2,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"06000e37ddf39835e4ea87c4d57f4114803b97a0c07b69dd85d194a2ee0d6fb3"},"829fdbb4b6ba86e7e6050716d5134ae494f3f18da5852e5bc39e43563c4bf864":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nlogging_configuration_property = stepfunctions.CfnStateMachine.LoggingConfigurationProperty(\n    destinations=[stepfunctions.CfnStateMachine.LogDestinationProperty(\n        cloud_watch_logs_log_group=stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty(\n            log_group_arn=\"logGroupArn\"\n        )\n    )],\n    include_execution_data=False,\n    level=\"level\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar loggingConfigurationProperty = new LoggingConfigurationProperty {\n    Destinations = new [] { new LogDestinationProperty {\n        CloudWatchLogsLogGroup = new CloudWatchLogsLogGroupProperty {\n            LogGroupArn = \"logGroupArn\"\n        }\n    } },\n    IncludeExecutionData = false,\n    Level = \"level\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nLoggingConfigurationProperty loggingConfigurationProperty = LoggingConfigurationProperty.builder()\n        .destinations(List.of(LogDestinationProperty.builder()\n                .cloudWatchLogsLogGroup(CloudWatchLogsLogGroupProperty.builder()\n                        .logGroupArn(\"logGroupArn\")\n                        .build())\n                .build()))\n        .includeExecutionData(false)\n        .level(\"level\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nloggingConfigurationProperty := &LoggingConfigurationProperty{\n\tDestinations: []interface{}{\n\t\t&LogDestinationProperty{\n\t\t\tCloudWatchLogsLogGroup: &CloudWatchLogsLogGroupProperty{\n\t\t\t\tLogGroupArn: jsii.String(\"logGroupArn\"),\n\t\t\t},\n\t\t},\n\t},\n\tIncludeExecutionData: jsii.Boolean(false),\n\tLevel: jsii.String(\"level\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst loggingConfigurationProperty: stepfunctions.CfnStateMachine.LoggingConfigurationProperty = {\n  destinations: [{\n    cloudWatchLogsLogGroup: {\n      logGroupArn: 'logGroupArn',\n    },\n  }],\n  includeExecutionData: false,\n  level: 'level',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.LoggingConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingConfigurationProperty: stepfunctions.CfnStateMachine.LoggingConfigurationProperty = {\n  destinations: [{\n    cloudWatchLogsLogGroup: {\n      logGroupArn: 'logGroupArn',\n    },\n  }],\n  includeExecutionData: false,\n  level: 'level',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":10,"91":1,"153":2,"169":1,"192":1,"193":3,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":5,"290":1},"fqnsFingerprint":"bf78ac69f37056fadbdf8f19fb3ca3a03785ee6105de37e051c0e668ba2acd91"},"f5b2e04241a03dfdba9da9d99f2aa6744fd067e793f49c987ee09ed366b3a943":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ns3_location_property = stepfunctions.CfnStateMachine.S3LocationProperty(\n    bucket=\"bucket\",\n    key=\"key\",\n\n    # the properties below are optional\n    version=\"version\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar s3LocationProperty = new S3LocationProperty {\n    Bucket = \"bucket\",\n    Key = \"key\",\n\n    // the properties below are optional\n    Version = \"version\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nS3LocationProperty s3LocationProperty = S3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n\n        // the properties below are optional\n        .version(\"version\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ns3LocationProperty := &S3LocationProperty{\n\tBucket: jsii.String(\"bucket\"),\n\tKey: jsii.String(\"key\"),\n\n\t// the properties below are optional\n\tVersion: jsii.String(\"version\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst s3LocationProperty: stepfunctions.CfnStateMachine.S3LocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.S3LocationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationProperty: stepfunctions.CfnStateMachine.S3LocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":8,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"d896aa264b5d6a286e24080cd1545de883535c08501eebb74ac4de9a64215f0f"},"11fac063917239941c3d16af77a790b00eddde985cbdc04d6fd2441ba5cdecf2":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ntags_entry_property = stepfunctions.CfnStateMachine.TagsEntryProperty(\n    key=\"key\",\n    value=\"value\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar tagsEntryProperty = new TagsEntryProperty {\n    Key = \"key\",\n    Value = \"value\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nTagsEntryProperty tagsEntryProperty = TagsEntryProperty.builder()\n        .key(\"key\")\n        .value(\"value\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntagsEntryProperty := &TagsEntryProperty{\n\tKey: jsii.String(\"key\"),\n\tValue: jsii.String(\"value\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tagsEntryProperty: stepfunctions.CfnStateMachine.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagsEntryProperty: stepfunctions.CfnStateMachine.TagsEntryProperty = {\n  key: 'key',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":7,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"83418791c15ff56b931043b716b7c030672ab761bdd6c62795194df889bdb2fb"},"7d580e150e86cfca6ddd937140243e6156681b9b0cbebb09a2d043691fe1c939":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\ntracing_configuration_property = stepfunctions.CfnStateMachine.TracingConfigurationProperty(\n    enabled=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar tracingConfigurationProperty = new TracingConfigurationProperty {\n    Enabled = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nTracingConfigurationProperty tracingConfigurationProperty = TracingConfigurationProperty.builder()\n        .enabled(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntracingConfigurationProperty := &TracingConfigurationProperty{\n\tEnabled: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst tracingConfigurationProperty: stepfunctions.CfnStateMachine.TracingConfigurationProperty = {\n  enabled: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachine.TracingConfigurationProperty"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tracingConfigurationProperty: stepfunctions.CfnStateMachine.TracingConfigurationProperty = {\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"91":1,"153":2,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"f10ca7973f6dbe9828da2e6d2cc3bd6431d7dd0cfe1a509534eb62c4f4fb24d8"},"775e49ddd8028ca2eb71a0447f7f170bed274047d1643911adcfc46dcfcb70b8":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# definition: Any\n# definition_substitutions: Any\n\ncfn_state_machine_props = stepfunctions.CfnStateMachineProps(\n    role_arn=\"roleArn\",\n\n    # the properties below are optional\n    definition=definition,\n    definition_s3_location=stepfunctions.CfnStateMachine.S3LocationProperty(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        version=\"version\"\n    ),\n    definition_string=\"definitionString\",\n    definition_substitutions={\n        \"definition_substitutions_key\": definition_substitutions\n    },\n    logging_configuration=stepfunctions.CfnStateMachine.LoggingConfigurationProperty(\n        destinations=[stepfunctions.CfnStateMachine.LogDestinationProperty(\n            cloud_watch_logs_log_group=stepfunctions.CfnStateMachine.CloudWatchLogsLogGroupProperty(\n                log_group_arn=\"logGroupArn\"\n            )\n        )],\n        include_execution_data=False,\n        level=\"level\"\n    ),\n    state_machine_name=\"stateMachineName\",\n    state_machine_type=\"stateMachineType\",\n    tags=[stepfunctions.CfnStateMachine.TagsEntryProperty(\n        key=\"key\",\n        value=\"value\"\n    )],\n    tracing_configuration=stepfunctions.CfnStateMachine.TracingConfigurationProperty(\n        enabled=False\n    )\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar definition;\nvar definitionSubstitutions;\n\nvar cfnStateMachineProps = new CfnStateMachineProps {\n    RoleArn = \"roleArn\",\n\n    // the properties below are optional\n    Definition = definition,\n    DefinitionS3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        Version = \"version\"\n    },\n    DefinitionString = \"definitionString\",\n    DefinitionSubstitutions = new Dictionary<string, object> {\n        { \"definitionSubstitutionsKey\", definitionSubstitutions }\n    },\n    LoggingConfiguration = new LoggingConfigurationProperty {\n        Destinations = new [] { new LogDestinationProperty {\n            CloudWatchLogsLogGroup = new CloudWatchLogsLogGroupProperty {\n                LogGroupArn = \"logGroupArn\"\n            }\n        } },\n        IncludeExecutionData = false,\n        Level = \"level\"\n    },\n    StateMachineName = \"stateMachineName\",\n    StateMachineType = \"stateMachineType\",\n    Tags = new [] { new TagsEntryProperty {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TracingConfiguration = new TracingConfigurationProperty {\n        Enabled = false\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject definition;\nObject definitionSubstitutions;\n\nCfnStateMachineProps cfnStateMachineProps = CfnStateMachineProps.builder()\n        .roleArn(\"roleArn\")\n\n        // the properties below are optional\n        .definition(definition)\n        .definitionS3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .version(\"version\")\n                .build())\n        .definitionString(\"definitionString\")\n        .definitionSubstitutions(Map.of(\n                \"definitionSubstitutionsKey\", definitionSubstitutions))\n        .loggingConfiguration(LoggingConfigurationProperty.builder()\n                .destinations(List.of(LogDestinationProperty.builder()\n                        .cloudWatchLogsLogGroup(CloudWatchLogsLogGroupProperty.builder()\n                                .logGroupArn(\"logGroupArn\")\n                                .build())\n                        .build()))\n                .includeExecutionData(false)\n                .level(\"level\")\n                .build())\n        .stateMachineName(\"stateMachineName\")\n        .stateMachineType(\"stateMachineType\")\n        .tags(List.of(TagsEntryProperty.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .tracingConfiguration(TracingConfigurationProperty.builder()\n                .enabled(false)\n                .build())\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar definition interface{}\nvar definitionSubstitutions interface{}\n\ncfnStateMachineProps := &CfnStateMachineProps{\n\tRoleArn: jsii.String(\"roleArn\"),\n\n\t// the properties below are optional\n\tDefinition: definition,\n\tDefinitionS3Location: &S3LocationProperty{\n\t\tBucket: jsii.String(\"bucket\"),\n\t\tKey: jsii.String(\"key\"),\n\n\t\t// the properties below are optional\n\t\tVersion: jsii.String(\"version\"),\n\t},\n\tDefinitionString: jsii.String(\"definitionString\"),\n\tDefinitionSubstitutions: map[string]interface{}{\n\t\t\"definitionSubstitutionsKey\": definitionSubstitutions,\n\t},\n\tLoggingConfiguration: &LoggingConfigurationProperty{\n\t\tDestinations: []interface{}{\n\t\t\t&LogDestinationProperty{\n\t\t\t\tCloudWatchLogsLogGroup: &CloudWatchLogsLogGroupProperty{\n\t\t\t\t\tLogGroupArn: jsii.String(\"logGroupArn\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tIncludeExecutionData: jsii.Boolean(false),\n\t\tLevel: jsii.String(\"level\"),\n\t},\n\tStateMachineName: jsii.String(\"stateMachineName\"),\n\tStateMachineType: jsii.String(\"stateMachineType\"),\n\tTags: []tagsEntryProperty{\n\t\t&tagsEntryProperty{\n\t\t\tKey: jsii.String(\"key\"),\n\t\t\tValue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tTracingConfiguration: &TracingConfigurationProperty{\n\t\tEnabled: jsii.Boolean(false),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\nconst cfnStateMachineProps: stepfunctions.CfnStateMachineProps = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CfnStateMachineProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.CfnStateMachineProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const definition: any;\ndeclare const definitionSubstitutions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnStateMachineProps: stepfunctions.CfnStateMachineProps = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  definition: definition,\n  definitionS3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    version: 'version',\n  },\n  definitionString: 'definitionString',\n  definitionSubstitutions: {\n    definitionSubstitutionsKey: definitionSubstitutions,\n  },\n  loggingConfiguration: {\n    destinations: [{\n      cloudWatchLogsLogGroup: {\n        logGroupArn: 'logGroupArn',\n      },\n    }],\n    includeExecutionData: false,\n    level: 'level',\n  },\n  stateMachineName: 'stateMachineName',\n  stateMachineType: 'stateMachineType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  tracingConfiguration: {\n    enabled: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":12,"75":30,"91":2,"125":2,"130":2,"153":1,"169":1,"192":2,"193":8,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":22,"290":1},"fqnsFingerprint":"737f2ec506cffc7f72a8f424273c2fd1e2ba542e3f81ab2ec905e64f5930e888"},"d4ca2692d50fee5ab98dfc8f79796f759353487958469d6633204481fa873557":{"translations":{"python":{"source":"# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)","version":"2"},"csharp":{"source":"// Define a state machine with one Pass state\nvar child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nvar task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});","version":"1"},"java":{"source":"// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();","version":"1"},"go":{"source":"// Define a state machine with one Pass state\nchild := sfn.NewStateMachine(this, jsii.String(\"ChildStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"PassState\"))),\n})\n\n// Include the state machine in a Task state with callback pattern\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &StepFunctionsStartExecutionProps{\n\tStateMachine: child,\n\tIntegrationPattern: sfn.IntegrationPattern_WAIT_FOR_TASK_TOKEN,\n\tInput: sfn.TaskInput_FromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath_taskToken(),\n\t\t\"foo\": jsii.String(\"bar\"),\n\t}),\n\tName: jsii.String(\"MyExecutionName\"),\n})\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nsfn.NewStateMachine(this, jsii.String(\"ParentStateMachine\"), &StateMachineProps{\n\tDefinition: task,\n})","version":"1"},"$":{"source":"// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Chain"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution","@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.IntegrationPattern","@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromObject","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":6,"75":32,"104":4,"193":4,"194":12,"196":2,"197":4,"225":2,"226":1,"242":2,"243":2,"281":8},"fqnsFingerprint":"1ebfb7b792790c9e28e5250ab98e3c4a92e932677385d2fa95a5934023d9aaf9"},"a394961e07993ace84bd792d2e0bbd45940d827768240fb7a8502cbbf188364d":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda: lambda.Function\n# get_status_lambda: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nvar submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nvar waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nvar getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nvar finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar submitLambda function\nvar getStatusLambda function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Submit Job\"), &LambdaInvokeProps{\n\tLambdaFunction: submitLambda,\n\t// Lambda's result is in the attribute `Payload`\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\nwaitX := sfn.NewWait(this, jsii.String(\"Wait X Seconds\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\ngetStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Pass just the field named \"guid\" into the Lambda, put the\n\t// Lambda's result in a field called \"status\" in the response\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\njobFailed := sfn.NewFail(this, jsii.String(\"Job Failed\"), &FailProps{\n\tCause: jsii.String(\"AWS Batch Job Failed\"),\n\tError: jsii.String(\"DescribeJob returned FAILED\"),\n})\n\nfinalStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Final Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Use \"guid\" field as input\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\ndefinition := submitJob.Next(waitX).Next(getStatus).Next(sfn.NewChoice(this, jsii.String(\"Job Complete?\")).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"FAILED\")), jobFailed).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCEEDED\")), finalStatus).Otherwise(waitX))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n\tTimeout: awscdkcore.Duration_Minutes(jsii.Number(5)),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Choice"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":20,"75":66,"104":7,"130":2,"153":2,"169":2,"193":6,"194":20,"196":10,"197":7,"225":8,"226":1,"242":8,"243":8,"254":1,"255":1,"256":1,"281":12,"282":1,"290":1},"fqnsFingerprint":"4c944ffb8763696561bf43d08c0cccdf86dc10b6bee146083ee98d15a382f58d"},"1b2f7e4998b3baecbaa7e4069fa45dcd0a737df549372218437e4c4caa92a647":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nchoice_props = stepfunctions.ChoiceProps(\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar choiceProps = new ChoiceProps {\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nChoiceProps choiceProps = ChoiceProps.builder()\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nchoiceProps := &ChoiceProps{\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst choiceProps: stepfunctions.ChoiceProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.ChoiceProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.ChoiceProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst choiceProps: stepfunctions.ChoiceProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"73bc04dbeae79ae37fd431c2b55fee15cb12b058eba5f56702bb39b9214b8fe2"},"a255fff048570a3dd0f26c7563b391f8994dea78517f61067c8cd09d27bd3ff3":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda: lambda.Function\n# get_status_lambda: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nvar submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nvar waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nvar getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nvar finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar submitLambda function\nvar getStatusLambda function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Submit Job\"), &LambdaInvokeProps{\n\tLambdaFunction: submitLambda,\n\t// Lambda's result is in the attribute `Payload`\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\nwaitX := sfn.NewWait(this, jsii.String(\"Wait X Seconds\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\ngetStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Pass just the field named \"guid\" into the Lambda, put the\n\t// Lambda's result in a field called \"status\" in the response\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\njobFailed := sfn.NewFail(this, jsii.String(\"Job Failed\"), &FailProps{\n\tCause: jsii.String(\"AWS Batch Job Failed\"),\n\tError: jsii.String(\"DescribeJob returned FAILED\"),\n})\n\nfinalStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Final Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Use \"guid\" field as input\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\ndefinition := submitJob.Next(waitX).Next(getStatus).Next(sfn.NewChoice(this, jsii.String(\"Job Complete?\")).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"FAILED\")), jobFailed).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCEEDED\")), finalStatus).Otherwise(waitX))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n\tTimeout: awscdkcore.Duration_Minutes(jsii.Number(5)),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Condition"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":20,"75":66,"104":7,"130":2,"153":2,"169":2,"193":6,"194":20,"196":10,"197":7,"225":8,"226":1,"242":8,"243":8,"254":1,"255":1,"256":1,"281":12,"282":1,"290":1},"fqnsFingerprint":"4c944ffb8763696561bf43d08c0cccdf86dc10b6bee146083ee98d15a382f58d"},"9b29578e0e029e05b986dab974592d5ca72ac6d0173d72a5636a41b5a73fb3a1":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nvar table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nvar finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nvar custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nvar chain = Chain.Start(custom).Next(finalStatus);\n\nvar sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\n\n\n// create a table\ntable := dynamodb.NewTable(this, jsii.String(\"montable\"), &TableProps{\n\tPartitionKey: &Attribute{\n\t\tName: jsii.String(\"id\"),\n\t\tType: dynamodb.AttributeType_STRING,\n\t},\n})\n\nfinalStatus := sfn.NewPass(this, jsii.String(\"final step\"))\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstateJson := map[string]interface{}{\n\t\"Type\": jsii.String(\"Task\"),\n\t\"Resource\": jsii.String(\"arn:aws:states:::dynamodb:putItem\"),\n\t\"Parameters\": map[string]interface{}{\n\t\t\"TableName\": table.tableName,\n\t\t\"Item\": map[string]map[string]*string{\n\t\t\t\"id\": map[string]*string{\n\t\t\t\t\"S\": jsii.String(\"MyEntry\"),\n\t\t\t},\n\t\t},\n\t},\n\t\"ResultPath\": nil,\n}\n\n// custom state which represents a task to insert data into DynamoDB\ncustom := sfn.NewCustomState(this, jsii.String(\"my custom task\"), &CustomStateProps{\n\tStateJson: StateJson,\n})\n\nchain := sfn.Chain_Start(custom).Next(finalStatus)\n\nsm := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: chain,\n\tTimeout: awscdkcore.Duration_Seconds(jsii.Number(30)),\n})\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm)","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CustomState"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.Attribute","@aws-cdk/aws-dynamodb.AttributeType","@aws-cdk/aws-dynamodb.AttributeType#STRING","@aws-cdk/aws-dynamodb.Table","@aws-cdk/aws-dynamodb.Table#tableName","@aws-cdk/aws-dynamodb.TableProps","@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.CustomState","@aws-cdk/aws-stepfunctions.CustomStateProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#seconds","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":9,"75":46,"100":1,"104":4,"193":8,"194":12,"196":4,"197":4,"225":6,"226":1,"242":6,"243":6,"254":1,"255":1,"256":1,"281":13,"282":1,"290":1},"fqnsFingerprint":"269f6078fc1689b57b6fb8ff4e7e4348a4854e0d709b4112fd2ccff74a68b6d9"},"0d89d2817146e7a2dd3df36d4091122dbf6a80f607d22360778d18901993c80d":{"translations":{"python":{"source":"import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nvar table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nvar finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nvar custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nvar chain = Chain.Start(custom).Next(finalStatus);\n\nvar sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);","version":"1"},"java":{"source":"import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\n\n\n// create a table\ntable := dynamodb.NewTable(this, jsii.String(\"montable\"), &TableProps{\n\tPartitionKey: &Attribute{\n\t\tName: jsii.String(\"id\"),\n\t\tType: dynamodb.AttributeType_STRING,\n\t},\n})\n\nfinalStatus := sfn.NewPass(this, jsii.String(\"final step\"))\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstateJson := map[string]interface{}{\n\t\"Type\": jsii.String(\"Task\"),\n\t\"Resource\": jsii.String(\"arn:aws:states:::dynamodb:putItem\"),\n\t\"Parameters\": map[string]interface{}{\n\t\t\"TableName\": table.tableName,\n\t\t\"Item\": map[string]map[string]*string{\n\t\t\t\"id\": map[string]*string{\n\t\t\t\t\"S\": jsii.String(\"MyEntry\"),\n\t\t\t},\n\t\t},\n\t},\n\t\"ResultPath\": nil,\n}\n\n// custom state which represents a task to insert data into DynamoDB\ncustom := sfn.NewCustomState(this, jsii.String(\"my custom task\"), &CustomStateProps{\n\tStateJson: StateJson,\n})\n\nchain := sfn.Chain_Start(custom).Next(finalStatus)\n\nsm := sfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: chain,\n\tTimeout: awscdkcore.Duration_Seconds(jsii.Number(30)),\n})\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm)","version":"1"},"$":{"source":"import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.CustomStateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-dynamodb.Attribute","@aws-cdk/aws-dynamodb.AttributeType","@aws-cdk/aws-dynamodb.AttributeType#STRING","@aws-cdk/aws-dynamodb.Table","@aws-cdk/aws-dynamodb.Table#tableName","@aws-cdk/aws-dynamodb.TableProps","@aws-cdk/aws-iam.IGrantable","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.CustomState","@aws-cdk/aws-stepfunctions.CustomStateProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#seconds","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":9,"75":46,"100":1,"104":4,"193":8,"194":12,"196":4,"197":4,"225":6,"226":1,"242":6,"243":6,"254":1,"255":1,"256":1,"281":13,"282":1,"290":1},"fqnsFingerprint":"269f6078fc1689b57b6fb8ff4e7e4348a4854e0d709b4112fd2ccff74a68b6d9"},"c9350d871334303603cc1d2da2b656c4b520a573c4e3a2f7777e1876cbd53fdd":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nerrors = stepfunctions.Errors()","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar errors = new Errors();","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nErrors errors = new Errors();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nerrors := stepfunctions.NewErrors()","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst errors = new stepfunctions.Errors();","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Errors"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Errors"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst errors = new stepfunctions.Errors();\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":4,"194":1,"197":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"d637b462875f80e0cdd9a0982892b8d5597e754115d573a20189df55a7e55c2b"},"a3a3ab2a65fec7ea762e78cfb44d5388a69ee4eca3156ca3a9bd7bb25ccc3ff4":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda: lambda.Function\n# get_status_lambda: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nvar submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nvar waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nvar getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nvar finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar submitLambda function\nvar getStatusLambda function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Submit Job\"), &LambdaInvokeProps{\n\tLambdaFunction: submitLambda,\n\t// Lambda's result is in the attribute `Payload`\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\nwaitX := sfn.NewWait(this, jsii.String(\"Wait X Seconds\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\ngetStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Pass just the field named \"guid\" into the Lambda, put the\n\t// Lambda's result in a field called \"status\" in the response\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\njobFailed := sfn.NewFail(this, jsii.String(\"Job Failed\"), &FailProps{\n\tCause: jsii.String(\"AWS Batch Job Failed\"),\n\tError: jsii.String(\"DescribeJob returned FAILED\"),\n})\n\nfinalStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Final Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Use \"guid\" field as input\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\ndefinition := submitJob.Next(waitX).Next(getStatus).Next(sfn.NewChoice(this, jsii.String(\"Job Complete?\")).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"FAILED\")), jobFailed).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCEEDED\")), finalStatus).Otherwise(waitX))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n\tTimeout: awscdkcore.Duration_Minutes(jsii.Number(5)),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Fail"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":20,"75":66,"104":7,"130":2,"153":2,"169":2,"193":6,"194":20,"196":10,"197":7,"225":8,"226":1,"242":8,"243":8,"254":1,"255":1,"256":1,"281":12,"282":1,"290":1},"fqnsFingerprint":"4c944ffb8763696561bf43d08c0cccdf86dc10b6bee146083ee98d15a382f58d"},"b00932f61693a3a0e23c8a8a0f44bb9579420dae050fcb5a728dd8990bfa4bc8":{"translations":{"python":{"source":"import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda: lambda.Function\n# get_status_lambda: lambda.Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nvar submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nvar waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nvar getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nvar finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nvar definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();","version":"1"},"go":{"source":"import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\nvar submitLambda function\nvar getStatusLambda function\n\n\nsubmitJob := tasks.NewLambdaInvoke(this, jsii.String(\"Submit Job\"), &LambdaInvokeProps{\n\tLambdaFunction: submitLambda,\n\t// Lambda's result is in the attribute `Payload`\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\nwaitX := sfn.NewWait(this, jsii.String(\"Wait X Seconds\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\ngetStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Pass just the field named \"guid\" into the Lambda, put the\n\t// Lambda's result in a field called \"status\" in the response\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\njobFailed := sfn.NewFail(this, jsii.String(\"Job Failed\"), &FailProps{\n\tCause: jsii.String(\"AWS Batch Job Failed\"),\n\tError: jsii.String(\"DescribeJob returned FAILED\"),\n})\n\nfinalStatus := tasks.NewLambdaInvoke(this, jsii.String(\"Get Final Job Status\"), &LambdaInvokeProps{\n\tLambdaFunction: getStatusLambda,\n\t// Use \"guid\" field as input\n\tInputPath: jsii.String(\"$.guid\"),\n\tOutputPath: jsii.String(\"$.Payload\"),\n})\n\ndefinition := submitJob.Next(waitX).Next(getStatus).Next(sfn.NewChoice(this, jsii.String(\"Job Complete?\")).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"FAILED\")), jobFailed).When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCEEDED\")), finalStatus).Otherwise(waitX))\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: Definition,\n\tTimeout: awscdkcore.Duration_Minutes(jsii.Number(5)),\n})","version":"1"},"$":{"source":"import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.FailProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.Fail","@aws-cdk/aws-stepfunctions.FailProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":20,"75":66,"104":7,"130":2,"153":2,"169":2,"193":6,"194":20,"196":10,"197":7,"225":8,"226":1,"242":8,"243":8,"254":1,"255":1,"256":1,"281":12,"282":1,"290":1},"fqnsFingerprint":"4c944ffb8763696561bf43d08c0cccdf86dc10b6bee146083ee98d15a382f58d"},"9e53ad505d3fb5ccedad28b674eca0f07079c7afb1481a7938366151472f60ee":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nfind_state_options = stepfunctions.FindStateOptions(\n    include_error_handlers=False\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar findStateOptions = new FindStateOptions {\n    IncludeErrorHandlers = false\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nFindStateOptions findStateOptions = FindStateOptions.builder()\n        .includeErrorHandlers(false)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nfindStateOptions := &FindStateOptions{\n\tIncludeErrorHandlers: jsii.Boolean(false),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst findStateOptions: stepfunctions.FindStateOptions = {\n  includeErrorHandlers: false,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.FindStateOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.FindStateOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst findStateOptions: stepfunctions.FindStateOptions = {\n  includeErrorHandlers: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":5,"91":1,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":1,"290":1},"fqnsFingerprint":"7e6cf294a40ec593fab9f993524ad0b0e695857c3ec1abca0ee0ebeaf86d3b70"},"66e705fadf94407eb69cae551815bdff79d32b4703ad8e4e08a0c7dfd15d1bfb":{"translations":{"python":{"source":"# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)","version":"2"},"csharp":{"source":"// Define a state machine with one Pass state\nvar child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nvar task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});","version":"1"},"java":{"source":"// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();","version":"1"},"go":{"source":"// Define a state machine with one Pass state\nchild := sfn.NewStateMachine(this, jsii.String(\"ChildStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"PassState\"))),\n})\n\n// Include the state machine in a Task state with callback pattern\ntask := tasks.NewStepFunctionsStartExecution(this, jsii.String(\"ChildTask\"), &StepFunctionsStartExecutionProps{\n\tStateMachine: child,\n\tIntegrationPattern: sfn.IntegrationPattern_WAIT_FOR_TASK_TOKEN,\n\tInput: sfn.TaskInput_FromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath_taskToken(),\n\t\t\"foo\": jsii.String(\"bar\"),\n\t}),\n\tName: jsii.String(\"MyExecutionName\"),\n})\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nsfn.NewStateMachine(this, jsii.String(\"ParentStateMachine\"), &StateMachineProps{\n\tDefinition: task,\n})","version":"1"},"$":{"source":"// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.IntegrationPattern"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution","@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.IntegrationPattern","@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromObject","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":6,"75":32,"104":4,"193":4,"194":12,"196":2,"197":4,"225":2,"226":1,"242":2,"243":2,"281":8},"fqnsFingerprint":"1ebfb7b792790c9e28e5250ab98e3c4a92e932677385d2fa95a5934023d9aaf9"},"b23ff05f5c3301345c225a10f976eef5f92ec39b1a2982d09a15ddf662be18ed":{"translations":{"python":{"source":"# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    result_selector={\n        \"lambda_output\": sfn.JsonPath.string_at(\"$.Payload\"),\n        \"invoke_request_id\": sfn.JsonPath.string_at(\"$.SdkResponseMetadata.RequestId\"),\n        \"static_value\": {\n            \"foo\": \"bar\"\n        },\n        \"state_name\": sfn.JsonPath.string_at(\"$.State.Name\")\n    }\n)","version":"2"},"csharp":{"source":"Function fn;\n\nnew LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    ResultSelector = new Dictionary<string, object> {\n        { \"lambdaOutput\", JsonPath.StringAt(\"$.Payload\") },\n        { \"invokeRequestId\", JsonPath.StringAt(\"$.SdkResponseMetadata.RequestId\") },\n        { \"staticValue\", new Dictionary<string, string> {\n            { \"foo\", \"bar\" }\n        } },\n        { \"stateName\", JsonPath.StringAt(\"$.State.Name\") }\n    }\n});","version":"1"},"java":{"source":"Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .resultSelector(Map.of(\n                \"lambdaOutput\", JsonPath.stringAt(\"$.Payload\"),\n                \"invokeRequestId\", JsonPath.stringAt(\"$.SdkResponseMetadata.RequestId\"),\n                \"staticValue\", Map.of(\n                        \"foo\", \"bar\"),\n                \"stateName\", JsonPath.stringAt(\"$.State.Name\")))\n        .build();","version":"1"},"go":{"source":"var fn function\n\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke Handler\"), &LambdaInvokeProps{\n\tLambdaFunction: fn,\n\tResultSelector: map[string]interface{}{\n\t\t\"lambdaOutput\": sfn.JsonPath_stringAt(jsii.String(\"$.Payload\")),\n\t\t\"invokeRequestId\": sfn.JsonPath_stringAt(jsii.String(\"$.SdkResponseMetadata.RequestId\")),\n\t\t\"staticValue\": map[string]*string{\n\t\t\t\"foo\": jsii.String(\"bar\"),\n\t\t},\n\t\t\"stateName\": sfn.JsonPath_stringAt(jsii.String(\"$.State.Name\")),\n\t},\n})","version":"1"},"$":{"source":"declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$$.State.Name'),\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.JsonPath"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$.State.Name'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":22,"104":1,"130":1,"153":1,"169":1,"193":3,"194":7,"196":3,"197":1,"225":1,"226":1,"242":1,"243":1,"281":7,"290":1},"fqnsFingerprint":"6898ffbe7e2ff5eb94974176ed6b4f208d2684e81dabe648d39e5d2d394ec3ab"},"4c8f560dabcce59df21819a0479527d9213d2af01c55461843d02cabb3f07836":{"translations":{"python":{"source":"sfn.JsonPath.format(\"Hello, my name is {}.\", sfn.JsonPath.string_at(\"$.name\"))","version":"2"},"csharp":{"source":"JsonPath.Format(\"Hello, my name is {}.\", JsonPath.StringAt(\"$.name\"));","version":"1"},"java":{"source":"JsonPath.format(\"Hello, my name is {}.\", JsonPath.stringAt(\"$.name\"));","version":"1"},"go":{"source":"sfn.JsonPath_Format(jsii.String(\"Hello, my name is {}.\"), sfn.JsonPath_StringAt(jsii.String(\"$.name\")))","version":"1"},"$":{"source":"sfn.JsonPath.format('Hello, my name is {}.', sfn.JsonPath.stringAt('$.name'))","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-stepfunctions.JsonPath","memberName":"format"},"field":{"field":"markdown","line":5}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#format","@aws-cdk/aws-stepfunctions.JsonPath#stringAt"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nsfn.JsonPath.format('Hello, my name is {}.', sfn.JsonPath.stringAt('$.name'))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"194":4,"196":2,"226":1},"fqnsFingerprint":"1addd6beac1f16ff42ff73dd6b4264d10426d58b4d6655a26e7efce7a83c936d"},"929c78da4e1a463c7814ba6bcd6bc0c49660f1c6ced098ce913d44b62b30b418":{"translations":{"python":{"source":"sfn.JsonPath.json_to_string(sfn.JsonPath.object_at(\"$.someObject\"))","version":"2"},"csharp":{"source":"JsonPath.JsonToString(JsonPath.ObjectAt(\"$.someObject\"));","version":"1"},"java":{"source":"JsonPath.jsonToString(JsonPath.objectAt(\"$.someObject\"));","version":"1"},"go":{"source":"sfn.JsonPath_JsonToString(sfn.JsonPath_ObjectAt(jsii.String(\"$.someObject\")))","version":"1"},"$":{"source":"sfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.someObject'))","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-stepfunctions.JsonPath","memberName":"jsonToString"},"field":{"field":"markdown","line":6}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#jsonToString","@aws-cdk/aws-stepfunctions.JsonPath#objectAt"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nsfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.someObject'))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":6,"194":4,"196":2,"226":1},"fqnsFingerprint":"5ffeca6da9655841c32a28473ead7887abab0dc11dc7fd363e09e594d746496c"},"7c6d5332b1955accf0220f77a0a1a47c570793822b54f030652e76e05b8748c4":{"translations":{"python":{"source":"sfn.JsonPath.string_to_json(sfn.JsonPath.string_at(\"$.someJsonBody\"))","version":"2"},"csharp":{"source":"JsonPath.StringToJson(JsonPath.StringAt(\"$.someJsonBody\"));","version":"1"},"java":{"source":"JsonPath.stringToJson(JsonPath.stringAt(\"$.someJsonBody\"));","version":"1"},"go":{"source":"sfn.JsonPath_StringToJson(sfn.JsonPath_StringAt(jsii.String(\"$.someJsonBody\")))","version":"1"},"$":{"source":"sfn.JsonPath.stringToJson(sfn.JsonPath.stringAt('$.someJsonBody'))","version":"0"}},"location":{"api":{"api":"member","fqn":"@aws-cdk/aws-stepfunctions.JsonPath","memberName":"stringToJson"},"field":{"field":"markdown","line":6}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.JsonPath#stringToJson"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nsfn.JsonPath.stringToJson(sfn.JsonPath.stringAt('$.someJsonBody'))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":6,"194":4,"196":2,"226":1},"fqnsFingerprint":"e023d14325a46afddeb86b95a72f196a876125e785480b2781ec45cc34bf072c"},"2babee09883620acaa87c436f7782e033f3d206a2f5af4f82ca0576fee211863":{"translations":{"python":{"source":"import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Logs;\n\n\nvar logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();","version":"1"},"go":{"source":"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyLogGroup\"))\n\nsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"Pass\"))),\n\tLogs: &LogOptions{\n\t\tDestination: logGroup,\n\t\tLevel: sfn.LogLevel_ALL,\n\t},\n})","version":"1"},"$":{"source":"import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.LogLevel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.LogLevel","@aws-cdk/aws-stepfunctions.LogLevel#ALL","@aws-cdk/aws-stepfunctions.LogOptions","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":19,"104":3,"193":2,"194":7,"196":1,"197":3,"225":1,"226":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"9573e2f088154713294145419996b1b3dd6469ab0b3dafb7a0720698b5bf19ac"},"5c5a9c96fb86cb28387a6399d8a17d73de1c421f97dc739830efe139a76313b5":{"translations":{"python":{"source":"import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.Logs;\n\n\nvar logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();","version":"1"},"go":{"source":"import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyLogGroup\"))\n\nsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\tDefinition: sfn.Chain_Start(sfn.NewPass(this, jsii.String(\"Pass\"))),\n\tLogs: &LogOptions{\n\t\tDestination: logGroup,\n\t\tLevel: sfn.LogLevel_ALL,\n\t},\n})","version":"1"},"$":{"source":"import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.LogOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-logs.ILogGroup","@aws-cdk/aws-logs.LogGroup","@aws-cdk/aws-stepfunctions.Chain","@aws-cdk/aws-stepfunctions.Chain#start","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.LogLevel","@aws-cdk/aws-stepfunctions.LogLevel#ALL","@aws-cdk/aws-stepfunctions.LogOptions","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":19,"104":3,"193":2,"194":7,"196":1,"197":3,"225":1,"226":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"9573e2f088154713294145419996b1b3dd6469ab0b3dafb7a0720698b5bf19ac"},"a8a50c0853214999efe2a589b3ea3488993c9ecb5b04054d8579f2d5d3df3953":{"translations":{"python":{"source":"map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))","version":"2"},"csharp":{"source":"var map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));","version":"1"},"java":{"source":"Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));","version":"1"},"go":{"source":"map := sfn.NewMap(this, jsii.String(\"Map State\"), &MapProps{\n\tMaxConcurrency: jsii.Number(1),\n\tItemsPath: sfn.JsonPath_StringAt(jsii.String(\"$.inputForMap\")),\n})\nmap.Iterator(sfn.NewPass(this, jsii.String(\"Pass State\")))","version":"1"},"$":{"source":"const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Map"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.Map","@aws-cdk/aws-stepfunctions.Map#iterator","@aws-cdk/aws-stepfunctions.MapProps","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":12,"104":2,"193":1,"194":5,"196":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"4764bcac4b64fa3599299862edb4c2258e3bb0b44f93a80f00674bcea4357f08"},"5c1d1e08f495f4a0a23eb51d73d9e23cc61872f66a6ed1bb60305c26695929bd":{"translations":{"python":{"source":"map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))","version":"2"},"csharp":{"source":"var map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));","version":"1"},"java":{"source":"Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));","version":"1"},"go":{"source":"map := sfn.NewMap(this, jsii.String(\"Map State\"), &MapProps{\n\tMaxConcurrency: jsii.Number(1),\n\tItemsPath: sfn.JsonPath_StringAt(jsii.String(\"$.inputForMap\")),\n})\nmap.Iterator(sfn.NewPass(this, jsii.String(\"Pass State\")))","version":"1"},"$":{"source":"const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.MapProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.Map","@aws-cdk/aws-stepfunctions.Map#iterator","@aws-cdk/aws-stepfunctions.MapProps","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":3,"75":12,"104":2,"193":1,"194":5,"196":2,"197":2,"225":1,"226":1,"242":1,"243":1,"281":2},"fqnsFingerprint":"4764bcac4b64fa3599299862edb4c2258e3bb0b44f93a80f00674bcea4357f08"},"a20458bcc48d86ecde9cbe51e58ae8c8a14c28c373e4573adc8bdd79ee3d84d0":{"translations":{"python":{"source":"from aws_cdk.core import Stack\nfrom constructs import Construct\nimport aws_cdk.aws_stepfunctions as sfn\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        parallel = sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())\n\n        sfn.StateMachine(self, \"MyStateMachine\",\n            definition=parallel\n        )","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.StepFunctions;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        var choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        var parallel = new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n\n        new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n            Definition = parallel\n        });\n    }\n}","version":"1"},"java":{"source":"import software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        Parallel parallel = new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n\n        StateMachine.Builder.create(this, \"MyStateMachine\")\n                .definition(parallel)\n                .build();\n    }\n}","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\nimport \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntype myJobProps struct {\n\tjobFlavor *string\n}\n\ntype myJob struct {\n\tstateMachineFragment\n\tstartState state\n\tendStates []iNextable\n}\n\nfunc newMyJob(parent construct, id *string, props myJobProps) *myJob {\n\tthis := &myJob{}\n\tsfn.NewStateMachineFragment_Override(this, parent, id)\n\n\tchoice := sfn.NewChoice(this, jsii.String(\"Choice\")).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"left\")), sfn.NewPass(this, jsii.String(\"Left Branch\"))).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"right\")), sfn.NewPass(this, jsii.String(\"Right Branch\")))\n\n\t// ...\n\n\tthis.startState = choice\n\tthis.endStates = choice.Afterwards().EndStates\n\treturn this\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tnewStack_Override(this, scope, id)\n\t// Do 3 different variants of MyJob in parallel\n\tparallel := sfn.NewParallel(this, jsii.String(\"All jobs\")).Branch(NewMyJob(this, jsii.String(\"Quick\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"quick\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Medium\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"medium\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Slow\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"slow\"),\n\t}).PrefixStates())\n\n\tsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\t\tDefinition: parallel,\n\t})\n\treturn this\n}","version":"1"},"$":{"source":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Parallel"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain#endStates","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#afterwards","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineFragment","@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","syntaxKindCounter":{"10":18,"62":2,"75":68,"102":2,"104":10,"119":2,"138":2,"143":3,"153":2,"156":5,"158":1,"159":2,"162":2,"169":5,"174":1,"193":4,"194":22,"196":13,"197":8,"209":2,"216":2,"223":2,"225":2,"226":5,"242":2,"243":2,"245":2,"246":1,"254":3,"255":3,"256":1,"257":2,"258":2,"279":2,"281":4,"290":1},"fqnsFingerprint":"7d47d38fc9f46e1dc27acfc8017f8baa78f65505c802c9c2035781fd7376bdb2"},"1ae9b81acdbbeaf692a791b95caaab360cfc0f2a4d1aedc2b41c3feac4335860":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# result_selector: Any\n\nparallel_props = stepfunctions.ParallelProps(\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\",\n    result_path=\"resultPath\",\n    result_selector={\n        \"result_selector_key\": result_selector\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar resultSelector;\n\nvar parallelProps = new ParallelProps {\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\",\n    ResultPath = \"resultPath\",\n    ResultSelector = new Dictionary<string, object> {\n        { \"resultSelectorKey\", resultSelector }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject resultSelector;\n\nParallelProps parallelProps = ParallelProps.builder()\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .resultPath(\"resultPath\")\n        .resultSelector(Map.of(\n                \"resultSelectorKey\", resultSelector))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar resultSelector interface{}\n\nparallelProps := &ParallelProps{\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n\tResultPath: jsii.String(\"resultPath\"),\n\tResultSelector: map[string]interface{}{\n\t\t\"resultSelectorKey\": resultSelector,\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\nconst parallelProps: stepfunctions.ParallelProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.ParallelProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.ParallelProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parallelProps: stepfunctions.ParallelProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":12,"125":1,"130":1,"153":1,"169":1,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"95fd0514a2659e395f746b11a9c1a133ecafd04e8cb096bf0767ae950dce0185"},"84bef338f74cc53afa2735f2628e390dadd09023dc4f65511fab2563ecd74960":{"translations":{"python":{"source":"choice = sfn.Choice(self, \"Did it work?\")\n\n# Add conditions with .when()\nsuccess_state = sfn.Pass(self, \"SuccessState\")\nfailure_state = sfn.Pass(self, \"FailureState\")\nchoice.when(sfn.Condition.string_equals(\"$.status\", \"SUCCESS\"), success_state)\nchoice.when(sfn.Condition.number_greater_than(\"$.attempts\", 5), failure_state)\n\n# Use .otherwise() to indicate what should be done if none of the conditions match\ntry_again_state = sfn.Pass(self, \"TryAgainState\")\nchoice.otherwise(try_again_state)","version":"2"},"csharp":{"source":"var choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nvar successState = new Pass(this, \"SuccessState\");\nvar failureState = new Pass(this, \"FailureState\");\nchoice.When(Condition.StringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.When(Condition.NumberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nvar tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.Otherwise(tryAgainState);","version":"1"},"java":{"source":"Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.when(Condition.stringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.when(Condition.numberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.otherwise(tryAgainState);","version":"1"},"go":{"source":"choice := sfn.NewChoice(this, jsii.String(\"Did it work?\"))\n\n// Add conditions with .when()\nsuccessState := sfn.NewPass(this, jsii.String(\"SuccessState\"))\nfailureState := sfn.NewPass(this, jsii.String(\"FailureState\"))\nchoice.When(sfn.Condition_StringEquals(jsii.String(\"$.status\"), jsii.String(\"SUCCESS\")), successState)\nchoice.When(sfn.Condition_NumberGreaterThan(jsii.String(\"$.attempts\"), jsii.Number(5)), failureState)\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\ntryAgainState := sfn.NewPass(this, jsii.String(\"TryAgainState\"))\nchoice.Otherwise(tryAgainState)","version":"1"},"$":{"source":"const choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Pass"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#otherwise","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#numberGreaterThan","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":7,"75":27,"104":4,"194":11,"196":5,"197":4,"225":4,"226":3,"242":4,"243":4},"fqnsFingerprint":"19490659feb5886418f427bc51f475d6436694fbdcfb6a868ddfe8f494c77e94"},"761b93ebda88570e8158a3b622f43be62250e6e713e9f1950efc8362899d5648":{"translations":{"python":{"source":"# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)","version":"2"},"csharp":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nvar pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nvar nextState = new Pass(this, \"NextState\");\npass.Next(nextState);","version":"1"},"java":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);","version":"1"},"go":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass := sfn.NewPass(this, jsii.String(\"Add Hello World\"), &PassProps{\n\tResult: sfn.Result_FromObject(map[string]interface{}{\n\t\t\"hello\": jsii.String(\"world\"),\n\t}),\n\tResultPath: jsii.String(\"$.subObject\"),\n})\n\n// Set the next state\nnextState := sfn.NewPass(this, jsii.String(\"NextState\"))\npass.Next(nextState)","version":"1"},"$":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.PassProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.Pass#next","@aws-cdk/aws-stepfunctions.PassProps","@aws-cdk/aws-stepfunctions.Result","@aws-cdk/aws-stepfunctions.Result#fromObject","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":15,"104":2,"193":2,"194":5,"196":2,"197":2,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"fefe753be48ea9a6ceb980d76e9d101aa0685ab95970e02ae59c85e028f94bcb"},"ae668996f0a4ade931519b174b563efaddb29ea597eca5ed6c55d3eff65d860f":{"translations":{"python":{"source":"# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)","version":"2"},"csharp":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nvar pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nvar nextState = new Pass(this, \"NextState\");\npass.Next(nextState);","version":"1"},"java":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);","version":"1"},"go":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass := sfn.NewPass(this, jsii.String(\"Add Hello World\"), &PassProps{\n\tResult: sfn.Result_FromObject(map[string]interface{}{\n\t\t\"hello\": jsii.String(\"world\"),\n\t}),\n\tResultPath: jsii.String(\"$.subObject\"),\n})\n\n// Set the next state\nnextState := sfn.NewPass(this, jsii.String(\"NextState\"))\npass.Next(nextState)","version":"1"},"$":{"source":"// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Result"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.Pass#next","@aws-cdk/aws-stepfunctions.PassProps","@aws-cdk/aws-stepfunctions.Result","@aws-cdk/aws-stepfunctions.Result#fromObject","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":15,"104":2,"193":2,"194":5,"196":2,"197":2,"225":2,"226":1,"242":2,"243":2,"281":3},"fqnsFingerprint":"fefe753be48ea9a6ceb980d76e9d101aa0685ab95970e02ae59c85e028f94bcb"},"ffeda94a617cdf7cead45923fcd48e1fca65511fa20c23e9ce80c7eafcd4ed7f":{"translations":{"python":{"source":"parallel = sfn.Parallel(self, \"Do the work in parallel\")\n\n# Add branches to be executed in parallel\nship_item = sfn.Pass(self, \"ShipItem\")\nsend_invoice = sfn.Pass(self, \"SendInvoice\")\nrestock = sfn.Pass(self, \"Restock\")\nparallel.branch(ship_item)\nparallel.branch(send_invoice)\nparallel.branch(restock)\n\n# Retry the whole workflow if something goes wrong\nparallel.add_retry(max_attempts=1)\n\n# How to recover from errors\nsend_failure_notification = sfn.Pass(self, \"SendFailureNotification\")\nparallel.add_catch(send_failure_notification)\n\n# What to do in case everything succeeded\nclose_order = sfn.Pass(self, \"CloseOrder\")\nparallel.next(close_order)","version":"2"},"csharp":{"source":"var parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nvar shipItem = new Pass(this, \"ShipItem\");\nvar sendInvoice = new Pass(this, \"SendInvoice\");\nvar restock = new Pass(this, \"Restock\");\nparallel.Branch(shipItem);\nparallel.Branch(sendInvoice);\nparallel.Branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(new RetryProps { MaxAttempts = 1 });\n\n// How to recover from errors\nvar sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.AddCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nvar closeOrder = new Pass(this, \"CloseOrder\");\nparallel.Next(closeOrder);","version":"1"},"java":{"source":"Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry(RetryProps.builder().maxAttempts(1).build());\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.next(closeOrder);","version":"1"},"go":{"source":"parallel := sfn.NewParallel(this, jsii.String(\"Do the work in parallel\"))\n\n// Add branches to be executed in parallel\nshipItem := sfn.NewPass(this, jsii.String(\"ShipItem\"))\nsendInvoice := sfn.NewPass(this, jsii.String(\"SendInvoice\"))\nrestock := sfn.NewPass(this, jsii.String(\"Restock\"))\nparallel.Branch(shipItem)\nparallel.Branch(sendInvoice)\nparallel.Branch(restock)\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(&RetryProps{\n\tMaxAttempts: jsii.Number(1),\n})\n\n// How to recover from errors\nsendFailureNotification := sfn.NewPass(this, jsii.String(\"SendFailureNotification\"))\nparallel.AddCatch(sendFailureNotification)\n\n// What to do in case everything succeeded\ncloseOrder := sfn.NewPass(this, jsii.String(\"CloseOrder\"))\nparallel.Next(closeOrder)","version":"1"},"$":{"source":"const parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.RetryProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#addCatch","@aws-cdk/aws-stepfunctions.Parallel#addRetry","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Parallel#next","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.RetryProps","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":6,"75":36,"104":6,"193":1,"194":12,"196":6,"197":6,"225":6,"226":6,"242":6,"243":6,"281":1},"fqnsFingerprint":"e5a09036ef8d25dad5b8e44710a4ee8981e3d59ca68dfd10c8c8c70d3b400b61"},"1e7ba22b7489bb6c92626ad8c2634639e448fdeec61a90962150fe1319e30be7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# result_selector: Any\n\nsingle_state_options = stepfunctions.SingleStateOptions(\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\",\n    prefix_states=\"prefixStates\",\n    result_path=\"resultPath\",\n    result_selector={\n        \"result_selector_key\": result_selector\n    },\n    state_id=\"stateId\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar resultSelector;\n\nvar singleStateOptions = new SingleStateOptions {\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\",\n    PrefixStates = \"prefixStates\",\n    ResultPath = \"resultPath\",\n    ResultSelector = new Dictionary<string, object> {\n        { \"resultSelectorKey\", resultSelector }\n    },\n    StateId = \"stateId\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject resultSelector;\n\nSingleStateOptions singleStateOptions = SingleStateOptions.builder()\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .prefixStates(\"prefixStates\")\n        .resultPath(\"resultPath\")\n        .resultSelector(Map.of(\n                \"resultSelectorKey\", resultSelector))\n        .stateId(\"stateId\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar resultSelector interface{}\n\nsingleStateOptions := &SingleStateOptions{\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n\tPrefixStates: jsii.String(\"prefixStates\"),\n\tResultPath: jsii.String(\"resultPath\"),\n\tResultSelector: map[string]interface{}{\n\t\t\"resultSelectorKey\": resultSelector,\n\t},\n\tStateId: jsii.String(\"stateId\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\nconst singleStateOptions: stepfunctions.SingleStateOptions = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  prefixStates: 'prefixStates',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  stateId: 'stateId',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.SingleStateOptions"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.SingleStateOptions"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const resultSelector: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst singleStateOptions: stepfunctions.SingleStateOptions = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  prefixStates: 'prefixStates',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  stateId: 'stateId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":7,"75":14,"125":1,"130":1,"153":1,"169":1,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":8,"290":1},"fqnsFingerprint":"870adafaae8c2398a3a6af9ce71689d2e5b28faf60925198ef0a7906c3d4d074"},"11bd3e67773cf2358177fc988d3bb9815c9345525b4c34a95c9f4cabf2c6a135":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# state: stepfunctions.State\n\nstate_graph = stepfunctions.StateGraph(state, \"graphDescription\")","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nState state;\n\nvar stateGraph = new StateGraph(state, \"graphDescription\");","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nState state;\n\nStateGraph stateGraph = new StateGraph(state, \"graphDescription\");","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar state state\n\nstateGraph := stepfunctions.NewStateGraph(state, jsii.String(\"graphDescription\"))","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const state: stepfunctions.State;\nconst stateGraph = new stepfunctions.StateGraph(state, 'graphDescription');","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateGraph"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.State","@aws-cdk/aws-stepfunctions.StateGraph"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const state: stepfunctions.State;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stateGraph = new stepfunctions.StateGraph(state, 'graphDescription');\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":8,"130":1,"153":1,"169":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"3fd17fe9069f34df81b0d957dca445ac29d4d6ad3fc0655562c87f342b4e93cf"},"c8b3e3d1b43549474036cbadfad70b627f9360cf6a246f0441f9dbc9785838b0":{"translations":{"python":{"source":"import aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ninput_artifact = codepipeline.Artifact()\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.StepFunctions;\n\n\nvar pipeline = new Pipeline(this, \"MyPipeline\");\nvar inputArtifact = new Artifact();\nvar startState = new Pass(this, \"StartState\");\nvar simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nvar stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.FilePath(inputArtifact.AtPath(\"assets/input.json\"))\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.stepfunctions.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.filePath(inputArtifact.atPath(\"assets/input.json\")))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ninputArtifact := codepipeline.NewArtifact()\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &StateMachineProps{\n\tDefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&StepFunctionsInvokeActionProps{\n\tActionName: jsii.String(\"Invoke\"),\n\tStateMachine: simpleStateMachine,\n\tStateMachineInput: codepipeline_actions.StateMachineInput_FilePath(inputArtifact.AtPath(jsii.String(\"assets/input.json\"))),\n})\npipeline.AddStage(&StageOptions{\n\tStageName: jsii.String(\"StepFunctions\"),\n\tActions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})","version":"1"},"$":{"source":"import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateMachine"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codepipeline-actions.StateMachineInput","@aws-cdk/aws-codepipeline-actions.StateMachineInput#filePath","@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction","@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps","@aws-cdk/aws-codepipeline.Artifact","@aws-cdk/aws-codepipeline.Artifact#atPath","@aws-cdk/aws-codepipeline.ArtifactPath","@aws-cdk/aws-codepipeline.Pipeline","@aws-cdk/aws-codepipeline.Pipeline#addStage","@aws-cdk/aws-codepipeline.StageOptions","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":32,"104":3,"192":1,"193":3,"194":9,"196":3,"197":5,"225":5,"226":1,"242":5,"243":5,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"35d13d74be0627f8ffe708351c2b88638ac05c8e9bb1a695e737445bf6bb7ec4"},"2c391f3f2564c420520d7b603bdda43f1aa07e2bdeb8c74c22b108abde93f15d":{"translations":{"python":{"source":"from aws_cdk.core import Stack\nfrom constructs import Construct\nimport aws_cdk.aws_stepfunctions as sfn\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        parallel = sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())\n\n        sfn.StateMachine(self, \"MyStateMachine\",\n            definition=parallel\n        )","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.StepFunctions;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        var choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        var parallel = new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n\n        new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n            Definition = parallel\n        });\n    }\n}","version":"1"},"java":{"source":"import software.amazon.awscdk.core.Stack;\nimport software.constructs.Construct;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        Parallel parallel = new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n\n        StateMachine.Builder.create(this, \"MyStateMachine\")\n                .definition(parallel)\n                .build();\n    }\n}","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\nimport \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\ntype myJobProps struct {\n\tjobFlavor *string\n}\n\ntype myJob struct {\n\tstateMachineFragment\n\tstartState state\n\tendStates []iNextable\n}\n\nfunc newMyJob(parent construct, id *string, props myJobProps) *myJob {\n\tthis := &myJob{}\n\tsfn.NewStateMachineFragment_Override(this, parent, id)\n\n\tchoice := sfn.NewChoice(this, jsii.String(\"Choice\")).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"left\")), sfn.NewPass(this, jsii.String(\"Left Branch\"))).When(sfn.Condition_StringEquals(jsii.String(\"$.branch\"), jsii.String(\"right\")), sfn.NewPass(this, jsii.String(\"Right Branch\")))\n\n\t// ...\n\n\tthis.startState = choice\n\tthis.endStates = choice.Afterwards().EndStates\n\treturn this\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tnewStack_Override(this, scope, id)\n\t// Do 3 different variants of MyJob in parallel\n\tparallel := sfn.NewParallel(this, jsii.String(\"All jobs\")).Branch(NewMyJob(this, jsii.String(\"Quick\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"quick\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Medium\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"medium\"),\n\t}).PrefixStates()).Branch(NewMyJob(this, jsii.String(\"Slow\"), &myJobProps{\n\t\tjobFlavor: jsii.String(\"slow\"),\n\t}).PrefixStates())\n\n\tsfn.NewStateMachine(this, jsii.String(\"MyStateMachine\"), &StateMachineProps{\n\t\tDefinition: parallel,\n\t})\n\treturn this\n}","version":"1"},"$":{"source":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateMachineFragment"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Chain#endStates","@aws-cdk/aws-stepfunctions.Choice","@aws-cdk/aws-stepfunctions.Choice#afterwards","@aws-cdk/aws-stepfunctions.Choice#when","@aws-cdk/aws-stepfunctions.Condition","@aws-cdk/aws-stepfunctions.Condition#stringEquals","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.Parallel","@aws-cdk/aws-stepfunctions.Parallel#branch","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineFragment","@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/core.Stack","constructs.Construct"],"fullSource":"import { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    const parallel = new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n\n    new sfn.StateMachine(this, 'MyStateMachine', {\n      definition: parallel,\n    });\n  }\n}","syntaxKindCounter":{"10":18,"62":2,"75":68,"102":2,"104":10,"119":2,"138":2,"143":3,"153":2,"156":5,"158":1,"159":2,"162":2,"169":5,"174":1,"193":4,"194":22,"196":13,"197":8,"209":2,"216":2,"223":2,"225":2,"226":5,"242":2,"243":2,"245":2,"246":1,"254":3,"255":3,"256":1,"257":2,"258":2,"279":2,"281":4,"290":1},"fqnsFingerprint":"7d47d38fc9f46e1dc27acfc8017f8baa78f65505c802c9c2035781fd7376bdb2"},"90b500120a67596323986789db002bae179db9f326dd9f6c020111a07a7780b6":{"translations":{"python":{"source":"import aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ninput_artifact = codepipeline.Artifact()\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)","version":"2"},"csharp":{"source":"using Amazon.CDK.AWS.StepFunctions;\n\n\nvar pipeline = new Pipeline(this, \"MyPipeline\");\nvar inputArtifact = new Artifact();\nvar startState = new Pass(this, \"StartState\");\nvar simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nvar stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.FilePath(inputArtifact.AtPath(\"assets/input.json\"))\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});","version":"1"},"java":{"source":"import software.amazon.awscdk.services.stepfunctions.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.filePath(inputArtifact.atPath(\"assets/input.json\")))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ninputArtifact := codepipeline.NewArtifact()\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &StateMachineProps{\n\tDefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&StepFunctionsInvokeActionProps{\n\tActionName: jsii.String(\"Invoke\"),\n\tStateMachine: simpleStateMachine,\n\tStateMachineInput: codepipeline_actions.StateMachineInput_FilePath(inputArtifact.AtPath(jsii.String(\"assets/input.json\"))),\n})\npipeline.AddStage(&StageOptions{\n\tStageName: jsii.String(\"StepFunctions\"),\n\tActions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})","version":"1"},"$":{"source":"import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateMachineProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-codepipeline-actions.StateMachineInput","@aws-cdk/aws-codepipeline-actions.StateMachineInput#filePath","@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction","@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps","@aws-cdk/aws-codepipeline.Artifact","@aws-cdk/aws-codepipeline.Artifact#atPath","@aws-cdk/aws-codepipeline.ArtifactPath","@aws-cdk/aws-codepipeline.Pipeline","@aws-cdk/aws-codepipeline.Pipeline#addStage","@aws-cdk/aws-codepipeline.StageOptions","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":7,"75":32,"104":3,"192":1,"193":3,"194":9,"196":3,"197":5,"225":5,"226":1,"242":5,"243":5,"254":1,"255":1,"256":1,"281":6,"290":1},"fqnsFingerprint":"35d13d74be0627f8ffe708351c2b88638ac05c8e9bb1a695e737445bf6bb7ec4"},"0d309e596de8b85832f2e3ea487506702d96eb5833abb4e10653ffda38a87ffa":{"translations":{"python":{"source":"state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)","version":"2"},"csharp":{"source":"var stateMachineDefinition = new Pass(this, \"PassState\");\n\nvar stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});","version":"1"},"java":{"source":"Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();","version":"1"},"go":{"source":"stateMachineDefinition := stepfunctions.NewPass(this, jsii.String(\"PassState\"))\n\nstateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: stateMachineDefinition,\n\tStateMachineType: stepfunctions.StateMachineType_EXPRESS,\n})\n\napigateway.NewStepFunctionsRestApi(this, jsii.String(\"StepFunctionsRestApi\"), &StepFunctionsRestApiProps{\n\tDeploy: jsii.Boolean(true),\n\tStateMachine: stateMachine,\n})","version":"1"},"$":{"source":"const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateMachineType"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-apigateway.StepFunctionsRestApi","@aws-cdk/aws-apigateway.StepFunctionsRestApiProps","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.IStateMachine","@aws-cdk/aws-stepfunctions.Pass","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.StateMachineType","@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":19,"104":3,"106":1,"153":1,"169":1,"193":2,"194":5,"197":3,"225":2,"226":1,"242":2,"243":2,"281":4},"fqnsFingerprint":"ee5c8f5600946c6b561ea2869e1e3b205d70e8931131fc3fbee3a1fcb494fdfa"},"87fa1a675210cce84cef80b778a0d7258ce037b49093ce04e934884f3d257b7f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# parameters: Any\n# result_selector: Any\n\nstate_props = stepfunctions.StateProps(\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\",\n    parameters={\n        \"parameters_key\": parameters\n    },\n    result_path=\"resultPath\",\n    result_selector={\n        \"result_selector_key\": result_selector\n    }\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar parameters;\nvar resultSelector;\n\nvar stateProps = new StateProps {\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\",\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    },\n    ResultPath = \"resultPath\",\n    ResultSelector = new Dictionary<string, object> {\n        { \"resultSelectorKey\", resultSelector }\n    }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject parameters;\nObject resultSelector;\n\nStateProps stateProps = StateProps.builder()\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .resultPath(\"resultPath\")\n        .resultSelector(Map.of(\n                \"resultSelectorKey\", resultSelector))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar parameters interface{}\nvar resultSelector interface{}\n\nstateProps := &StateProps{\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n\tParameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n\tResultPath: jsii.String(\"resultPath\"),\n\tResultSelector: map[string]interface{}{\n\t\t\"resultSelectorKey\": resultSelector,\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const parameters: any;\ndeclare const resultSelector: any;\nconst stateProps: stepfunctions.StateProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.StateProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const parameters: any;\ndeclare const resultSelector: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stateProps: stepfunctions.StateProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":5,"75":16,"125":2,"130":2,"153":1,"169":1,"193":3,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":8,"290":1},"fqnsFingerprint":"4bab3f2e94206cf06d31a0f490c59b4894a76380c141550d6f767aac6c28068d"},"803a63e70232c580bb13a70e4b3dedfc7c13a9d6954eb2e9d9ec98a5f8081b12":{"translations":{"python":{"source":"cloudwatch.Alarm(self, \"ThrottledAlarm\",\n    metric=sfn.StateTransitionMetric.metric_throttled_events(),\n    threshold=10,\n    evaluation_periods=2\n)","version":"2"},"csharp":{"source":"new Alarm(this, \"ThrottledAlarm\", new AlarmProps {\n    Metric = StateTransitionMetric.MetricThrottledEvents(),\n    Threshold = 10,\n    EvaluationPeriods = 2\n});","version":"1"},"java":{"source":"Alarm.Builder.create(this, \"ThrottledAlarm\")\n        .metric(StateTransitionMetric.metricThrottledEvents())\n        .threshold(10)\n        .evaluationPeriods(2)\n        .build();","version":"1"},"go":{"source":"cloudwatch.NewAlarm(this, jsii.String(\"ThrottledAlarm\"), &AlarmProps{\n\tMetric: sfn.StateTransitionMetric_MetricThrottledEvents(),\n\tThreshold: jsii.Number(10),\n\tEvaluationPeriods: jsii.Number(2),\n})","version":"1"},"$":{"source":"new cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StateTransitionMetric"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-cloudwatch.Alarm","@aws-cdk/aws-cloudwatch.AlarmProps","@aws-cdk/aws-cloudwatch.IMetric","@aws-cdk/aws-stepfunctions.StateTransitionMetric","@aws-cdk/aws-stepfunctions.StateTransitionMetric#metricThrottledEvents","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":2,"10":1,"75":8,"104":1,"193":1,"194":3,"196":1,"197":1,"226":1,"281":3},"fqnsFingerprint":"3918461778425d4d688416091c4989d89a6e3df74471e803b2f1a3dca1dbd68e"},"12901d239000bd13c49a15cd1d60947ec20b9488ec1b078165e2e293036206a7":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.core as cdk\n\n# metric_dimensions: Any\n# parameters: Any\n# policy_statement: iam.PolicyStatement\n\nstep_functions_task_config = stepfunctions.StepFunctionsTaskConfig(\n    resource_arn=\"resourceArn\",\n\n    # the properties below are optional\n    heartbeat=cdk.Duration.minutes(30),\n    metric_dimensions={\n        \"metric_dimensions_key\": metric_dimensions\n    },\n    metric_prefix_plural=\"metricPrefixPlural\",\n    metric_prefix_singular=\"metricPrefixSingular\",\n    parameters={\n        \"parameters_key\": parameters\n    },\n    policy_statements=[policy_statement]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK;\n\nvar metricDimensions;\nvar parameters;\nPolicyStatement policyStatement;\nvar stepFunctionsTaskConfig = new StepFunctionsTaskConfig {\n    ResourceArn = \"resourceArn\",\n\n    // the properties below are optional\n    Heartbeat = Duration.Minutes(30),\n    MetricDimensions = new Dictionary<string, object> {\n        { \"metricDimensionsKey\", metricDimensions }\n    },\n    MetricPrefixPlural = \"metricPrefixPlural\",\n    MetricPrefixSingular = \"metricPrefixSingular\",\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    },\n    PolicyStatements = new [] { policyStatement }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.core.*;\n\nObject metricDimensions;\nObject parameters;\nPolicyStatement policyStatement;\n\nStepFunctionsTaskConfig stepFunctionsTaskConfig = StepFunctionsTaskConfig.builder()\n        .resourceArn(\"resourceArn\")\n\n        // the properties below are optional\n        .heartbeat(Duration.minutes(30))\n        .metricDimensions(Map.of(\n                \"metricDimensionsKey\", metricDimensions))\n        .metricPrefixPlural(\"metricPrefixPlural\")\n        .metricPrefixSingular(\"metricPrefixSingular\")\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .policyStatements(List.of(policyStatement))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar metricDimensions interface{}\nvar parameters interface{}\nvar policyStatement policyStatement\n\nstepFunctionsTaskConfig := &StepFunctionsTaskConfig{\n\tResourceArn: jsii.String(\"resourceArn\"),\n\n\t// the properties below are optional\n\tHeartbeat: cdk.Duration_Minutes(jsii.Number(30)),\n\tMetricDimensions: map[string]interface{}{\n\t\t\"metricDimensionsKey\": metricDimensions,\n\t},\n\tMetricPrefixPlural: jsii.String(\"metricPrefixPlural\"),\n\tMetricPrefixSingular: jsii.String(\"metricPrefixSingular\"),\n\tParameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n\tPolicyStatements: []*policyStatement{\n\t\tpolicyStatement,\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metricDimensions: any;\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\nconst stepFunctionsTaskConfig: stepfunctions.StepFunctionsTaskConfig = {\n  resourceArn: 'resourceArn',\n\n  // the properties below are optional\n  heartbeat: cdk.Duration.minutes(30),\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n  parameters: {\n    parametersKey: parameters,\n  },\n  policyStatements: [policyStatement],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metricDimensions: any;\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stepFunctionsTaskConfig: stepfunctions.StepFunctionsTaskConfig = {\n  resourceArn: 'resourceArn',\n\n  // the properties below are optional\n  heartbeat: cdk.Duration.minutes(30),\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n  parameters: {\n    parametersKey: parameters,\n  },\n  policyStatements: [policyStatement],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":6,"75":26,"125":2,"130":3,"153":2,"169":2,"192":1,"193":3,"194":2,"196":1,"225":4,"242":4,"243":4,"254":3,"255":3,"256":3,"281":9,"290":1},"fqnsFingerprint":"76eb4198ce71798a3f1072d4135800e923cce9c484488e39cb133f0eca221017"},"1258642c2356f96ab2dc36159d651a2c6e87893e3559daca6d12d493fa413d6e":{"translations":{"python":{"source":"success = sfn.Succeed(self, \"We did it!\")","version":"2"},"csharp":{"source":"var success = new Succeed(this, \"We did it!\");","version":"1"},"java":{"source":"Succeed success = new Succeed(this, \"We did it!\");","version":"1"},"go":{"source":"success := sfn.NewSucceed(this, jsii.String(\"We did it!\"))","version":"1"},"$":{"source":"const success = new sfn.Succeed(this, 'We did it!');","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Succeed"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.Succeed","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Succeed(this, 'We did it!');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":3,"104":1,"194":1,"197":1,"225":1,"242":1,"243":1},"fqnsFingerprint":"1217a8491ecc638e35af95f19c5761ed554608a64e41ab6703d0c2330e0615e6"},"2c670735ce5207d5ebd844b33b78e1dbba4bb616299fff83837dd65e67f7915a":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\nsucceed_props = stepfunctions.SucceedProps(\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar succeedProps = new SucceedProps {\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nSucceedProps succeedProps = SucceedProps.builder()\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nsucceedProps := &SucceedProps{\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst succeedProps: stepfunctions.SucceedProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.SucceedProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.SucceedProps"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst succeedProps: stepfunctions.SucceedProps = {\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":4,"75":7,"153":1,"169":1,"193":1,"225":1,"242":1,"243":1,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"b1c911e3e860d43653b749936cd1b7a55358977e37202ea558b687a9cdfac264"},"85ec1bc138565f2dc612949dc9d9b31130d2f971574a9f72a644dbd0753db857":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.core as cdk\n\n# parameters: Any\n# step_functions_task: stepfunctions.IStepFunctionsTask\n\ntask = stepfunctions.Task(self, \"MyTask\",\n    task=step_functions_task,\n\n    # the properties below are optional\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\",\n    parameters={\n        \"parameters_key\": parameters\n    },\n    result_path=\"resultPath\",\n    timeout=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK;\n\nvar parameters;\nIStepFunctionsTask stepFunctionsTask;\nvar task = new Task(this, \"MyTask\", new TaskProps {\n    Task = stepFunctionsTask,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\",\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    },\n    ResultPath = \"resultPath\",\n    Timeout = Duration.Minutes(30)\n});","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.core.*;\n\nObject parameters;\nIStepFunctionsTask stepFunctionsTask;\n\nTask task = Task.Builder.create(this, \"MyTask\")\n        .task(stepFunctionsTask)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .resultPath(\"resultPath\")\n        .timeout(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar parameters interface{}\nvar stepFunctionsTask iStepFunctionsTask\n\ntask := stepfunctions.NewTask(this, jsii.String(\"MyTask\"), &TaskProps{\n\tTask: stepFunctionsTask,\n\n\t// the properties below are optional\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n\tParameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n\tResultPath: jsii.String(\"resultPath\"),\n\tTimeout: cdk.Duration_Minutes(jsii.Number(30)),\n})","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\nconst task = new stepfunctions.Task(this, 'MyTask', {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Task"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IStepFunctionsTask","@aws-cdk/aws-stepfunctions.Task","@aws-cdk/aws-stepfunctions.TaskProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst task = new stepfunctions.Task(this, 'MyTask', {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":7,"75":22,"104":1,"125":1,"130":2,"153":1,"169":1,"193":2,"194":3,"196":1,"197":1,"225":3,"242":3,"243":3,"254":2,"255":2,"256":2,"281":8,"290":1},"fqnsFingerprint":"02688cab4aa6b36b67f6b1e8c7c4156dcd2abd298a280893ef6cb37c74ae7cfc"},"a46b16020486ca23fd452eecd456ee685ddd5942d2d57f97be542da6a9073a8d":{"translations":{"python":{"source":"# fn: lambda.Function\n\ntasks.LambdaInvoke(self, \"Invoke with callback\",\n    lambda_function=fn,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    payload=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"input\": sfn.JsonPath.string_at(\"$.someField\")\n    })\n)","version":"2"},"csharp":{"source":"Function fn;\n\nnew LambdaInvoke(this, \"Invoke with callback\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"input\", JsonPath.StringAt(\"$.someField\") }\n    })\n});","version":"1"},"java":{"source":"Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke with callback\")\n        .lambdaFunction(fn)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .payload(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"input\", JsonPath.stringAt(\"$.someField\"))))\n        .build();","version":"1"},"go":{"source":"var fn function\n\ntasks.NewLambdaInvoke(this, jsii.String(\"Invoke with callback\"), &LambdaInvokeProps{\n\tLambdaFunction: fn,\n\tIntegrationPattern: sfn.IntegrationPattern_WAIT_FOR_TASK_TOKEN,\n\tPayload: sfn.TaskInput_FromObject(map[string]interface{}{\n\t\t\"token\": sfn.JsonPath_taskToken(),\n\t\t\"input\": sfn.JsonPath_stringAt(jsii.String(\"$.someField\")),\n\t}),\n})","version":"1"},"$":{"source":"declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.TaskInput"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.IFunction","@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke","@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps","@aws-cdk/aws-stepfunctions.IntegrationPattern","@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN","@aws-cdk/aws-stepfunctions.JsonPath","@aws-cdk/aws-stepfunctions.JsonPath#stringAt","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromObject","constructs.Construct"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":23,"104":1,"130":1,"153":1,"169":1,"193":2,"194":9,"196":2,"197":1,"225":1,"226":1,"242":1,"243":1,"281":5,"290":1},"fqnsFingerprint":"b59be824d028ea3a074c7467a42147b06978cb974b2c3a0e864b81b3b5fb8fd4"},"2fde37df56b9dd312f28b3ee16ca25be3ff44899cb744de975cedba72b296b1f":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n# metric_dimensions: Any\n\ntask_metrics_config = stepfunctions.TaskMetricsConfig(\n    metric_dimensions={\n        \"metric_dimensions_key\": metric_dimensions\n    },\n    metric_prefix_plural=\"metricPrefixPlural\",\n    metric_prefix_singular=\"metricPrefixSingular\"\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\n\nvar metricDimensions;\n\nvar taskMetricsConfig = new TaskMetricsConfig {\n    MetricDimensions = new Dictionary<string, object> {\n        { \"metricDimensionsKey\", metricDimensions }\n    },\n    MetricPrefixPlural = \"metricPrefixPlural\",\n    MetricPrefixSingular = \"metricPrefixSingular\"\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\n\nObject metricDimensions;\n\nTaskMetricsConfig taskMetricsConfig = TaskMetricsConfig.builder()\n        .metricDimensions(Map.of(\n                \"metricDimensionsKey\", metricDimensions))\n        .metricPrefixPlural(\"metricPrefixPlural\")\n        .metricPrefixSingular(\"metricPrefixSingular\")\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\nvar metricDimensions interface{}\n\ntaskMetricsConfig := &TaskMetricsConfig{\n\tMetricDimensions: map[string]interface{}{\n\t\t\"metricDimensionsKey\": metricDimensions,\n\t},\n\tMetricPrefixPlural: jsii.String(\"metricPrefixPlural\"),\n\tMetricPrefixSingular: jsii.String(\"metricPrefixSingular\"),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const metricDimensions: any;\nconst taskMetricsConfig: stepfunctions.TaskMetricsConfig = {\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.TaskMetricsConfig"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.TaskMetricsConfig"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\ndeclare const metricDimensions: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskMetricsConfig: stepfunctions.TaskMetricsConfig = {\n  metricDimensions: {\n    metricDimensionsKey: metricDimensions,\n  },\n  metricPrefixPlural: 'metricPrefixPlural',\n  metricPrefixSingular: 'metricPrefixSingular',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":10,"125":1,"130":1,"153":1,"169":1,"193":2,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":4,"290":1},"fqnsFingerprint":"5899d8a0e3147259cb60e2f1466bdb1372b11be399af4dc4aa56a43fd80a3c40"},"37b62e8d7d494b4b29c4fb88aa053b9682b92598f07f3c60413e0cf61db67ead":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.core as cdk\n\n# parameters: Any\n# step_functions_task: stepfunctions.IStepFunctionsTask\n\ntask_props = stepfunctions.TaskProps(\n    task=step_functions_task,\n\n    # the properties below are optional\n    comment=\"comment\",\n    input_path=\"inputPath\",\n    output_path=\"outputPath\",\n    parameters={\n        \"parameters_key\": parameters\n    },\n    result_path=\"resultPath\",\n    timeout=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK;\n\nvar parameters;\nIStepFunctionsTask stepFunctionsTask;\nvar taskProps = new TaskProps {\n    Task = stepFunctionsTask,\n\n    // the properties below are optional\n    Comment = \"comment\",\n    InputPath = \"inputPath\",\n    OutputPath = \"outputPath\",\n    Parameters = new Dictionary<string, object> {\n        { \"parametersKey\", parameters }\n    },\n    ResultPath = \"resultPath\",\n    Timeout = Duration.Minutes(30)\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.core.*;\n\nObject parameters;\nIStepFunctionsTask stepFunctionsTask;\n\nTaskProps taskProps = TaskProps.builder()\n        .task(stepFunctionsTask)\n\n        // the properties below are optional\n        .comment(\"comment\")\n        .inputPath(\"inputPath\")\n        .outputPath(\"outputPath\")\n        .parameters(Map.of(\n                \"parametersKey\", parameters))\n        .resultPath(\"resultPath\")\n        .timeout(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar parameters interface{}\nvar stepFunctionsTask iStepFunctionsTask\n\ntaskProps := &TaskProps{\n\tTask: stepFunctionsTask,\n\n\t// the properties below are optional\n\tComment: jsii.String(\"comment\"),\n\tInputPath: jsii.String(\"inputPath\"),\n\tOutputPath: jsii.String(\"outputPath\"),\n\tParameters: map[string]interface{}{\n\t\t\"parametersKey\": parameters,\n\t},\n\tResultPath: jsii.String(\"resultPath\"),\n\tTimeout: cdk.Duration_Minutes(jsii.Number(30)),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\nconst taskProps: stepfunctions.TaskProps = {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.TaskProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IStepFunctionsTask","@aws-cdk/aws-stepfunctions.TaskProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const parameters: any;\ndeclare const stepFunctionsTask: stepfunctions.IStepFunctionsTask;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskProps: stepfunctions.TaskProps = {\n  task: stepFunctionsTask,\n\n  // the properties below are optional\n  comment: 'comment',\n  inputPath: 'inputPath',\n  outputPath: 'outputPath',\n  parameters: {\n    parametersKey: parameters,\n  },\n  resultPath: 'resultPath',\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":1,"10":6,"75":22,"125":1,"130":2,"153":2,"169":2,"193":2,"194":2,"196":1,"225":3,"242":3,"243":3,"254":2,"255":2,"256":2,"281":8,"290":1},"fqnsFingerprint":"f1174182063afe103771f5017fea2d979e5665bad4f7afced74716cff5787dfb"},"fb1a2f8cb637d944cfa47db82cd094aae2d7bb0b716a20a4f23183263b3e8665":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_stepfunctions as stepfunctions\nimport aws_cdk.core as cdk\n\n# result_selector: Any\n\ntask_state_base_props = stepfunctions.TaskStateBaseProps(\n    comment=\"comment\",\n    heartbeat=cdk.Duration.minutes(30),\n    input_path=\"inputPath\",\n    integration_pattern=stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n    output_path=\"outputPath\",\n    result_path=\"resultPath\",\n    result_selector={\n        \"result_selector_key\": result_selector\n    },\n    timeout=cdk.Duration.minutes(30)\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK;\n\nvar resultSelector;\nvar taskStateBaseProps = new TaskStateBaseProps {\n    Comment = \"comment\",\n    Heartbeat = Duration.Minutes(30),\n    InputPath = \"inputPath\",\n    IntegrationPattern = IntegrationPattern.REQUEST_RESPONSE,\n    OutputPath = \"outputPath\",\n    ResultPath = \"resultPath\",\n    ResultSelector = new Dictionary<string, object> {\n        { \"resultSelectorKey\", resultSelector }\n    },\n    Timeout = Duration.Minutes(30)\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.core.*;\n\nObject resultSelector;\n\nTaskStateBaseProps taskStateBaseProps = TaskStateBaseProps.builder()\n        .comment(\"comment\")\n        .heartbeat(Duration.minutes(30))\n        .inputPath(\"inputPath\")\n        .integrationPattern(IntegrationPattern.REQUEST_RESPONSE)\n        .outputPath(\"outputPath\")\n        .resultPath(\"resultPath\")\n        .resultSelector(Map.of(\n                \"resultSelectorKey\", resultSelector))\n        .timeout(Duration.minutes(30))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\nimport \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar resultSelector interface{}\n\ntaskStateBaseProps := &TaskStateBaseProps{\n\tComment: jsii.String(\"comment\"),\n\tHeartbeat: cdk.Duration_Minutes(jsii.Number(30)),\n\tInputPath: jsii.String(\"inputPath\"),\n\tIntegrationPattern: stepfunctions.IntegrationPattern_REQUEST_RESPONSE,\n\tOutputPath: jsii.String(\"outputPath\"),\n\tResultPath: jsii.String(\"resultPath\"),\n\tResultSelector: map[string]interface{}{\n\t\t\"resultSelectorKey\": resultSelector,\n\t},\n\tTimeout: cdk.Duration_*Minutes(jsii.Number(30)),\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const resultSelector: any;\nconst taskStateBaseProps: stepfunctions.TaskStateBaseProps = {\n  comment: 'comment',\n  heartbeat: cdk.Duration.minutes(30),\n  inputPath: 'inputPath',\n  integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  timeout: cdk.Duration.minutes(30),\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.TaskStateBaseProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-stepfunctions.IntegrationPattern","@aws-cdk/aws-stepfunctions.IntegrationPattern#REQUEST_RESPONSE","@aws-cdk/aws-stepfunctions.TaskStateBaseProps","@aws-cdk/core.Duration","@aws-cdk/core.Duration#minutes"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const resultSelector: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskStateBaseProps: stepfunctions.TaskStateBaseProps = {\n  comment: 'comment',\n  heartbeat: cdk.Duration.minutes(30),\n  inputPath: 'inputPath',\n  integrationPattern: stepfunctions.IntegrationPattern.REQUEST_RESPONSE,\n  outputPath: 'outputPath',\n  resultPath: 'resultPath',\n  resultSelector: {\n    resultSelectorKey: resultSelector,\n  },\n  timeout: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"8":2,"10":6,"75":25,"125":1,"130":1,"153":1,"169":1,"193":2,"194":6,"196":2,"225":2,"242":2,"243":2,"254":2,"255":2,"256":2,"281":9,"290":1},"fqnsFingerprint":"78c08f045c5d83808937a9cbf4e764c3b271c4875a8fff187b5f8fb04a537d02"},"96c875fdb1cd103cbca4af1d880e7a44957276efc8208001738f0a4a9217b9f8":{"translations":{"python":{"source":"convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)","version":"2"},"csharp":{"source":"var convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nvar createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nvar publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nvar wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});","version":"1"},"java":{"source":"EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();","version":"1"},"go":{"source":"convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &EvaluateExpressionProps{\n\tExpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tResultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &EvaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\tExpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tResultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &SnsPublishProps{\n\tTopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tMessage: sfn.TaskInput_FromJsonPathAt(jsii.String(\"$.message\")),\n\tResultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: convertToSeconds.Next(createMessage).Next(publishMessage).*Next(wait),\n})","version":"1"},"$":{"source":"const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.Wait"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sns.Topic","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps","@aws-cdk/aws-stepfunctions-tasks.SnsPublish","@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":13,"75":42,"104":6,"193":5,"194":15,"196":5,"197":6,"225":4,"226":1,"242":4,"243":4,"281":10},"fqnsFingerprint":"7786bdaecc8665392d171800c8292bf0cd7212281370c90fa739e1b7b9d2957a"},"42cb2d5906acb30b6db3d596a94172e8c2a7524bc6cc593da21039080b335ac2":{"translations":{"python":{"source":"convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)","version":"2"},"csharp":{"source":"var convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nvar createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nvar publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nvar wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});","version":"1"},"java":{"source":"EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();","version":"1"},"go":{"source":"convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &EvaluateExpressionProps{\n\tExpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tResultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &EvaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\tExpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tResultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &SnsPublishProps{\n\tTopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tMessage: sfn.TaskInput_FromJsonPathAt(jsii.String(\"$.message\")),\n\tResultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: convertToSeconds.Next(createMessage).Next(publishMessage).*Next(wait),\n})","version":"1"},"$":{"source":"const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.WaitProps"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sns.Topic","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps","@aws-cdk/aws-stepfunctions-tasks.SnsPublish","@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":13,"75":42,"104":6,"193":5,"194":15,"196":5,"197":6,"225":4,"226":1,"242":4,"243":4,"281":10},"fqnsFingerprint":"7786bdaecc8665392d171800c8292bf0cd7212281370c90fa739e1b7b9d2957a"},"33987d48544a0be8a828c089da3ba36c52676047a95544e80c3303cd45dfbb78":{"translations":{"python":{"source":"convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)","version":"2"},"csharp":{"source":"var convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nvar createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nvar publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nvar wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});","version":"1"},"java":{"source":"EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();","version":"1"},"go":{"source":"convertToSeconds := tasks.NewEvaluateExpression(this, jsii.String(\"Convert to seconds\"), &EvaluateExpressionProps{\n\tExpression: jsii.String(\"$.waitMilliseconds / 1000\"),\n\tResultPath: jsii.String(\"$.waitSeconds\"),\n})\n\ncreateMessage := tasks.NewEvaluateExpression(this, jsii.String(\"Create message\"), &EvaluateExpressionProps{\n\t// Note: this is a string inside a string.\n\tExpression: jsii.String(\"`Now waiting ${$.waitSeconds} seconds...`\"),\n\tRuntime: lambda.Runtime_NODEJS_14_X(),\n\tResultPath: jsii.String(\"$.message\"),\n})\n\npublishMessage := tasks.NewSnsPublish(this, jsii.String(\"Publish message\"), &SnsPublishProps{\n\tTopic: sns.NewTopic(this, jsii.String(\"cool-topic\")),\n\tMessage: sfn.TaskInput_FromJsonPathAt(jsii.String(\"$.message\")),\n\tResultPath: jsii.String(\"$.sns\"),\n})\n\nwait := sfn.NewWait(this, jsii.String(\"Wait\"), &WaitProps{\n\tTime: sfn.WaitTime_SecondsPath(jsii.String(\"$.waitSeconds\")),\n})\n\nsfn.NewStateMachine(this, jsii.String(\"StateMachine\"), &StateMachineProps{\n\tDefinition: convertToSeconds.Next(createMessage).Next(publishMessage).*Next(wait),\n})","version":"1"},"$":{"source":"const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/aws-stepfunctions.WaitTime"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/aws-lambda.Runtime","@aws-cdk/aws-lambda.Runtime#NODEJS_14_X","@aws-cdk/aws-sns.ITopic","@aws-cdk/aws-sns.Topic","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression","@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps","@aws-cdk/aws-stepfunctions-tasks.SnsPublish","@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps","@aws-cdk/aws-stepfunctions.Chain#next","@aws-cdk/aws-stepfunctions.IChainable","@aws-cdk/aws-stepfunctions.StateMachine","@aws-cdk/aws-stepfunctions.StateMachineProps","@aws-cdk/aws-stepfunctions.TaskInput","@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt","@aws-cdk/aws-stepfunctions.TaskStateBase#next","@aws-cdk/aws-stepfunctions.Wait","@aws-cdk/aws-stepfunctions.WaitProps","@aws-cdk/aws-stepfunctions.WaitTime","@aws-cdk/aws-stepfunctions.WaitTime#secondsPath","constructs.Construct"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":13,"75":42,"104":6,"193":5,"194":15,"196":5,"197":6,"225":4,"226":1,"242":4,"243":4,"281":10},"fqnsFingerprint":"7786bdaecc8665392d171800c8292bf0cd7212281370c90fa739e1b7b9d2957a"}}}