"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cannedMetricsForService = void 0;
const canned_metrics_schema_1 = require("./canned-metrics/canned-metrics-schema");
/**
 * Return the list of canned metrics for the given service
 */
function cannedMetricsForService(cloudFormationNamespace) {
    // One metricTemplate has a single set of dimensions, but the same metric NAME
    // may occur in multiple metricTemplates (if it has multiple sets of dimensions)
    const metricTemplates = cannedMetricsIndex()[cloudFormationNamespace] ?? [];
    // First construct almost what we need, but with a single dimension per metric
    const metricsWithDuplicates = flatMap(metricTemplates, metricSet => {
        const dimensions = metricSet.dimensions.map(d => d.dimensionName);
        return metricSet.metrics.map(metric => ({
            namespace: metricSet.namespace,
            dimensions,
            metricName: metric.name,
            defaultStat: metric.defaultStat,
        }));
    });
    // Then combine the dimensions for the same metrics into a single list
    return groupBy(metricsWithDuplicates, m => `${m.namespace}/${m.metricName}`).map(metrics => ({
        namespace: metrics[0].namespace,
        metricName: metrics[0].metricName,
        defaultStat: metrics[0].defaultStat,
        dimensions: Array.from(dedupeStringLists(metrics.map(m => m.dimensions))),
    }));
}
exports.cannedMetricsForService = cannedMetricsForService;
let cannedMetricsCache;
/**
 * Load the canned metrics file and process it into an index, grouped by service namespace
 */
function cannedMetricsIndex() {
    if (cannedMetricsCache === undefined) {
        cannedMetricsCache = {};
        for (const group of canned_metrics_schema_1.loadCannedMetricsFile()) {
            for (const metricTemplate of group.metricTemplates) {
                const [aws, service] = metricTemplate.resourceType.split('::');
                const serviceKey = [aws, service].join('::');
                (cannedMetricsCache[serviceKey] ?? (cannedMetricsCache[serviceKey] = [])).push(metricTemplate);
            }
        }
    }
    return cannedMetricsCache;
}
function flatMap(xs, fn) {
    return Array.prototype.concat.apply([], xs.map(fn));
}
function groupBy(xs, keyFn) {
    const obj = {};
    for (const x of xs) {
        const key = keyFn(x);
        if (key in obj) {
            obj[key].push(x);
        }
        else {
            obj[key] = [x];
        }
    }
    return Object.values(obj);
}
function* dedupeStringLists(xs) {
    const seen = new Set();
    for (const x of xs) {
        x.sort();
        const key = `${x.join(',')}`;
        if (!seen.has(key)) {
            yield x;
        }
        seen.add(key);
    }
}
//# sourceMappingURL=data:application/json;base64,