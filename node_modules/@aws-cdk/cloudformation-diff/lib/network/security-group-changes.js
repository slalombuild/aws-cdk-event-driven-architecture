"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupChanges = void 0;
const chalk = require("chalk");
const security_group_rule_1 = require("./security-group-rule");
const diffable_1 = require("../diffable");
const render_intrinsics_1 = require("../render-intrinsics");
const util_1 = require("../util");
/**
 * Changes to IAM statements
 */
class SecurityGroupChanges {
    constructor(props) {
        this.ingress = new diffable_1.DiffableCollection();
        this.egress = new diffable_1.DiffableCollection();
        // Group rules
        for (const ingressProp of props.ingressRulePropertyChanges) {
            this.ingress.addOld(...this.readInlineRules(ingressProp.oldValue, ingressProp.resourceLogicalId));
            this.ingress.addNew(...this.readInlineRules(ingressProp.newValue, ingressProp.resourceLogicalId));
        }
        for (const egressProp of props.egressRulePropertyChanges) {
            this.egress.addOld(...this.readInlineRules(egressProp.oldValue, egressProp.resourceLogicalId));
            this.egress.addNew(...this.readInlineRules(egressProp.newValue, egressProp.resourceLogicalId));
        }
        // Rule resources
        for (const ingressRes of props.ingressRuleResourceChanges) {
            this.ingress.addOld(...this.readRuleResource(ingressRes.oldProperties));
            this.ingress.addNew(...this.readRuleResource(ingressRes.newProperties));
        }
        for (const egressRes of props.egressRuleResourceChanges) {
            this.egress.addOld(...this.readRuleResource(egressRes.oldProperties));
            this.egress.addNew(...this.readRuleResource(egressRes.newProperties));
        }
        this.ingress.calculateDiff();
        this.egress.calculateDiff();
    }
    get hasChanges() {
        return this.ingress.hasChanges || this.egress.hasChanges;
    }
    /**
     * Return a summary table of changes
     */
    summarize() {
        const ret = [];
        const header = ['', 'Group', 'Dir', 'Protocol', 'Peer'];
        const inWord = 'In';
        const outWord = 'Out';
        // Render a single rule to the table (curried function so we can map it across rules easily--thank you JavaScript!)
        const renderRule = (plusMin, inOut) => (rule) => [
            plusMin,
            rule.groupId,
            inOut,
            rule.describeProtocol(),
            rule.describePeer(),
        ].map(s => plusMin === '+' ? chalk.green(s) : chalk.red(s));
        // First generate all lines, sort later
        ret.push(...this.ingress.additions.map(renderRule('+', inWord)));
        ret.push(...this.egress.additions.map(renderRule('+', outWord)));
        ret.push(...this.ingress.removals.map(renderRule('-', inWord)));
        ret.push(...this.egress.removals.map(renderRule('-', outWord)));
        // Sort by group name then ingress/egress (ingress first)
        ret.sort(util_1.makeComparator((row) => [row[1], row[2].indexOf(inWord) > -1 ? 0 : 1]));
        ret.splice(0, 0, header);
        return ret;
    }
    toJson() {
        return util_1.deepRemoveUndefined({
            ingressRuleAdditions: util_1.dropIfEmpty(this.ingress.additions.map(s => s.toJson())),
            ingressRuleRemovals: util_1.dropIfEmpty(this.ingress.removals.map(s => s.toJson())),
            egressRuleAdditions: util_1.dropIfEmpty(this.egress.additions.map(s => s.toJson())),
            egressRuleRemovals: util_1.dropIfEmpty(this.egress.removals.map(s => s.toJson())),
        });
    }
    get rulesAdded() {
        return this.ingress.hasAdditions
            || this.egress.hasAdditions;
    }
    readInlineRules(rules, logicalId) {
        if (!rules) {
            return [];
        }
        // UnCloudFormation so the parser works in an easier domain
        const ref = '${' + logicalId + '.GroupId}';
        return rules.map((r) => new security_group_rule_1.SecurityGroupRule(render_intrinsics_1.renderIntrinsics(r), ref));
    }
    readRuleResource(resource) {
        if (!resource) {
            return [];
        }
        // UnCloudFormation so the parser works in an easier domain
        return [new security_group_rule_1.SecurityGroupRule(render_intrinsics_1.renderIntrinsics(resource))];
    }
}
exports.SecurityGroupChanges = SecurityGroupChanges;
//# sourceMappingURL=data:application/json;base64,