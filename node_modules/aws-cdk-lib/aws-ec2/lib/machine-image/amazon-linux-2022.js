"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonLinux2022ImageSsmParameter = exports.AmazonLinux2022Kernel = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("./common");
/**
 * Amazon Linux 2022 kernel versions
 */
class AmazonLinux2022Kernel {
    constructor(version) {
        this.version = version;
    }
    /**
     * Generate a string representation of the kernel
     */
    toString() {
        return `kernel-${this.version}`;
    }
}
_a = JSII_RTTI_SYMBOL_1;
AmazonLinux2022Kernel[_a] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2022Kernel", version: "2.76.0" };
/**
 * The latest kernel version currently available in a published AMI.
 *
 * When a new kernel version is available for an al2022 AMI this will be
 * updated to contain the latest kernel version and will cause your instances
 * to be replaced. Do not store stateful information on the instance if you are
 * using this version.
 */
AmazonLinux2022Kernel.CDK_LATEST = new AmazonLinux2022Kernel('5.15');
/**
 * The default kernel version for Amazon Linux 2022 is 5.15 and
 * the SSM parameter does not include it in the name
 * (i.e. /aws/service/ami-amazon-linux-latest/amzn2022-ami-kernel-default-x86_64)
 */
AmazonLinux2022Kernel.DEFAULT = new AmazonLinux2022Kernel('default');
/**
 * Kernel version 5.15
 */
AmazonLinux2022Kernel.KERNEL_5_15 = new AmazonLinux2022Kernel('5.15');
exports.AmazonLinux2022Kernel = AmazonLinux2022Kernel;
/**
 * A SSM Parameter that contains the AMI ID for Amazon Linux 2023
 */
class AmazonLinux2022ImageSsmParameter extends common_1.AmazonLinuxImageSsmParameterBase {
    /**
     * Generates a SSM Parameter name for a specific amazon linux 2022 AMI
     *
     * Example values:
     *
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-5.15-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-minimal-kernel-5.15-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-minimal-kernel-5.15-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-5.15-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-minimal-kernel-default-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-minimal-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-default-arm64",
     */
    static ssmParameterName(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2022ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.ssmParameterName);
            }
            throw error;
        }
        const edition = (props && props.edition) || common_1.AmazonLinuxEdition.STANDARD;
        const parts = [
            common_1.AmazonLinuxGeneration.AMAZON_LINUX_2022,
            'ami',
            edition !== common_1.AmazonLinuxEdition.STANDARD ? edition : undefined,
            props.kernel?.toString(),
            props.cpuType ?? common_1.AmazonLinuxCpuType.X86_64,
        ].filter(x => !!x);
        return '/aws/service/ami-amazon-linux-latest/' + parts.join('-');
    }
    constructor(props) {
        super({
            parameterName: AmazonLinux2022ImageSsmParameter.ssmParameterName(props),
            cachedInContext: props.cachedInContext,
            userData: props.userData,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2022ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AmazonLinux2022ImageSsmParameter);
            }
            throw error;
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
AmazonLinux2022ImageSsmParameter[_b] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2022ImageSsmParameter", version: "2.76.0" };
exports.AmazonLinux2022ImageSsmParameter = AmazonLinux2022ImageSsmParameter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hem9uLWxpbnV4LTIwMjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbWF6b24tbGludXgtMjAyMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQ0FBc0s7QUFFdEs7O0dBRUc7QUFDSCxNQUFhLHFCQUFxQjtJQXVCaEMsWUFBNkIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7S0FBSztJQUVqRDs7T0FFRztJQUNJLFFBQVE7UUFDYixPQUFPLFVBQVUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2pDOzs7O0FBN0JEOzs7Ozs7O0dBT0c7QUFDb0IsZ0NBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXRFOzs7O0dBSUc7QUFDb0IsNkJBQU8sR0FBRyxJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXRFOztHQUVHO0FBQ29CLGlDQUFXLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQXJCNUQsc0RBQXFCO0FBNkNsQzs7R0FFRztBQUNILE1BQWEsZ0NBQWlDLFNBQVEseUNBQWdDO0lBQ3BGOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBNEM7Ozs7Ozs7Ozs7UUFDekUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUV4RSxNQUFNLEtBQUssR0FBNEI7WUFDckMsOEJBQXFCLENBQUMsaUJBQWlCO1lBQ3ZDLEtBQUs7WUFDTCxPQUFPLEtBQUssMkJBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDN0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7WUFDeEIsS0FBSyxDQUFDLE9BQU8sSUFBSSwyQkFBa0IsQ0FBQyxNQUFNO1NBQzNDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5CLE9BQU8sdUNBQXVDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNsRTtJQUVELFlBQVksS0FBNEM7UUFDdEQsS0FBSyxDQUFDO1lBQ0osYUFBYSxFQUFFLGdDQUFnQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztZQUN2RSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCLENBQUMsQ0FBQzs7Ozs7OytDQWxDTSxnQ0FBZ0M7Ozs7S0FtQzFDOzs7O0FBbkNVLDRFQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFtYXpvbkxpbnV4Q3B1VHlwZSwgQW1hem9uTGludXhFZGl0aW9uLCBBbWF6b25MaW51eEdlbmVyYXRpb24sIEFtYXpvbkxpbnV4SW1hZ2VTc21QYXJhbWV0ZXJDb21tb25PcHRpb25zLCBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQmFzZSB9IGZyb20gJy4vY29tbW9uJztcblxuLyoqXG4gKiBBbWF6b24gTGludXggMjAyMiBrZXJuZWwgdmVyc2lvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEFtYXpvbkxpbnV4MjAyMktlcm5lbCB7XG4gIC8qKlxuICAgKiBUaGUgbGF0ZXN0IGtlcm5lbCB2ZXJzaW9uIGN1cnJlbnRseSBhdmFpbGFibGUgaW4gYSBwdWJsaXNoZWQgQU1JLlxuICAgKlxuICAgKiBXaGVuIGEgbmV3IGtlcm5lbCB2ZXJzaW9uIGlzIGF2YWlsYWJsZSBmb3IgYW4gYWwyMDIyIEFNSSB0aGlzIHdpbGwgYmVcbiAgICogdXBkYXRlZCB0byBjb250YWluIHRoZSBsYXRlc3Qga2VybmVsIHZlcnNpb24gYW5kIHdpbGwgY2F1c2UgeW91ciBpbnN0YW5jZXNcbiAgICogdG8gYmUgcmVwbGFjZWQuIERvIG5vdCBzdG9yZSBzdGF0ZWZ1bCBpbmZvcm1hdGlvbiBvbiB0aGUgaW5zdGFuY2UgaWYgeW91IGFyZVxuICAgKiB1c2luZyB0aGlzIHZlcnNpb24uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENES19MQVRFU1QgPSBuZXcgQW1hem9uTGludXgyMDIyS2VybmVsKCc1LjE1Jyk7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGtlcm5lbCB2ZXJzaW9uIGZvciBBbWF6b24gTGludXggMjAyMiBpcyA1LjE1IGFuZFxuICAgKiB0aGUgU1NNIHBhcmFtZXRlciBkb2VzIG5vdCBpbmNsdWRlIGl0IGluIHRoZSBuYW1lXG4gICAqIChpLmUuIC9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbXpuMjAyMi1hbWkta2VybmVsLWRlZmF1bHQteDg2XzY0KVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBERUZBVUxUID0gbmV3IEFtYXpvbkxpbnV4MjAyMktlcm5lbCgnZGVmYXVsdCcpO1xuXG4gIC8qKlxuICAgKiBLZXJuZWwgdmVyc2lvbiA1LjE1XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEtFUk5FTF81XzE1ID0gbmV3IEFtYXpvbkxpbnV4MjAyMktlcm5lbCgnNS4xNScpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nKSB7IH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGtlcm5lbFxuICAgKi9cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBrZXJuZWwtJHt0aGlzLnZlcnNpb259YDtcbiAgfVxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgc3BlY2lmaWMgdG8gYWwyMDIyIGltYWdlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFtYXpvbkxpbnV4MjAyMkltYWdlU3NtUGFyYW1ldGVyUHJvcHMgZXh0ZW5kcyBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQ29tbW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBXaGF0IGtlcm5lbCB2ZXJzaW9uIG9mIEFtYXpvbiBMaW51eCB0byB1c2VcbiAgICpcbiAgICogQGRlZmF1bHQgQW1hem9uTGludXgyMDIyS2VybmVsLkRFRkFVTFRcbiAgICovXG4gIHJlYWRvbmx5IGtlcm5lbD86IEFtYXpvbkxpbnV4MjAyMktlcm5lbDtcbn1cblxuLyoqXG4gKiBBIFNTTSBQYXJhbWV0ZXIgdGhhdCBjb250YWlucyB0aGUgQU1JIElEIGZvciBBbWF6b24gTGludXggMjAyM1xuICovXG5leHBvcnQgY2xhc3MgQW1hem9uTGludXgyMDIySW1hZ2VTc21QYXJhbWV0ZXIgZXh0ZW5kcyBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQmFzZSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBTU00gUGFyYW1ldGVyIG5hbWUgZm9yIGEgc3BlY2lmaWMgYW1hem9uIGxpbnV4IDIwMjIgQU1JXG4gICAqXG4gICAqIEV4YW1wbGUgdmFsdWVzOlxuICAgKlxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIyLWFtaS1rZXJuZWwtNS4xNS14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMi1hbWkta2VybmVsLWRlZmF1bHQteDg2XzY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjItYW1pLW1pbmltYWwta2VybmVsLTUuMTUtYXJtNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMi1hbWktbWluaW1hbC1rZXJuZWwtNS4xNS14ODZfNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMi1hbWkta2VybmVsLTUuMTUtYXJtNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMi1hbWktbWluaW1hbC1rZXJuZWwtZGVmYXVsdC1hcm02NFwiLFxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIyLWFtaS1taW5pbWFsLWtlcm5lbC1kZWZhdWx0LXg4Nl82NFwiLFxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIyLWFtaS1rZXJuZWwtZGVmYXVsdC1hcm02NFwiLFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzc21QYXJhbWV0ZXJOYW1lKHByb3BzOiBBbWF6b25MaW51eDIwMjJJbWFnZVNzbVBhcmFtZXRlclByb3BzKTogc3RyaW5nIHtcbiAgICBjb25zdCBlZGl0aW9uID0gKHByb3BzICYmIHByb3BzLmVkaXRpb24pIHx8IEFtYXpvbkxpbnV4RWRpdGlvbi5TVEFOREFSRDtcblxuICAgIGNvbnN0IHBhcnRzOiBBcnJheTxzdHJpbmd8dW5kZWZpbmVkPiA9IFtcbiAgICAgIEFtYXpvbkxpbnV4R2VuZXJhdGlvbi5BTUFaT05fTElOVVhfMjAyMixcbiAgICAgICdhbWknLFxuICAgICAgZWRpdGlvbiAhPT0gQW1hem9uTGludXhFZGl0aW9uLlNUQU5EQVJEID8gZWRpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgIHByb3BzLmtlcm5lbD8udG9TdHJpbmcoKSxcbiAgICAgIHByb3BzLmNwdVR5cGUgPz8gQW1hem9uTGludXhDcHVUeXBlLlg4Nl82NCxcbiAgICBdLmZpbHRlcih4ID0+ICEheCk7XG5cbiAgICByZXR1cm4gJy9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC8nICsgcGFydHMuam9pbignLScpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEFtYXpvbkxpbnV4MjAyMkltYWdlU3NtUGFyYW1ldGVyUHJvcHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBwYXJhbWV0ZXJOYW1lOiBBbWF6b25MaW51eDIwMjJJbWFnZVNzbVBhcmFtZXRlci5zc21QYXJhbWV0ZXJOYW1lKHByb3BzKSxcbiAgICAgIGNhY2hlZEluQ29udGV4dDogcHJvcHMuY2FjaGVkSW5Db250ZXh0LFxuICAgICAgdXNlckRhdGE6IHByb3BzLnVzZXJEYXRhLFxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==