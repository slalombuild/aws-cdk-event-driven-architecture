"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonLinux2023ImageSsmParameter = exports.AmazonLinux2023Kernel = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("./common");
/**
 * Amazon Linux 2023 kernel versions
 */
class AmazonLinux2023Kernel {
    constructor(version) {
        this.version = version;
    }
    /**
     * Generate a string representation of the kernel
     */
    toString() {
        return `kernel-${this.version}`;
    }
}
_a = JSII_RTTI_SYMBOL_1;
AmazonLinux2023Kernel[_a] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2023Kernel", version: "2.76.0" };
/**
 * The latest kernel version currently available in a published AMI.
 *
 * When a new kernel version is available for an al2023 AMI this will be
 * updated to contain the latest kernel version and will cause your instances
 * to be replaced. Do not store stateful information on the instance if you are
 * using this version.
 */
AmazonLinux2023Kernel.CDK_LATEST = new AmazonLinux2023Kernel('6.1');
/**
 * The default kernel version for Amazon Linux 2023 is 6.1 and
 * the SSM parameter does not include it in the name
 * (i.e. /aws/service/ami-amazon-linux-latest/amzn2023-ami-kernel-default-x86_64)
 */
AmazonLinux2023Kernel.DEFAULT = new AmazonLinux2023Kernel('default');
/**
 * Kernel version 6.1
 */
AmazonLinux2023Kernel.KERNEL_6_1 = new AmazonLinux2023Kernel('6.1');
exports.AmazonLinux2023Kernel = AmazonLinux2023Kernel;
/**
 * A SSM Parameter that contains the AMI ID for Amazon Linux 2023
 */
class AmazonLinux2023ImageSsmParameter extends common_1.AmazonLinuxImageSsmParameterBase {
    /**
     * Generates a SSM Parameter name for a specific amazon linux 2022 AMI
     *
     * Example values:
     *
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-6.1-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-6.1-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-arm64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64",
     *     "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64",
     */
    static ssmParameterName(props) {
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2023ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.ssmParameterName);
            }
            throw error;
        }
        const edition = (props && props.edition) || common_1.AmazonLinuxEdition.STANDARD;
        const parts = [
            common_1.AmazonLinuxGeneration.AMAZON_LINUX_2023,
            'ami',
            edition !== common_1.AmazonLinuxEdition.STANDARD ? edition : undefined,
            (props.kernel ?? AmazonLinux2023Kernel.DEFAULT)?.toString(),
            props.cpuType ?? common_1.AmazonLinuxCpuType.X86_64,
        ].filter(x => !!x);
        return '/aws/service/ami-amazon-linux-latest/' + parts.join('-');
    }
    constructor(props) {
        super({
            parameterName: AmazonLinux2023ImageSsmParameter.ssmParameterName(props),
            cachedInContext: props.cachedInContext,
            userData: props.userData,
        });
        try {
            jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinux2023ImageSsmParameterProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, AmazonLinux2023ImageSsmParameter);
            }
            throw error;
        }
    }
}
_b = JSII_RTTI_SYMBOL_1;
AmazonLinux2023ImageSsmParameter[_b] = { fqn: "aws-cdk-lib.aws_ec2.AmazonLinux2023ImageSsmParameter", version: "2.76.0" };
exports.AmazonLinux2023ImageSsmParameter = AmazonLinux2023ImageSsmParameter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hem9uLWxpbnV4LTIwMjMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbWF6b24tbGludXgtMjAyMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQ0FBc0s7QUFFdEs7O0dBRUc7QUFDSCxNQUFhLHFCQUFxQjtJQXNCaEMsWUFBNkIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7S0FBSztJQUVqRDs7T0FFRztJQUNJLFFBQVE7UUFDYixPQUFPLFVBQVUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2pDOzs7O0FBNUJEOzs7Ozs7O0dBT0c7QUFDb0IsZ0NBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXJFOzs7O0dBSUc7QUFDb0IsNkJBQU8sR0FBRyxJQUFJLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXRFOztHQUVHO0FBQ29CLGdDQUFVLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQXJCMUQsc0RBQXFCO0FBNkNsQzs7R0FFRztBQUNILE1BQWEsZ0NBQWlDLFNBQVEseUNBQWdDO0lBQ3BGOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBNEM7Ozs7Ozs7Ozs7UUFDekUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUV4RSxNQUFNLEtBQUssR0FBNEI7WUFDckMsOEJBQXFCLENBQUMsaUJBQWlCO1lBQ3ZDLEtBQUs7WUFDTCxPQUFPLEtBQUssMkJBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDN0QsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRTtZQUMzRCxLQUFLLENBQUMsT0FBTyxJQUFJLDJCQUFrQixDQUFDLE1BQU07U0FDM0MsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkIsT0FBTyx1Q0FBdUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsWUFBWSxLQUE0QztRQUN0RCxLQUFLLENBQUM7WUFDSixhQUFhLEVBQUUsZ0NBQWdDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO1lBQ3ZFLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDekIsQ0FBQyxDQUFDOzs7Ozs7K0NBbENNLGdDQUFnQzs7OztLQW1DMUM7Ozs7QUFuQ1UsNEVBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW1hem9uTGludXhDcHVUeXBlLCBBbWF6b25MaW51eEVkaXRpb24sIEFtYXpvbkxpbnV4R2VuZXJhdGlvbiwgQW1hem9uTGludXhJbWFnZVNzbVBhcmFtZXRlckNvbW1vbk9wdGlvbnMsIEFtYXpvbkxpbnV4SW1hZ2VTc21QYXJhbWV0ZXJCYXNlIH0gZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIEFtYXpvbiBMaW51eCAyMDIzIGtlcm5lbCB2ZXJzaW9uc1xuICovXG5leHBvcnQgY2xhc3MgQW1hem9uTGludXgyMDIzS2VybmVsIHtcbiAgLyoqXG4gICAqIFRoZSBsYXRlc3Qga2VybmVsIHZlcnNpb24gY3VycmVudGx5IGF2YWlsYWJsZSBpbiBhIHB1Ymxpc2hlZCBBTUkuXG4gICAqXG4gICAqIFdoZW4gYSBuZXcga2VybmVsIHZlcnNpb24gaXMgYXZhaWxhYmxlIGZvciBhbiBhbDIwMjMgQU1JIHRoaXMgd2lsbCBiZVxuICAgKiB1cGRhdGVkIHRvIGNvbnRhaW4gdGhlIGxhdGVzdCBrZXJuZWwgdmVyc2lvbiBhbmQgd2lsbCBjYXVzZSB5b3VyIGluc3RhbmNlc1xuICAgKiB0byBiZSByZXBsYWNlZC4gRG8gbm90IHN0b3JlIHN0YXRlZnVsIGluZm9ybWF0aW9uIG9uIHRoZSBpbnN0YW5jZSBpZiB5b3UgYXJlXG4gICAqIHVzaW5nIHRoaXMgdmVyc2lvbi5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0RLX0xBVEVTVCA9IG5ldyBBbWF6b25MaW51eDIwMjNLZXJuZWwoJzYuMScpO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBrZXJuZWwgdmVyc2lvbiBmb3IgQW1hem9uIExpbnV4IDIwMjMgaXMgNi4xIGFuZFxuICAgKiB0aGUgU1NNIHBhcmFtZXRlciBkb2VzIG5vdCBpbmNsdWRlIGl0IGluIHRoZSBuYW1lXG4gICAqIChpLmUuIC9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbXpuMjAyMy1hbWkta2VybmVsLWRlZmF1bHQteDg2XzY0KVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBERUZBVUxUID0gbmV3IEFtYXpvbkxpbnV4MjAyM0tlcm5lbCgnZGVmYXVsdCcpO1xuXG4gIC8qKlxuICAgKiBLZXJuZWwgdmVyc2lvbiA2LjFcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgS0VSTkVMXzZfMSA9IG5ldyBBbWF6b25MaW51eDIwMjNLZXJuZWwoJzYuMScpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZykgeyB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBrZXJuZWxcbiAgICovXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBga2VybmVsLSR7dGhpcy52ZXJzaW9ufWA7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHNwZWNpZmljIHRvIGFsMjAyMyBpbWFnZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbWF6b25MaW51eDIwMjNJbWFnZVNzbVBhcmFtZXRlclByb3BzIGV4dGVuZHMgQW1hem9uTGludXhJbWFnZVNzbVBhcmFtZXRlckNvbW1vbk9wdGlvbnMge1xuICAvKipcbiAgICogV2hhdCBrZXJuZWwgdmVyc2lvbiBvZiBBbWF6b24gTGludXggdG8gdXNlXG4gICAqXG4gICAqIEBkZWZhdWx0IEFtYXpvbkxpbnV4MjAyM0tlcm5lbC5ERUZBVUxUXG4gICAqL1xuICByZWFkb25seSBrZXJuZWw/OiBBbWF6b25MaW51eDIwMjNLZXJuZWw7XG59XG5cblxuLyoqXG4gKiBBIFNTTSBQYXJhbWV0ZXIgdGhhdCBjb250YWlucyB0aGUgQU1JIElEIGZvciBBbWF6b24gTGludXggMjAyM1xuICovXG5leHBvcnQgY2xhc3MgQW1hem9uTGludXgyMDIzSW1hZ2VTc21QYXJhbWV0ZXIgZXh0ZW5kcyBBbWF6b25MaW51eEltYWdlU3NtUGFyYW1ldGVyQmFzZSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBTU00gUGFyYW1ldGVyIG5hbWUgZm9yIGEgc3BlY2lmaWMgYW1hem9uIGxpbnV4IDIwMjIgQU1JXG4gICAqXG4gICAqIEV4YW1wbGUgdmFsdWVzOlxuICAgKlxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIzLWFtaS1rZXJuZWwtNi4xLWFybTY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLWtlcm5lbC02LjEteDg2XzY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLW1pbmltYWwta2VybmVsLTYuMS1hcm02NFwiLFxuICAgKiAgICAgXCIvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIzLWFtaS1taW5pbWFsLWtlcm5lbC02LjEteDg2XzY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLW1pbmltYWwta2VybmVsLWRlZmF1bHQtYXJtNjRcIixcbiAgICogICAgIFwiL2F3cy9zZXJ2aWNlL2FtaS1hbWF6b24tbGludXgtbGF0ZXN0L2FsMjAyMy1hbWkta2VybmVsLWRlZmF1bHQteDg2XzY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLW1pbmltYWwta2VybmVsLWRlZmF1bHQteDg2XzY0XCIsXG4gICAqICAgICBcIi9hd3Mvc2VydmljZS9hbWktYW1hem9uLWxpbnV4LWxhdGVzdC9hbDIwMjMtYW1pLWtlcm5lbC1kZWZhdWx0LWFybTY0XCIsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNzbVBhcmFtZXRlck5hbWUocHJvcHM6IEFtYXpvbkxpbnV4MjAyM0ltYWdlU3NtUGFyYW1ldGVyUHJvcHMpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVkaXRpb24gPSAocHJvcHMgJiYgcHJvcHMuZWRpdGlvbikgfHwgQW1hem9uTGludXhFZGl0aW9uLlNUQU5EQVJEO1xuXG4gICAgY29uc3QgcGFydHM6IEFycmF5PHN0cmluZ3x1bmRlZmluZWQ+ID0gW1xuICAgICAgQW1hem9uTGludXhHZW5lcmF0aW9uLkFNQVpPTl9MSU5VWF8yMDIzLFxuICAgICAgJ2FtaScsXG4gICAgICBlZGl0aW9uICE9PSBBbWF6b25MaW51eEVkaXRpb24uU1RBTkRBUkQgPyBlZGl0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgKHByb3BzLmtlcm5lbCA/PyBBbWF6b25MaW51eDIwMjNLZXJuZWwuREVGQVVMVCk/LnRvU3RyaW5nKCksXG4gICAgICBwcm9wcy5jcHVUeXBlID8/IEFtYXpvbkxpbnV4Q3B1VHlwZS5YODZfNjQsXG4gICAgXS5maWx0ZXIoeCA9PiAhIXgpO1xuXG4gICAgcmV0dXJuICcvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvJyArIHBhcnRzLmpvaW4oJy0nKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBBbWF6b25MaW51eDIwMjNJbWFnZVNzbVBhcmFtZXRlclByb3BzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgcGFyYW1ldGVyTmFtZTogQW1hem9uTGludXgyMDIzSW1hZ2VTc21QYXJhbWV0ZXIuc3NtUGFyYW1ldGVyTmFtZShwcm9wcyksXG4gICAgICBjYWNoZWRJbkNvbnRleHQ6IHByb3BzLmNhY2hlZEluQ29udGV4dCxcbiAgICAgIHVzZXJEYXRhOiBwcm9wcy51c2VyRGF0YSxcbiAgICB9KTtcbiAgfVxufVxuIl19