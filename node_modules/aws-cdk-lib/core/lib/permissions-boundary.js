"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsBoundary = exports.PERMISSIONS_BOUNDARY_CONTEXT_KEY = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
exports.PERMISSIONS_BOUNDARY_CONTEXT_KEY = '@aws-cdk/core:permissionsBoundary';
/**
 * Apply a permissions boundary to all IAM Roles and Users
 * within a specific scope
 *
 * A permissions boundary is typically applied at the `Stage` scope.
 * This allows setting different permissions boundaries per Stage. For
 * example, you may _not_ apply a boundary to the `Dev` stage which deploys
 * to a personal dev account, but you _do_ apply the default boundary to the
 * `Prod` stage.
 *
 * It is possible to apply different permissions boundaries to different scopes
 * within your app. In this case the most specifically applied one wins
 *
 * @example
 * // no permissions boundary for dev stage
 * new Stage(app, 'DevStage');
 *
 * // default boundary for prod stage
 * const prodStage = new Stage(app, 'ProdStage', {
 *   permissionsBoundary: PermissionsBoundary.fromName('prod-pb'),
 * });
 *
 * // overriding the pb applied for this stack
 * new Stack(prodStage, 'ProdStack1', {
 *   permissionsBoundary: PermissionsBoundary.fromName('stack-pb'),
 * });
 *
 * // will inherit the permissions boundary from the stage
 * new Stack(prodStage, 'ProdStack2');
 */
class PermissionsBoundary {
    /**
     * Apply a permissions boundary with the given name to all IAM Roles
     * and Users created within a scope.
     *
     * The name can include placeholders for the partition, region, qualifier, and account
     * These placeholders will be replaced with the actual values if available. This requires
     * that the Stack has the environment specified, it does not work with environment
     * agnostic stacks.
     *
     * - '${AWS::Partition}'
     * - '${AWS::Region}'
     * - '${AWS::AccountId}'
     * - '${Qualifier}'
     *
     * @param name the name of the permissions boundary policy
     *
     * @example
     * new Stage(app, 'ProdStage', {
     *   permissionsBoundary: PermissionsBoundary.fromName('my-custom-permissions-boundary'),
     * });
     */
    static fromName(name) {
        return new PermissionsBoundary(name);
    }
    /**
     * Apply a permissions boundary with the given ARN to all IAM Roles
     * and Users created within a scope.
     *
     * The arn can include placeholders for the partition, region, qualifier, and account
     * These placeholders will be replaced with the actual values if available. This requires
     * that the Stack has the environment specified, it does not work with environment
     * agnostic stacks.
     *
     * - '${AWS::Partition}'
     * - '${AWS::Region}'
     * - '${AWS::AccountId}'
     * - '${Qualifier}'
     *
     * @param arn the ARN of the permissions boundary policy
     *
     * @example
     * new Stage(app, 'ProdStage', {
     *   permissionsBoundary: PermissionsBoundary.fromArn('arn:aws:iam::${AWS::AccountId}:policy/my-custom-permissions-boundary'),
     * });
     */
    static fromArn(arn) {
        return new PermissionsBoundary(undefined, arn);
    }
    constructor(policyName, policyArn) {
        this.policyName = policyName;
        this.policyArn = policyArn;
    }
    /**
     * Apply the permissions boundary to the given scope
     *
     * Different permissions boundaries can be applied to different scopes
     * and the most specific will be applied.
     *
     * @internal
     */
    _bind(scope, _options = {}) {
        scope.node.setContext(exports.PERMISSIONS_BOUNDARY_CONTEXT_KEY, {
            name: this.policyName,
            arn: this.policyArn,
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
PermissionsBoundary[_a] = { fqn: "aws-cdk-lib.PermissionsBoundary", version: "2.76.0" };
exports.PermissionsBoundary = PermissionsBoundary;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMtYm91bmRhcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwZXJtaXNzaW9ucy1ib3VuZGFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVhLFFBQUEsZ0NBQWdDLEdBQUcsbUNBQW1DLENBQUM7QUFNcEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkJHO0FBQ0gsTUFBYSxtQkFBbUI7SUFDOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Bb0JHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFZO1FBQ2pDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW9CRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBVztRQUMvQixPQUFPLElBQUksbUJBQW1CLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsWUFBcUMsVUFBbUIsRUFBbUIsU0FBa0I7UUFBeEQsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUFtQixjQUFTLEdBQVQsU0FBUyxDQUFTO0tBQzVGO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxLQUFnQixFQUFFLFdBQTJDLEVBQUU7UUFDMUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsd0NBQWdDLEVBQUU7WUFDdEQsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUztTQUNwQixDQUFDLENBQUM7S0FDSjs7OztBQW5FVSxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGNvbnN0IFBFUk1JU1NJT05TX0JPVU5EQVJZX0NPTlRFWFRfS0VZID0gJ0Bhd3MtY2RrL2NvcmU6cGVybWlzc2lvbnNCb3VuZGFyeSc7XG4vKipcbiAqIE9wdGlvbnMgZm9yIGJpbmRpbmcgYSBQZXJtaXNzaW9ucyBCb3VuZGFyeSB0byBhIGNvbnN0cnVjdCBzY29wZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25zQm91bmRhcnlCaW5kT3B0aW9ucyB7fVxuXG4vKipcbiAqIEFwcGx5IGEgcGVybWlzc2lvbnMgYm91bmRhcnkgdG8gYWxsIElBTSBSb2xlcyBhbmQgVXNlcnNcbiAqIHdpdGhpbiBhIHNwZWNpZmljIHNjb3BlXG4gKlxuICogQSBwZXJtaXNzaW9ucyBib3VuZGFyeSBpcyB0eXBpY2FsbHkgYXBwbGllZCBhdCB0aGUgYFN0YWdlYCBzY29wZS5cbiAqIFRoaXMgYWxsb3dzIHNldHRpbmcgZGlmZmVyZW50IHBlcm1pc3Npb25zIGJvdW5kYXJpZXMgcGVyIFN0YWdlLiBGb3JcbiAqIGV4YW1wbGUsIHlvdSBtYXkgX25vdF8gYXBwbHkgYSBib3VuZGFyeSB0byB0aGUgYERldmAgc3RhZ2Ugd2hpY2ggZGVwbG95c1xuICogdG8gYSBwZXJzb25hbCBkZXYgYWNjb3VudCwgYnV0IHlvdSBfZG9fIGFwcGx5IHRoZSBkZWZhdWx0IGJvdW5kYXJ5IHRvIHRoZVxuICogYFByb2RgIHN0YWdlLlxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGFwcGx5IGRpZmZlcmVudCBwZXJtaXNzaW9ucyBib3VuZGFyaWVzIHRvIGRpZmZlcmVudCBzY29wZXNcbiAqIHdpdGhpbiB5b3VyIGFwcC4gSW4gdGhpcyBjYXNlIHRoZSBtb3N0IHNwZWNpZmljYWxseSBhcHBsaWVkIG9uZSB3aW5zXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIG5vIHBlcm1pc3Npb25zIGJvdW5kYXJ5IGZvciBkZXYgc3RhZ2VcbiAqIG5ldyBTdGFnZShhcHAsICdEZXZTdGFnZScpO1xuICpcbiAqIC8vIGRlZmF1bHQgYm91bmRhcnkgZm9yIHByb2Qgc3RhZ2VcbiAqIGNvbnN0IHByb2RTdGFnZSA9IG5ldyBTdGFnZShhcHAsICdQcm9kU3RhZ2UnLCB7XG4gKiAgIHBlcm1pc3Npb25zQm91bmRhcnk6IFBlcm1pc3Npb25zQm91bmRhcnkuZnJvbU5hbWUoJ3Byb2QtcGInKSxcbiAqIH0pO1xuICpcbiAqIC8vIG92ZXJyaWRpbmcgdGhlIHBiIGFwcGxpZWQgZm9yIHRoaXMgc3RhY2tcbiAqIG5ldyBTdGFjayhwcm9kU3RhZ2UsICdQcm9kU3RhY2sxJywge1xuICogICBwZXJtaXNzaW9uc0JvdW5kYXJ5OiBQZXJtaXNzaW9uc0JvdW5kYXJ5LmZyb21OYW1lKCdzdGFjay1wYicpLFxuICogfSk7XG4gKlxuICogLy8gd2lsbCBpbmhlcml0IHRoZSBwZXJtaXNzaW9ucyBib3VuZGFyeSBmcm9tIHRoZSBzdGFnZVxuICogbmV3IFN0YWNrKHByb2RTdGFnZSwgJ1Byb2RTdGFjazInKTtcbiAqL1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25zQm91bmRhcnkge1xuICAvKipcbiAgICogQXBwbHkgYSBwZXJtaXNzaW9ucyBib3VuZGFyeSB3aXRoIHRoZSBnaXZlbiBuYW1lIHRvIGFsbCBJQU0gUm9sZXNcbiAgICogYW5kIFVzZXJzIGNyZWF0ZWQgd2l0aGluIGEgc2NvcGUuXG4gICAqXG4gICAqIFRoZSBuYW1lIGNhbiBpbmNsdWRlIHBsYWNlaG9sZGVycyBmb3IgdGhlIHBhcnRpdGlvbiwgcmVnaW9uLCBxdWFsaWZpZXIsIGFuZCBhY2NvdW50XG4gICAqIFRoZXNlIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCB2YWx1ZXMgaWYgYXZhaWxhYmxlLiBUaGlzIHJlcXVpcmVzXG4gICAqIHRoYXQgdGhlIFN0YWNrIGhhcyB0aGUgZW52aXJvbm1lbnQgc3BlY2lmaWVkLCBpdCBkb2VzIG5vdCB3b3JrIHdpdGggZW52aXJvbm1lbnRcbiAgICogYWdub3N0aWMgc3RhY2tzLlxuICAgKlxuICAgKiAtICcke0FXUzo6UGFydGl0aW9ufSdcbiAgICogLSAnJHtBV1M6OlJlZ2lvbn0nXG4gICAqIC0gJyR7QVdTOjpBY2NvdW50SWR9J1xuICAgKiAtICcke1F1YWxpZmllcn0nXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBwZXJtaXNzaW9ucyBib3VuZGFyeSBwb2xpY3lcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogbmV3IFN0YWdlKGFwcCwgJ1Byb2RTdGFnZScsIHtcbiAgICogICBwZXJtaXNzaW9uc0JvdW5kYXJ5OiBQZXJtaXNzaW9uc0JvdW5kYXJ5LmZyb21OYW1lKCdteS1jdXN0b20tcGVybWlzc2lvbnMtYm91bmRhcnknKSxcbiAgICogfSk7XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21OYW1lKG5hbWU6IHN0cmluZyk6IFBlcm1pc3Npb25zQm91bmRhcnkge1xuICAgIHJldHVybiBuZXcgUGVybWlzc2lvbnNCb3VuZGFyeShuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIHBlcm1pc3Npb25zIGJvdW5kYXJ5IHdpdGggdGhlIGdpdmVuIEFSTiB0byBhbGwgSUFNIFJvbGVzXG4gICAqIGFuZCBVc2VycyBjcmVhdGVkIHdpdGhpbiBhIHNjb3BlLlxuICAgKlxuICAgKiBUaGUgYXJuIGNhbiBpbmNsdWRlIHBsYWNlaG9sZGVycyBmb3IgdGhlIHBhcnRpdGlvbiwgcmVnaW9uLCBxdWFsaWZpZXIsIGFuZCBhY2NvdW50XG4gICAqIFRoZXNlIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCB2YWx1ZXMgaWYgYXZhaWxhYmxlLiBUaGlzIHJlcXVpcmVzXG4gICAqIHRoYXQgdGhlIFN0YWNrIGhhcyB0aGUgZW52aXJvbm1lbnQgc3BlY2lmaWVkLCBpdCBkb2VzIG5vdCB3b3JrIHdpdGggZW52aXJvbm1lbnRcbiAgICogYWdub3N0aWMgc3RhY2tzLlxuICAgKlxuICAgKiAtICcke0FXUzo6UGFydGl0aW9ufSdcbiAgICogLSAnJHtBV1M6OlJlZ2lvbn0nXG4gICAqIC0gJyR7QVdTOjpBY2NvdW50SWR9J1xuICAgKiAtICcke1F1YWxpZmllcn0nXG4gICAqXG4gICAqIEBwYXJhbSBhcm4gdGhlIEFSTiBvZiB0aGUgcGVybWlzc2lvbnMgYm91bmRhcnkgcG9saWN5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIG5ldyBTdGFnZShhcHAsICdQcm9kU3RhZ2UnLCB7XG4gICAqICAgcGVybWlzc2lvbnNCb3VuZGFyeTogUGVybWlzc2lvbnNCb3VuZGFyeS5mcm9tQXJuKCdhcm46YXdzOmlhbTo6JHtBV1M6OkFjY291bnRJZH06cG9saWN5L215LWN1c3RvbS1wZXJtaXNzaW9ucy1ib3VuZGFyeScpLFxuICAgKiB9KTtcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFybihhcm46IHN0cmluZyk6IFBlcm1pc3Npb25zQm91bmRhcnkge1xuICAgIHJldHVybiBuZXcgUGVybWlzc2lvbnNCb3VuZGFyeSh1bmRlZmluZWQsIGFybik7XG4gIH1cblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcG9saWN5TmFtZT86IHN0cmluZywgcHJpdmF0ZSByZWFkb25seSBwb2xpY3lBcm4/OiBzdHJpbmcpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSB0aGUgcGVybWlzc2lvbnMgYm91bmRhcnkgdG8gdGhlIGdpdmVuIHNjb3BlXG4gICAqXG4gICAqIERpZmZlcmVudCBwZXJtaXNzaW9ucyBib3VuZGFyaWVzIGNhbiBiZSBhcHBsaWVkIHRvIGRpZmZlcmVudCBzY29wZXNcbiAgICogYW5kIHRoZSBtb3N0IHNwZWNpZmljIHdpbGwgYmUgYXBwbGllZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX2JpbmQoc2NvcGU6IENvbnN0cnVjdCwgX29wdGlvbnM6IFBlcm1pc3Npb25zQm91bmRhcnlCaW5kT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgc2NvcGUubm9kZS5zZXRDb250ZXh0KFBFUk1JU1NJT05TX0JPVU5EQVJZX0NPTlRFWFRfS0VZLCB7XG4gICAgICBuYW1lOiB0aGlzLnBvbGljeU5hbWUsXG4gICAgICBhcm46IHRoaXMucG9saWN5QXJuLFxuICAgIH0pO1xuICB9XG59XG4iXX0=