"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructInfoFromStack = exports.constructInfoFromConstruct = void 0;
const app_1 = require("../app");
const stack_1 = require("../stack");
const stage_1 = require("../stage");
const ALLOWED_FQN_PREFIXES = [
    // SCOPES
    '@aws-cdk/', '@aws-cdk-containers/', '@aws-solutions-konstruk/', '@aws-solutions-constructs/', '@amzn/', '@cdklabs/',
    // PACKAGES
    'aws-rfdk.', 'aws-cdk-lib.', 'cdk8s.',
];
/**
 * Symbol for accessing jsii runtime information
 *
 * Introduced in jsii 1.19.0, cdk 1.90.0.
 */
const JSII_RUNTIME_SYMBOL = Symbol.for('jsii.rtti');
function constructInfoFromConstruct(construct) {
    const jsiiRuntimeInfo = Object.getPrototypeOf(construct).constructor[JSII_RUNTIME_SYMBOL];
    if (typeof jsiiRuntimeInfo === 'object'
        && jsiiRuntimeInfo !== null
        && typeof jsiiRuntimeInfo.fqn === 'string'
        && typeof jsiiRuntimeInfo.version === 'string') {
        return { fqn: jsiiRuntimeInfo.fqn, version: jsiiRuntimeInfo.version };
    }
    else if (jsiiRuntimeInfo) {
        // There is something defined, but doesn't match our expectations. Fail fast and hard.
        throw new Error(`malformed jsii runtime info for construct: '${construct.node.path}'`);
    }
    return undefined;
}
exports.constructInfoFromConstruct = constructInfoFromConstruct;
/**
 * Add analytics data for any validation plugins that are used.
 * Since validation plugins are not constructs we have to handle them
 * as a special case
 */
function addValidationPluginInfo(stack, allConstructInfos) {
    let stage = stage_1.Stage.of(stack);
    let done = false;
    do {
        if (app_1.App.isApp(stage)) {
            done = true;
        }
        if (stage) {
            allConstructInfos.push(...stage.policyValidationBeta1.map(plugin => {
                return {
                    fqn: pluginFqn(plugin),
                    version: plugin.version ?? '0.0.0',
                };
            }));
            stage = stage_1.Stage.of(stage);
        }
    } while (!done && stage);
}
/**
 * Returns the fully-qualified name for a validation plugin, in the form:
 *
 *     policyValidation.<plugin-name>[.<rule-ids>]
 *
 * where <rule-ids> is a pipe-separated list of rule IDs.
 */
function pluginFqn(plugin) {
    let components = [
        'policyValidation',
        plugin.name,
        plugin.ruleIds?.join('|'),
    ];
    return components
        .filter(x => x != null)
        .join('.');
}
/**
 * For a given stack, walks the tree and finds the runtime info for all constructs within the tree.
 * Returns the unique list of construct info present in the stack,
 * as long as the construct fully-qualified names match the defined allow list.
 */
function constructInfoFromStack(stack) {
    const isDefined = (value) => value !== undefined;
    const allConstructInfos = constructsInStack(stack)
        .map(construct => constructInfoFromConstruct(construct))
        .filter(isDefined)
        .filter(info => ALLOWED_FQN_PREFIXES.find(prefix => info.fqn.startsWith(prefix)));
    // Adds the jsii runtime as a psuedo construct for reporting purposes.
    allConstructInfos.push({
        fqn: 'jsii-runtime.Runtime',
        version: getJsiiAgentVersion(),
    });
    addValidationPluginInfo(stack, allConstructInfos);
    // Filter out duplicate values
    const uniqKeys = new Set();
    return allConstructInfos.filter(construct => {
        const constructKey = `${construct.fqn}@${construct.version}`;
        const isDuplicate = uniqKeys.has(constructKey);
        uniqKeys.add(constructKey);
        return !isDuplicate;
    });
}
exports.constructInfoFromStack = constructInfoFromStack;
/**
 * Returns all constructs under the parent construct (including the parent),
 * stopping when it reaches a boundary of another stack (e.g., Stack, Stage, NestedStack).
 */
function constructsInStack(construct) {
    const constructs = [construct];
    construct.node.children
        .filter(child => !stage_1.Stage.isStage(child) && !stack_1.Stack.isStack(child))
        .forEach(child => constructs.push(...constructsInStack(child)));
    return constructs;
}
function getJsiiAgentVersion() {
    let jsiiAgent = process.env.JSII_AGENT;
    // if JSII_AGENT is not specified, we will assume this is a node.js runtime
    // and plug in our node.js version
    if (!jsiiAgent) {
        jsiiAgent = `node.js/${process.version}`;
    }
    // Sanitize the agent to remove characters which might mess with the downstream
    // prefix encoding & decoding. In particular the .NET jsii agent takes a form like:
    // DotNet/5.0.3/.NETCoreApp,Version=v3.1/1.0.0.0
    // The `,` in the above messes with the prefix decoding when reporting the analytics.
    jsiiAgent = jsiiAgent.replace(/[^a-z0-9.-/=_]/gi, '-');
    return jsiiAgent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZS1pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnVudGltZS1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGdDQUE2QjtBQUM3QixvQ0FBaUM7QUFDakMsb0NBQWlDO0FBR2pDLE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsU0FBUztJQUNULFdBQVcsRUFBRSxzQkFBc0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsV0FBVztJQUNwSCxXQUFXO0lBQ1gsV0FBVyxFQUFFLGNBQWMsRUFBRSxRQUFRO0NBQ3RDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBVXBELFNBQWdCLDBCQUEwQixDQUFDLFNBQXFCO0lBQzlELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDMUYsSUFBSSxPQUFPLGVBQWUsS0FBSyxRQUFRO1dBQ2xDLGVBQWUsS0FBSyxJQUFJO1dBQ3hCLE9BQU8sZUFBZSxDQUFDLEdBQUcsS0FBSyxRQUFRO1dBQ3ZDLE9BQU8sZUFBZSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7UUFDaEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDdkU7U0FBTSxJQUFJLGVBQWUsRUFBRTtRQUMxQixzRkFBc0Y7UUFDdEYsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0tBQ3hGO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVpELGdFQVlDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsdUJBQXVCLENBQUMsS0FBWSxFQUFFLGlC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T0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvRCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLG1CQUFtQjtJQUMxQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztJQUV2QywyRUFBMkU7SUFDM0Usa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxTQUFTLEdBQUcsV0FBVyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDMUM7SUFFRCwrRUFBK0U7SUFDL0UsbUZBQW1GO0lBQ25GLGdEQUFnRDtJQUNoRCxxRkFBcUY7SUFDckYsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFdkQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4uL2FwcCc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJy4uL3N0YWNrJztcbmltcG9ydCB7IFN0YWdlIH0gZnJvbSAnLi4vc3RhZ2UnO1xuaW1wb3J0IHsgSVBvbGljeVZhbGlkYXRpb25QbHVnaW5CZXRhMSB9IGZyb20gJy4uL3ZhbGlkYXRpb24nO1xuXG5jb25zdCBBTExPV0VEX0ZRTl9QUkVGSVhFUyA9IFtcbiAgLy8gU0NPUEVTXG4gICdAYXdzLWNkay8nLCAnQGF3cy1jZGstY29udGFpbmVycy8nLCAnQGF3cy1zb2x1dGlvbnMta29uc3RydWsvJywgJ0Bhd3Mtc29sdXRpb25zLWNvbnN0cnVjdHMvJywgJ0BhbXpuLycsICdAY2RrbGFicy8nLFxuICAvLyBQQUNLQUdFU1xuICAnYXdzLXJmZGsuJywgJ2F3cy1jZGstbGliLicsICdjZGs4cy4nLFxuXTtcblxuLyoqXG4gKiBTeW1ib2wgZm9yIGFjY2Vzc2luZyBqc2lpIHJ1bnRpbWUgaW5mb3JtYXRpb25cbiAqXG4gKiBJbnRyb2R1Y2VkIGluIGpzaWkgMS4xOS4wLCBjZGsgMS45MC4wLlxuICovXG5jb25zdCBKU0lJX1JVTlRJTUVfU1lNQk9MID0gU3ltYm9sLmZvcignanNpaS5ydHRpJyk7XG5cbi8qKlxuICogU291cmNlIGluZm9ybWF0aW9uIG9uIGEgY29uc3RydWN0IChjbGFzcyBmcW4gYW5kIHZlcnNpb24pXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uc3RydWN0SW5mbyB7XG4gIHJlYWRvbmx5IGZxbjogc3RyaW5nO1xuICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RJbmZvRnJvbUNvbnN0cnVjdChjb25zdHJ1Y3Q6IElDb25zdHJ1Y3QpOiBDb25zdHJ1Y3RJbmZvIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QganNpaVJ1bnRpbWVJbmZvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbnN0cnVjdCkuY29uc3RydWN0b3JbSlNJSV9SVU5USU1FX1NZTUJPTF07XG4gIGlmICh0eXBlb2YganNpaVJ1bnRpbWVJbmZvID09PSAnb2JqZWN0J1xuICAgICYmIGpzaWlSdW50aW1lSW5mbyAhPT0gbnVsbFxuICAgICYmIHR5cGVvZiBqc2lpUnVudGltZUluZm8uZnFuID09PSAnc3RyaW5nJ1xuICAgICYmIHR5cGVvZiBqc2lpUnVudGltZUluZm8udmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBmcW46IGpzaWlSdW50aW1lSW5mby5mcW4sIHZlcnNpb246IGpzaWlSdW50aW1lSW5mby52ZXJzaW9uIH07XG4gIH0gZWxzZSBpZiAoanNpaVJ1bnRpbWVJbmZvKSB7XG4gICAgLy8gVGhlcmUgaXMgc29tZXRoaW5nIGRlZmluZWQsIGJ1dCBkb2Vzbid0IG1hdGNoIG91ciBleHBlY3RhdGlvbnMuIEZhaWwgZmFzdCBhbmQgaGFyZC5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBqc2lpIHJ1bnRpbWUgaW5mbyBmb3IgY29uc3RydWN0OiAnJHtjb25zdHJ1Y3Qubm9kZS5wYXRofSdgKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEFkZCBhbmFseXRpY3MgZGF0YSBmb3IgYW55IHZhbGlkYXRpb24gcGx1Z2lucyB0aGF0IGFyZSB1c2VkLlxuICogU2luY2UgdmFsaWRhdGlvbiBwbHVnaW5zIGFyZSBub3QgY29uc3RydWN0cyB3ZSBoYXZlIHRvIGhhbmRsZSB0aGVtXG4gKiBhcyBhIHNwZWNpYWwgY2FzZVxuICovXG5mdW5jdGlvbiBhZGRWYWxpZGF0aW9uUGx1Z2luSW5mbyhzdGFjazogU3RhY2ssIGFsbENvbnN0cnVjdEluZm9zOiBDb25zdHJ1Y3RJbmZvW10pOiB2b2lkIHtcbiAgbGV0IHN0YWdlID0gU3RhZ2Uub2Yoc3RhY2spO1xuICBsZXQgZG9uZSA9IGZhbHNlO1xuICBkbyB7XG4gICAgaWYgKEFwcC5pc0FwcChzdGFnZSkpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RhZ2UpIHtcbiAgICAgIGFsbENvbnN0cnVjdEluZm9zLnB1c2goLi4uc3RhZ2UucG9saWN5VmFsaWRhdGlvbkJldGExLm1hcChcbiAgICAgICAgcGx1Z2luID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnFuOiBwbHVnaW5GcW4ocGx1Z2luKSxcbiAgICAgICAgICAgIHZlcnNpb246IHBsdWdpbi52ZXJzaW9uID8/ICcwLjAuMCcsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICkpO1xuICAgICAgc3RhZ2UgPSBTdGFnZS5vZihzdGFnZSk7XG4gICAgfVxuICB9IHdoaWxlICghZG9uZSAmJiBzdGFnZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbHktcXVhbGlmaWVkIG5hbWUgZm9yIGEgdmFsaWRhdGlvbiBwbHVnaW4sIGluIHRoZSBmb3JtOlxuICpcbiAqICAgICBwb2xpY3lWYWxpZGF0aW9uLjxwbHVnaW4tbmFtZT5bLjxydWxlLWlkcz5dXG4gKlxuICogd2hlcmUgPHJ1bGUtaWRzPiBpcyBhIHBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgcnVsZSBJRHMuXG4gKi9cbmZ1bmN0aW9uIHBsdWdpbkZxbihwbHVnaW46IElQb2xpY3lWYWxpZGF0aW9uUGx1Z2luQmV0YTEpOiBzdHJpbmcge1xuICBsZXQgY29tcG9uZW50cyA9IFtcbiAgICAncG9saWN5VmFsaWRhdGlvbicsXG4gICAgcGx1Z2luLm5hbWUsXG4gICAgcGx1Z2luLnJ1bGVJZHM/LmpvaW4oJ3wnKSxcbiAgXTtcblxuICByZXR1cm4gY29tcG9uZW50c1xuICAgIC5maWx0ZXIoeCA9PiB4ICE9IG51bGwpXG4gICAgLmpvaW4oJy4nKTtcbn1cblxuLyoqXG4gKiBGb3IgYSBnaXZlbiBzdGFjaywgd2Fsa3MgdGhlIHRyZWUgYW5kIGZpbmRzIHRoZSBydW50aW1lIGluZm8gZm9yIGFsbCBjb25zdHJ1Y3RzIHdpdGhpbiB0aGUgdHJlZS5cbiAqIFJldHVybnMgdGhlIHVuaXF1ZSBsaXN0IG9mIGNvbnN0cnVjdCBpbmZvIHByZXNlbnQgaW4gdGhlIHN0YWNrLFxuICogYXMgbG9uZyBhcyB0aGUgY29uc3RydWN0IGZ1bGx5LXF1YWxpZmllZCBuYW1lcyBtYXRjaCB0aGUgZGVmaW5lZCBhbGxvdyBsaXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0SW5mb0Zyb21TdGFjayhzdGFjazogU3RhY2spOiBDb25zdHJ1Y3RJbmZvW10ge1xuICBjb25zdCBpc0RlZmluZWQgPSAodmFsdWU6IENvbnN0cnVjdEluZm8gfCB1bmRlZmluZWQpOiB2YWx1ZSBpcyBDb25zdHJ1Y3RJbmZvID0+IHZhbHVlICE9PSB1bmRlZmluZWQ7XG5cbiAgY29uc3QgYWxsQ29uc3RydWN0SW5mb3MgPSBjb25zdHJ1Y3RzSW5TdGFjayhzdGFjaylcbiAgICAubWFwKGNvbnN0cnVjdCA9PiBjb25zdHJ1Y3RJbmZvRnJvbUNvbnN0cnVjdChjb25zdHJ1Y3QpKVxuICAgIC5maWx0ZXIoaXNEZWZpbmVkKVxuICAgIC5maWx0ZXIoaW5mbyA9PiBBTExPV0VEX0ZRTl9QUkVGSVhFUy5maW5kKHByZWZpeCA9PiBpbmZvLmZxbi5zdGFydHNXaXRoKHByZWZpeCkpKTtcblxuICAvLyBBZGRzIHRoZSBqc2lpIHJ1bnRpbWUgYXMgYSBwc3VlZG8gY29uc3RydWN0IGZvciByZXBvcnRpbmcgcHVycG9zZXMuXG4gIGFsbENvbnN0cnVjdEluZm9zLnB1c2goe1xuICAgIGZxbjogJ2pzaWktcnVudGltZS5SdW50aW1lJyxcbiAgICB2ZXJzaW9uOiBnZXRKc2lpQWdlbnRWZXJzaW9uKCksXG4gIH0pO1xuXG4gIGFkZFZhbGlkYXRpb25QbHVnaW5JbmZvKHN0YWNrLCBhbGxDb25zdHJ1Y3RJbmZvcyk7XG5cbiAgLy8gRmlsdGVyIG91dCBkdXBsaWNhdGUgdmFsdWVzXG4gIGNvbnN0IHVuaXFLZXlzID0gbmV3IFNldCgpO1xuICByZXR1cm4gYWxsQ29uc3RydWN0SW5mb3MuZmlsdGVyKGNvbnN0cnVjdCA9PiB7XG4gICAgY29uc3QgY29uc3RydWN0S2V5ID0gYCR7Y29uc3RydWN0LmZxbn1AJHtjb25zdHJ1Y3QudmVyc2lvbn1gO1xuICAgIGNvbnN0IGlzRHVwbGljYXRlID0gdW5pcUtleXMuaGFzKGNvbnN0cnVjdEtleSk7XG4gICAgdW5pcUtleXMuYWRkKGNvbnN0cnVjdEtleSk7XG4gICAgcmV0dXJuICFpc0R1cGxpY2F0ZTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbGwgY29uc3RydWN0cyB1bmRlciB0aGUgcGFyZW50IGNvbnN0cnVjdCAoaW5jbHVkaW5nIHRoZSBwYXJlbnQpLFxuICogc3RvcHBpbmcgd2hlbiBpdCByZWFjaGVzIGEgYm91bmRhcnkgb2YgYW5vdGhlciBzdGFjayAoZS5nLiwgU3RhY2ssIFN0YWdlLCBOZXN0ZWRTdGFjaykuXG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdHNJblN0YWNrKGNvbnN0cnVjdDogSUNvbnN0cnVjdCk6IElDb25zdHJ1Y3RbXSB7XG4gIGNvbnN0IGNvbnN0cnVjdHMgPSBbY29uc3RydWN0XTtcbiAgY29uc3RydWN0Lm5vZGUuY2hpbGRyZW5cbiAgICAuZmlsdGVyKGNoaWxkID0+ICFTdGFnZS5pc1N0YWdlKGNoaWxkKSAmJiAhU3RhY2suaXNTdGFjayhjaGlsZCkpXG4gICAgLmZvckVhY2goY2hpbGQgPT4gY29uc3RydWN0cy5wdXNoKC4uLmNvbnN0cnVjdHNJblN0YWNrKGNoaWxkKSkpO1xuICByZXR1cm4gY29uc3RydWN0cztcbn1cblxuZnVuY3Rpb24gZ2V0SnNpaUFnZW50VmVyc2lvbigpIHtcbiAgbGV0IGpzaWlBZ2VudCA9IHByb2Nlc3MuZW52LkpTSUlfQUdFTlQ7XG5cbiAgLy8gaWYgSlNJSV9BR0VOVCBpcyBub3Qgc3BlY2lmaWVkLCB3ZSB3aWxsIGFzc3VtZSB0aGlzIGlzIGEgbm9kZS5qcyBydW50aW1lXG4gIC8vIGFuZCBwbHVnIGluIG91ciBub2RlLmpzIHZlcnNpb25cbiAgaWYgKCFqc2lpQWdlbnQpIHtcbiAgICBqc2lpQWdlbnQgPSBgbm9kZS5qcy8ke3Byb2Nlc3MudmVyc2lvbn1gO1xuICB9XG5cbiAgLy8gU2FuaXRpemUgdGhlIGFnZW50IHRvIHJlbW92ZSBjaGFyYWN0ZXJzIHdoaWNoIG1pZ2h0IG1lc3Mgd2l0aCB0aGUgZG93bnN0cmVhbVxuICAvLyBwcmVmaXggZW5jb2RpbmcgJiBkZWNvZGluZy4gSW4gcGFydGljdWxhciB0aGUgLk5FVCBqc2lpIGFnZW50IHRha2VzIGEgZm9ybSBsaWtlOlxuICAvLyBEb3ROZXQvNS4wLjMvLk5FVENvcmVBcHAsVmVyc2lvbj12My4xLzEuMC4wLjBcbiAgLy8gVGhlIGAsYCBpbiB0aGUgYWJvdmUgbWVzc2VzIHdpdGggdGhlIHByZWZpeCBkZWNvZGluZyB3aGVuIHJlcG9ydGluZyB0aGUgYW5hbHl0aWNzLlxuICBqc2lpQWdlbnQgPSBqc2lpQWdlbnQucmVwbGFjZSgvW15hLXowLTkuLS89X10vZ2ksICctJyk7XG5cbiAgcmV0dXJuIGpzaWlBZ2VudDtcbn1cbiJdfQ==