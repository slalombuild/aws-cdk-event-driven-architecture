"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableAppSyncChange = void 0;
const common_1 = require("./common");
async function isHotswappableAppSyncChange(logicalId, change, evaluateCfnTemplate) {
    const isResolver = change.newValue.Type === 'AWS::AppSync::Resolver';
    const isFunction = change.newValue.Type === 'AWS::AppSync::FunctionConfiguration';
    if (!isResolver && !isFunction) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    for (const updatedPropName in change.propertyUpdates) {
        if (updatedPropName !== 'RequestMappingTemplate' && updatedPropName !== 'ResponseMappingTemplate') {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
    }
    const resourceProperties = change.newValue.Properties;
    if (isResolver && resourceProperties?.Kind === 'PIPELINE') {
        // Pipeline resolvers can't be hotswapped as they reference
        // the FunctionId of the underlying functions, which can't be resolved.
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const resourcePhysicalName = await evaluateCfnTemplate.establishResourcePhysicalName(logicalId, isFunction ? resourceProperties?.Name : undefined);
    if (!resourcePhysicalName) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const evaluatedResourceProperties = await evaluateCfnTemplate.evaluateCfnExpression(resourceProperties);
    const sdkCompatibleResourceProperties = common_1.transformObjectKeys(evaluatedResourceProperties, common_1.lowerCaseFirstCharacter);
    if (isResolver) {
        // Resolver physical name is the ARN in the format:
        // arn:aws:appsync:us-east-1:111111111111:apis/<apiId>/types/<type>/resolvers/<field>.
        // We'll use `<type>.<field>` as the resolver name.
        const arnParts = resourcePhysicalName.split('/');
        const resolverName = `${arnParts[3]}.${arnParts[5]}`;
        return new ResolverHotswapOperation(resolverName, sdkCompatibleResourceProperties);
    }
    else {
        return new FunctionHotswapOperation(resourcePhysicalName, sdkCompatibleResourceProperties);
    }
}
exports.isHotswappableAppSyncChange = isHotswappableAppSyncChange;
class ResolverHotswapOperation {
    constructor(resolverName, updateResolverRequest) {
        this.updateResolverRequest = updateResolverRequest;
        this.service = 'appsync';
        this.resourceNames = [`AppSync resolver '${resolverName}'`];
    }
    async apply(sdk) {
        return sdk.appsync().updateResolver(this.updateResolverRequest).promise();
    }
}
class FunctionHotswapOperation {
    constructor(functionName, updateFunctionRequest) {
        this.functionName = functionName;
        this.updateFunctionRequest = updateFunctionRequest;
        this.service = 'appsync';
        this.resourceNames = [`AppSync function '${functionName}'`];
    }
    async apply(sdk) {
        const { functions } = await sdk.appsync().listFunctions({ apiId: this.updateFunctionRequest.apiId }).promise();
        const { functionId } = functions?.find(fn => fn.name === this.functionName) ?? {};
        const request = {
            ...this.updateFunctionRequest,
            functionId: functionId,
        };
        return sdk.appsync().updateFunction(request).promise();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy1tYXBwaW5nLXRlbXBsYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHN5bmMtbWFwcGluZy10ZW1wbGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EscUNBQWlLO0FBRTFKLEtBQUssVUFBVSwyQkFBMkIsQ0FDL0MsU0FBaUIsRUFBRSxNQUFtQyxFQUFFLG1CQUFtRDtJQUUzRyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQztJQUNyRSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxxQ0FBcUMsQ0FBQztJQUVsRixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQzlCLE9BQU8sNEJBQW1CLENBQUMsd0JBQXdCLENBQUM7S0FDckQ7SUFFRCxLQUFLLE1BQU0sZUFBZSxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUU7UUFDcEQsSUFBSSxlQUFlLEtBQUssd0JBQXdCLElBQUksZUFBZSxLQUFLLHlCQUF5QixFQUFFO1lBQ2pHLE9BQU8sNEJBQW1CLENBQUMsd0JBQXdCLENBQUM7U0FDckQ7S0FDRjtJQUVELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDdEQsSUFBSSxVQUFVLElBQUksa0JBQWtCLEVBQUUsSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUN6RCwyREFBMkQ7UUFDM0QsdUVBQXVFO1FBQ3ZFLE9BQU8sNEJBQW1CLENBQUMsd0JBQXdCLENBQUM7S0FDckQ7SUFFRCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sbUJBQW1CLENBQUMsNkJBQTZCLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuSixJQUFJLENBQUMsb0JBQW9CLEVBQUU7UUFDekIsT0FBTyw0QkFBbUIsQ0FBQyx3QkFBd0IsQ0FBQztLQUNyRDtJQUVELE1BQU0sMkJBQTJCLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hHLE1BQU0sK0JBQStCLEdBQUcsNEJBQW1CLENBQUMsMkJBQTJCLEVBQUUsZ0NBQXVCLENBQUMsQ0FBQztJQUVsSCxJQUFJLFVBQVUsRUFBRTtRQUNkLG1EQUFtRDtRQUNuRCxzRkFBc0Y7UUFDdEYsbURBQW1EO1FBQ25ELE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRCxNQUFNLFlBQVksR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNyRCxPQUFPLElBQUksd0JBQXdCLENBQUMsWUFBWSxFQUFFLCtCQUErQixDQUFDLENBQUM7S0FDcEY7U0FBTTtRQUNMLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxvQkFBb0IsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQzVGO0FBQ0gsQ0FBQztBQXpDRCxrRUF5Q0M7QUFFRCxNQUFNLHdCQUF3QjtJQUk1QixZQUFZLFlBQW9CLEVBQW1CLHFCQUF3RDtRQUF4RCwwQkFBcUIsR0FBckIscUJBQXFCLENBQW1DO1FBSDNGLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFJakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLHFCQUFxQixZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQVM7UUFDMUIsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVFLENBQUM7Q0FDRjtBQUVELE1BQU0sd0JBQXdCO0lBSTVCLFlBQ21CLFlBQW9CLEVBQ3BCLHFCQUE0RTtRQUQ1RSxpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVEO1FBTC9FLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFPakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLHFCQUFxQixZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQVM7UUFDMUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvRyxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsRixNQUFNLE9BQU8sR0FBRztZQUNkLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjtZQUM3QixVQUFVLEVBQUUsVUFBVztTQUN4QixDQUFDO1FBQ0YsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuLi9hd3MtYXV0aCc7XG5pbXBvcnQgeyBFdmFsdWF0ZUNsb3VkRm9ybWF0aW9uVGVtcGxhdGUgfSBmcm9tICcuLi9ldmFsdWF0ZS1jbG91ZGZvcm1hdGlvbi10ZW1wbGF0ZSc7XG5pbXBvcnQgeyBDaGFuZ2VIb3Rzd2FwSW1wYWN0LCBDaGFuZ2VIb3Rzd2FwUmVzdWx0LCBIb3Rzd2FwT3BlcmF0aW9uLCBIb3Rzd2FwcGFibGVDaGFuZ2VDYW5kaWRhdGUsIGxvd2VyQ2FzZUZpcnN0Q2hhcmFjdGVyLCB0cmFuc2Zvcm1PYmplY3RLZXlzIH0gZnJvbSAnLi9jb21tb24nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNIb3Rzd2FwcGFibGVBcHBTeW5jQ2hhbmdlKFxuICBsb2dpY2FsSWQ6IHN0cmluZywgY2hhbmdlOiBIb3Rzd2FwcGFibGVDaGFuZ2VDYW5kaWRhdGUsIGV2YWx1YXRlQ2ZuVGVtcGxhdGU6IEV2YWx1YXRlQ2xvdWRGb3JtYXRpb25UZW1wbGF0ZSxcbik6IFByb21pc2U8Q2hhbmdlSG90c3dhcFJlc3VsdD4ge1xuICBjb25zdCBpc1Jlc29sdmVyID0gY2hhbmdlLm5ld1ZhbHVlLlR5cGUgPT09ICdBV1M6OkFwcFN5bmM6OlJlc29sdmVyJztcbiAgY29uc3QgaXNGdW5jdGlvbiA9IGNoYW5nZS5uZXdWYWx1ZS5UeXBlID09PSAnQVdTOjpBcHBTeW5jOjpGdW5jdGlvbkNvbmZpZ3VyYXRpb24nO1xuXG4gIGlmICghaXNSZXNvbHZlciAmJiAhaXNGdW5jdGlvbikge1xuICAgIHJldHVybiBDaGFuZ2VIb3Rzd2FwSW1wYWN0LlJFUVVJUkVTX0ZVTExfREVQTE9ZTUVOVDtcbiAgfVxuXG4gIGZvciAoY29uc3QgdXBkYXRlZFByb3BOYW1lIGluIGNoYW5nZS5wcm9wZXJ0eVVwZGF0ZXMpIHtcbiAgICBpZiAodXBkYXRlZFByb3BOYW1lICE9PSAnUmVxdWVzdE1hcHBpbmdUZW1wbGF0ZScgJiYgdXBkYXRlZFByb3BOYW1lICE9PSAnUmVzcG9uc2VNYXBwaW5nVGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gQ2hhbmdlSG90c3dhcEltcGFjdC5SRVFVSVJFU19GVUxMX0RFUExPWU1FTlQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcmVzb3VyY2VQcm9wZXJ0aWVzID0gY2hhbmdlLm5ld1ZhbHVlLlByb3BlcnRpZXM7XG4gIGlmIChpc1Jlc29sdmVyICYmIHJlc291cmNlUHJvcGVydGllcz8uS2luZCA9PT0gJ1BJUEVMSU5FJykge1xuICAgIC8vIFBpcGVsaW5lIHJlc29sdmVycyBjYW4ndCBiZSBob3Rzd2FwcGVkIGFzIHRoZXkgcmVmZXJlbmNlXG4gICAgLy8gdGhlIEZ1bmN0aW9uSWQgb2YgdGhlIHVuZGVybHlpbmcgZnVuY3Rpb25zLCB3aGljaCBjYW4ndCBiZSByZXNvbHZlZC5cbiAgICByZXR1cm4gQ2hhbmdlSG90c3dhcEltcGFjdC5SRVFVSVJFU19GVUxMX0RFUExPWU1FTlQ7XG4gIH1cblxuICBjb25zdCByZXNvdXJjZVBoeXNpY2FsTmFtZSA9IGF3YWl0IGV2YWx1YXRlQ2ZuVGVtcGxhdGUuZXN0YWJsaXNoUmVzb3VyY2VQaHlzaWNhbE5hbWUobG9naWNhbElkLCBpc0Z1bmN0aW9uID8gcmVzb3VyY2VQcm9wZXJ0aWVzPy5OYW1lIDogdW5kZWZpbmVkKTtcbiAgaWYgKCFyZXNvdXJjZVBoeXNpY2FsTmFtZSkge1xuICAgIHJldHVybiBDaGFuZ2VIb3Rzd2FwSW1wYWN0LlJFUVVJUkVTX0ZVTExfREVQTE9ZTUVOVDtcbiAgfVxuXG4gIGNvbnN0IGV2YWx1YXRlZFJlc291cmNlUHJvcGVydGllcyA9IGF3YWl0IGV2YWx1YXRlQ2ZuVGVtcGxhdGUuZXZhbHVhdGVDZm5FeHByZXNzaW9uKHJlc291cmNlUHJvcGVydGllcyk7XG4gIGNvbnN0IHNka0NvbXBhdGlibGVSZXNvdXJjZVByb3BlcnRpZXMgPSB0cmFuc2Zvcm1PYmplY3RLZXlzKGV2YWx1YXRlZFJlc291cmNlUHJvcGVydGllcywgbG93ZXJDYXNlRmlyc3RDaGFyYWN0ZXIpO1xuXG4gIGlmIChpc1Jlc29sdmVyKSB7XG4gICAgLy8gUmVzb2x2ZXIgcGh5c2ljYWwgbmFtZSBpcyB0aGUgQVJOIGluIHRoZSBmb3JtYXQ6XG4gICAgLy8gYXJuOmF3czphcHBzeW5jOnVzLWVhc3QtMToxMTExMTExMTExMTE6YXBpcy88YXBpSWQ+L3R5cGVzLzx0eXBlPi9yZXNvbHZlcnMvPGZpZWxkPi5cbiAgICAvLyBXZSdsbCB1c2UgYDx0eXBlPi48ZmllbGQ+YCBhcyB0aGUgcmVzb2x2ZXIgbmFtZS5cbiAgICBjb25zdCBhcm5QYXJ0cyA9IHJlc291cmNlUGh5c2ljYWxOYW1lLnNwbGl0KCcvJyk7XG4gICAgY29uc3QgcmVzb2x2ZXJOYW1lID0gYCR7YXJuUGFydHNbM119LiR7YXJuUGFydHNbNV19YDtcbiAgICByZXR1cm4gbmV3IFJlc29sdmVySG90c3dhcE9wZXJhdGlvbihyZXNvbHZlck5hbWUsIHNka0NvbXBhdGlibGVSZXNvdXJjZVByb3BlcnRpZXMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb25Ib3Rzd2FwT3BlcmF0aW9uKHJlc291cmNlUGh5c2ljYWxOYW1lLCBzZGtDb21wYXRpYmxlUmVzb3VyY2VQcm9wZXJ0aWVzKTtcbiAgfVxufVxuXG5jbGFzcyBSZXNvbHZlckhvdHN3YXBPcGVyYXRpb24gaW1wbGVtZW50cyBIb3Rzd2FwT3BlcmF0aW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IHNlcnZpY2UgPSAnYXBwc3luYydcbiAgcHVibGljIHJlYWRvbmx5IHJlc291cmNlTmFtZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHJlc29sdmVyTmFtZTogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHVwZGF0ZVJlc29sdmVyUmVxdWVzdDogQVdTLkFwcFN5bmMuVXBkYXRlUmVzb2x2ZXJSZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXNvdXJjZU5hbWVzID0gW2BBcHBTeW5jIHJlc29sdmVyICcke3Jlc29sdmVyTmFtZX0nYF07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYXBwbHkoc2RrOiBJU0RLKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gc2RrLmFwcHN5bmMoKS51cGRhdGVSZXNvbHZlcih0aGlzLnVwZGF0ZVJlc29sdmVyUmVxdWVzdCkucHJvbWlzZSgpO1xuICB9XG59XG5cbmNsYXNzIEZ1bmN0aW9uSG90c3dhcE9wZXJhdGlvbiBpbXBsZW1lbnRzIEhvdHN3YXBPcGVyYXRpb24ge1xuICBwdWJsaWMgcmVhZG9ubHkgc2VydmljZSA9ICdhcHBzeW5jJ1xuICBwdWJsaWMgcmVhZG9ubHkgcmVzb3VyY2VOYW1lczogc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBmdW5jdGlvbk5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVwZGF0ZUZ1bmN0aW9uUmVxdWVzdDogT21pdDxBV1MuQXBwU3luYy5VcGRhdGVGdW5jdGlvblJlcXVlc3QsICdmdW5jdGlvbklkJz4sXG4gICkge1xuICAgIHRoaXMucmVzb3VyY2VOYW1lcyA9IFtgQXBwU3luYyBmdW5jdGlvbiAnJHtmdW5jdGlvbk5hbWV9J2BdO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGFwcGx5KHNkazogSVNESyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyBmdW5jdGlvbnMgfSA9IGF3YWl0IHNkay5hcHBzeW5jKCkubGlzdEZ1bmN0aW9ucyh7IGFwaUlkOiB0aGlzLnVwZGF0ZUZ1bmN0aW9uUmVxdWVzdC5hcGlJZCB9KS5wcm9taXNlKCk7XG4gICAgY29uc3QgeyBmdW5jdGlvbklkIH0gPSBmdW5jdGlvbnM/LmZpbmQoZm4gPT4gZm4ubmFtZSA9PT0gdGhpcy5mdW5jdGlvbk5hbWUpID8/IHt9O1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAuLi50aGlzLnVwZGF0ZUZ1bmN0aW9uUmVxdWVzdCxcbiAgICAgIGZ1bmN0aW9uSWQ6IGZ1bmN0aW9uSWQhLFxuICAgIH07XG4gICAgcmV0dXJuIHNkay5hcHBzeW5jKCkudXBkYXRlRnVuY3Rpb24ocmVxdWVzdCkucHJvbWlzZSgpO1xuICB9XG59XG4iXX0=