"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.realHandler = void 0;
const chalk = require("chalk");
const minimatch = require("minimatch");
const version = require("../../lib/version");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const util_1 = require("../util");
async function realHandler(options) {
    const { configuration, args } = options;
    if (args.clear) {
        configuration.context.clear();
        await configuration.saveContext();
        logging_1.print('All context values cleared.');
    }
    else if (args.reset) {
        invalidateContext(configuration.context, args.reset, args.force);
        await configuration.saveContext();
    }
    else {
        // List -- support '--json' flag
        if (args.json) {
            const contextValues = configuration.context.all;
            process.stdout.write(JSON.stringify(contextValues, undefined, 2));
        }
        else {
            listContext(configuration.context);
        }
    }
    await version.displayVersionMessage();
    return 0;
}
exports.realHandler = realHandler;
function listContext(context) {
    const keys = contextKeys(context);
    if (keys.length === 0) {
        logging_1.print('This CDK application does not have any saved context values yet.');
        logging_1.print('');
        logging_1.print('Context will automatically be saved when you synthesize CDK apps');
        logging_1.print('that use environment context information like AZ information, VPCs,');
        logging_1.print('SSM parameters, and so on.');
        return;
    }
    // Print config by default
    const data = [[chalk.green('#'), chalk.green('Key'), chalk.green('Value')]];
    for (const [i, key] of keys) {
        const jsonWithoutNewlines = JSON.stringify(context.all[key], undefined, 2).replace(/\s+/g, ' ');
        data.push([i, key, jsonWithoutNewlines]);
    }
    logging_1.print('Context found in %s:', chalk.blue(settings_1.PROJECT_CONFIG));
    logging_1.print('');
    logging_1.print(util_1.renderTable(data, process.stdout.columns));
    // eslint-disable-next-line max-len
    logging_1.print(`Run ${chalk.blue('cdk context --reset KEY_OR_NUMBER')} to remove a context key. It will be refreshed on the next CDK synthesis run.`);
}
function invalidateContext(context, key, force) {
    const i = parseInt(key, 10);
    if (`${i}` === key) {
        // was a number and we fully parsed it.
        key = keyByNumber(context, i);
    }
    // Unset!
    if (context.has(key)) {
        context.unset(key);
        // check if the value was actually unset.
        if (!context.has(key)) {
            logging_1.print('Context value %s reset. It will be refreshed on next synthesis', chalk.blue(key));
            return;
        }
        // Value must be in readonly bag
        logging_1.error('Only context values specified in %s can be reset through the CLI', chalk.blue(settings_1.PROJECT_CONTEXT));
        if (!force) {
            throw new Error(`Cannot reset readonly context value with key: ${key}`);
        }
    }
    // check if value is expression matching keys
    const matches = keysByExpression(context, key);
    if (matches.length > 0) {
        matches.forEach((match) => {
            context.unset(match);
        });
        const { unset, readonly } = getUnsetAndReadonly(context, matches);
        // output the reset values
        printUnset(unset);
        // warn about values not reset
        printReadonly(readonly);
        // throw when none of the matches were reset
        if (!force && unset.length === 0) {
            throw new Error('None of the matched context values could be reset');
        }
        return;
    }
    if (!force) {
        throw new Error(`No context value matching key: ${key}`);
    }
}
function printUnset(unset) {
    if (unset.length === 0)
        return;
    logging_1.print('The following matched context values reset. They will be refreshed on next synthesis');
    unset.forEach((match) => {
        logging_1.print('  %s', match);
    });
}
function printReadonly(readonly) {
    if (readonly.length === 0)
        return;
    logging_1.warning('The following matched context values could not be reset through the CLI');
    readonly.forEach((match) => {
        logging_1.print('  %s', match);
    });
    logging_1.print('');
    logging_1.print('This usually means they are configured in %s or %s', chalk.blue(settings_1.PROJECT_CONFIG), chalk.blue(settings_1.USER_DEFAULTS));
}
function keysByExpression(context, expression) {
    return context.keys.filter(minimatch.filter(expression));
}
function getUnsetAndReadonly(context, matches) {
    return matches.reduce((acc, match) => {
        if (context.has(match)) {
            acc.readonly.push(match);
        }
        else {
            acc.unset.push(match);
        }
        return acc;
    }, { unset: [], readonly: [] });
}
function keyByNumber(context, n) {
    for (const [i, key] of contextKeys(context)) {
        if (n === i) {
            return key;
        }
    }
    throw new Error(`No context key with number: ${n}`);
}
/**
 * Return enumerated keys in a definitive order
 */
function contextKeys(context) {
    const keys = context.keys;
    keys.sort();
    return enumerate1(keys);
}
function enumerate1(xs) {
    const ret = new Array();
    let i = 1;
    for (const x of xs) {
        ret.push([i, x]);
        i += 1;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,