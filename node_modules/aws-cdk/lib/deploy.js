"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployStacks = void 0;
const p_queue_1 = require("p-queue");
exports.deployStacks = async (stacks, { concurrency, deployStack }) => {
    const queue = new p_queue_1.default({ concurrency });
    const deploymentStates = stacks.reduce((acc, stack) => ({ ...acc, [stack.id]: 'pending' }), {});
    const isStackUnblocked = (stack) => stack.dependencies
        .map(({ id }) => id)
        .filter((id) => !id.endsWith('.assets'))
        .every((id) => !deploymentStates[id] || deploymentStates[id] === 'completed'); // Dependency not selected or already finished
    const hasAnyStackFailed = (states) => Object.values(states).includes('failed');
    const deploymentErrors = [];
    const enqueueStackDeploys = () => {
        stacks.forEach(async (stack) => {
            if (deploymentStates[stack.id] === 'pending' && isStackUnblocked(stack)) {
                deploymentStates[stack.id] = 'queued';
                await queue.add(async () => {
                    // Do not start new deployments if any has already failed
                    if (hasAnyStackFailed(deploymentStates)) {
                        deploymentStates[stack.id] = 'skipped';
                        return;
                    }
                    deploymentStates[stack.id] = 'deploying';
                    await deployStack(stack).catch((err) => {
                        // By recording the failure immediately as the queued task exits, we prevent the next
                        // queued task from starting (its 'hasAnyStackFailed' will return 'true').
                        deploymentStates[stack.id] = 'failed';
                        throw err;
                    });
                    deploymentStates[stack.id] = 'completed';
                    enqueueStackDeploys();
                }).catch((err) => {
                    deploymentStates[stack.id] = 'failed';
                    deploymentErrors.push(err);
                });
            }
        });
    };
    enqueueStackDeploys();
    await queue.onIdle();
    if (deploymentErrors.length) {
        throw Error(`Stack Deployments Failed: ${deploymentErrors}`);
    }
    // We shouldn't be able to get here, but check it anyway
    const neverUnblocked = Object.entries(deploymentStates).filter(([_, s]) => s === 'pending').map(([n, _]) => n);
    if (neverUnblocked.length > 0) {
        throw new Error(`The following stacks never became unblocked: ${neverUnblocked.join(', ')}. Please report this at https://github.com/aws/aws-cdk/issues`);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUE2QjtBQVNoQixRQUFBLFlBQVksR0FBRyxLQUFLLEVBQUUsTUFBMkMsRUFBRSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQVcsRUFBaUIsRUFBRTtJQUN0SSxNQUFNLEtBQUssR0FBRyxJQUFJLGlCQUFNLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFrQixFQUFFLENBQUMsRUFBRSxFQUFxQyxDQUFDLENBQUM7SUFFNUksTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQXdDLEVBQUUsRUFBRSxDQUNwRSxLQUFLLENBQUMsWUFBWTtTQUNmLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNuQixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN2QyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7SUFFakksTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQXVDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWhILE1BQU0sZ0JBQWdCLEdBQVksRUFBRSxDQUFDO0lBRXJDLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxFQUFFO1FBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzdCLElBQUksZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdkUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztnQkFFdEMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFO29CQUN6Qix5REFBeUQ7b0JBQ3pELElBQUksaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTt3QkFDdkMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQzt3QkFDdkMsT0FBTztxQkFDUjtvQkFFRCxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO29CQUV6QyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTt3QkFDckMscUZBQXFGO3dCQUNyRiwwRUFBMEU7d0JBQzFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7d0JBQ3RDLE1BQU0sR0FBRyxDQUFDO29CQUNaLENBQUMsQ0FBQyxDQUFDO29CQUVILGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUM7b0JBQ3pDLG1CQUFtQixFQUFFLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUNmLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7b0JBQ3RDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0IsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsbUJBQW1CLEVBQUUsQ0FBQztJQUV0QixNQUFNLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVyQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtRQUMzQixNQUFNLEtBQUssQ0FBQyw2QkFBNkIsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0tBQzlEO0lBRUQsd0RBQXdEO0lBQ3hELE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLCtEQUErRCxDQUFDLENBQUM7S0FDM0o7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0IFBRdWV1ZSBmcm9tICdwLXF1ZXVlJztcblxudHlwZSBPcHRpb25zID0ge1xuICBjb25jdXJyZW5jeTogbnVtYmVyO1xuICBkZXBsb3lTdGFjazogKHN0YWNrOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QpID0+IFByb21pc2U8dm9pZD47XG59O1xuXG50eXBlIERlcGxveW1lbnRTdGF0ZSA9ICdwZW5kaW5nJyB8ICdxdWV1ZWQnIHwgJ2RlcGxveWluZycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnIHwgJ3NraXBwZWQnO1xuXG5leHBvcnQgY29uc3QgZGVwbG95U3RhY2tzID0gYXN5bmMgKHN0YWNrczogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0W10sIHsgY29uY3VycmVuY3ksIGRlcGxveVN0YWNrIH06IE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgcXVldWUgPSBuZXcgUFF1ZXVlKHsgY29uY3VycmVuY3kgfSk7XG4gIGNvbnN0IGRlcGxveW1lbnRTdGF0ZXMgPSBzdGFja3MucmVkdWNlKChhY2MsIHN0YWNrKSA9PiAoeyAuLi5hY2MsIFtzdGFjay5pZF06ICdwZW5kaW5nJyBhcyBjb25zdCB9KSwge30gYXMgUmVjb3JkPHN0cmluZywgRGVwbG95bWVudFN0YXRlPik7XG5cbiAgY29uc3QgaXNTdGFja1VuYmxvY2tlZCA9IChzdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KSA9PlxuICAgIHN0YWNrLmRlcGVuZGVuY2llc1xuICAgICAgLm1hcCgoeyBpZCB9KSA9PiBpZClcbiAgICAgIC5maWx0ZXIoKGlkKSA9PiAhaWQuZW5kc1dpdGgoJy5hc3NldHMnKSlcbiAgICAgIC5ldmVyeSgoaWQpID0+ICFkZXBsb3ltZW50U3RhdGVzW2lkXSB8fCBkZXBsb3ltZW50U3RhdGVzW2lkXSA9PT0gJ2NvbXBsZXRlZCcpOyAvLyBEZXBlbmRlbmN5IG5vdCBzZWxlY3RlZCBvciBhbHJlYWR5IGZpbmlzaGVkXG5cbiAgY29uc3QgaGFzQW55U3RhY2tGYWlsZWQgPSAoc3RhdGVzOiBSZWNvcmQ8c3RyaW5nLCBEZXBsb3ltZW50U3RhdGU+KSA9PiBPYmplY3QudmFsdWVzKHN0YXRlcykuaW5jbHVkZXMoJ2ZhaWxlZCcpO1xuXG4gIGNvbnN0IGRlcGxveW1lbnRFcnJvcnM6IEVycm9yW10gPSBbXTtcblxuICBjb25zdCBlbnF1ZXVlU3RhY2tEZXBsb3lzID0gKCkgPT4ge1xuICAgIHN0YWNrcy5mb3JFYWNoKGFzeW5jIChzdGFjaykgPT4ge1xuICAgICAgaWYgKGRlcGxveW1lbnRTdGF0ZXNbc3RhY2suaWRdID09PSAncGVuZGluZycgJiYgaXNTdGFja1VuYmxvY2tlZChzdGFjaykpIHtcbiAgICAgICAgZGVwbG95bWVudFN0YXRlc1tzdGFjay5pZF0gPSAncXVldWVkJztcblxuICAgICAgICBhd2FpdCBxdWV1ZS5hZGQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIC8vIERvIG5vdCBzdGFydCBuZXcgZGVwbG95bWVudHMgaWYgYW55IGhhcyBhbHJlYWR5IGZhaWxlZFxuICAgICAgICAgIGlmIChoYXNBbnlTdGFja0ZhaWxlZChkZXBsb3ltZW50U3RhdGVzKSkge1xuICAgICAgICAgICAgZGVwbG95bWVudFN0YXRlc1tzdGFjay5pZF0gPSAnc2tpcHBlZCc7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVwbG95bWVudFN0YXRlc1tzdGFjay5pZF0gPSAnZGVwbG95aW5nJztcblxuICAgICAgICAgIGF3YWl0IGRlcGxveVN0YWNrKHN0YWNrKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAvLyBCeSByZWNvcmRpbmcgdGhlIGZhaWx1cmUgaW1tZWRpYXRlbHkgYXMgdGhlIHF1ZXVlZCB0YXNrIGV4aXRzLCB3ZSBwcmV2ZW50IHRoZSBuZXh0XG4gICAgICAgICAgICAvLyBxdWV1ZWQgdGFzayBmcm9tIHN0YXJ0aW5nIChpdHMgJ2hhc0FueVN0YWNrRmFpbGVkJyB3aWxsIHJldHVybiAndHJ1ZScpLlxuICAgICAgICAgICAgZGVwbG95bWVudFN0YXRlc1tzdGFjay5pZF0gPSAnZmFpbGVkJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGRlcGxveW1lbnRTdGF0ZXNbc3RhY2suaWRdID0gJ2NvbXBsZXRlZCc7XG4gICAgICAgICAgZW5xdWV1ZVN0YWNrRGVwbG95cygpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgZGVwbG95bWVudFN0YXRlc1tzdGFjay5pZF0gPSAnZmFpbGVkJztcbiAgICAgICAgICBkZXBsb3ltZW50RXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgZW5xdWV1ZVN0YWNrRGVwbG95cygpO1xuXG4gIGF3YWl0IHF1ZXVlLm9uSWRsZSgpO1xuXG4gIGlmIChkZXBsb3ltZW50RXJyb3JzLmxlbmd0aCkge1xuICAgIHRocm93IEVycm9yKGBTdGFjayBEZXBsb3ltZW50cyBGYWlsZWQ6ICR7ZGVwbG95bWVudEVycm9yc31gKTtcbiAgfVxuXG4gIC8vIFdlIHNob3VsZG4ndCBiZSBhYmxlIHRvIGdldCBoZXJlLCBidXQgY2hlY2sgaXQgYW55d2F5XG4gIGNvbnN0IG5ldmVyVW5ibG9ja2VkID0gT2JqZWN0LmVudHJpZXMoZGVwbG95bWVudFN0YXRlcykuZmlsdGVyKChbXywgc10pID0+IHMgPT09ICdwZW5kaW5nJykubWFwKChbbiwgX10pID0+IG4pO1xuICBpZiAobmV2ZXJVbmJsb2NrZWQubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZvbGxvd2luZyBzdGFja3MgbmV2ZXIgYmVjYW1lIHVuYmxvY2tlZDogJHtuZXZlclVuYmxvY2tlZC5qb2luKCcsICcpfS4gUGxlYXNlIHJlcG9ydCB0aGlzIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLWNkay9pc3N1ZXNgKTtcbiAgfVxufTtcbiJdfQ==