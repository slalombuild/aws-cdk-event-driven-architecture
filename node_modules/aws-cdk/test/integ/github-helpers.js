"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = require("@octokit/rest");
const semver = require("semver");
module.exports.fetchPreviousVersion = async function (base) {
    const token = process.env.GITHUB_TOKEN;
    if (!token) {
        throw new Error('GITHUB_TOKEN must be set');
    }
    const github = new rest_1.Octokit({ auth: token });
    const releases = await github.repos.listReleases({
        owner: 'aws',
        repo: 'aws-cdk',
    });
    // this returns a list in descending order, newest releases first
    // opts for same major version where possible, falling back otherwise
    // to previous major versions.
    let previousMVRelease = undefined;
    for (const release of releases.data) {
        const version = release.name?.replace('v', '');
        if (version && semver.lt(version, base)) {
            if (semver.major(version) === semver.major(base)) {
                return version;
            }
            else if (!previousMVRelease) {
                previousMVRelease = version;
            }
        }
    }
    if (previousMVRelease) {
        return previousMVRelease;
    }
    throw new Error(`Unable to find previous version of ${base}`);
};
// eslint-disable-next-line @typescript-eslint/no-require-imports
require('make-runnable/custom')({
    printOutputFrame: false,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnaXRodWItaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4QyxpQ0FBaUM7QUFFakMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLFdBQVUsSUFBWTtJQUMvRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUN2QyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQy9DLEtBQUssRUFBRSxLQUFLO1FBQ1osSUFBSSxFQUFFLFNBQVM7S0FDaEIsQ0FBQyxDQUFDO0lBRUgsaUVBQWlFO0lBQ2pFLHFFQUFxRTtJQUNyRSw4QkFBOEI7SUFDOUIsSUFBSSxpQkFBaUIsR0FBRyxTQUFTLENBQUM7SUFDbEMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ25DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRTtZQUN2QyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEQsT0FBTyxPQUFPLENBQUM7YUFDaEI7aUJBQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUM3QixpQkFBaUIsR0FBRyxPQUFPLENBQUM7YUFDN0I7U0FDRjtLQUNGO0lBQ0QsSUFBSSxpQkFBaUIsRUFBRTtRQUFFLE9BQU8saUJBQWlCLENBQUM7S0FBRTtJQUVwRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hFLENBQUMsQ0FBQztBQUVGLGlFQUFpRTtBQUNqRSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM5QixnQkFBZ0IsRUFBRSxLQUFLO0NBQ3hCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9jdG9raXQgfSBmcm9tICdAb2N0b2tpdC9yZXN0JztcbmltcG9ydCAqIGFzIHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5tb2R1bGUuZXhwb3J0cy5mZXRjaFByZXZpb3VzVmVyc2lvbiA9IGFzeW5jIGZ1bmN0aW9uKGJhc2U6IHN0cmluZykge1xuICBjb25zdCB0b2tlbiA9IHByb2Nlc3MuZW52LkdJVEhVQl9UT0tFTjtcbiAgaWYgKCF0b2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignR0lUSFVCX1RPS0VOIG11c3QgYmUgc2V0Jyk7XG4gIH1cblxuICBjb25zdCBnaXRodWIgPSBuZXcgT2N0b2tpdCh7IGF1dGg6IHRva2VuIH0pO1xuICBjb25zdCByZWxlYXNlcyA9IGF3YWl0IGdpdGh1Yi5yZXBvcy5saXN0UmVsZWFzZXMoe1xuICAgIG93bmVyOiAnYXdzJyxcbiAgICByZXBvOiAnYXdzLWNkaycsXG4gIH0pO1xuXG4gIC8vIHRoaXMgcmV0dXJucyBhIGxpc3QgaW4gZGVzY2VuZGluZyBvcmRlciwgbmV3ZXN0IHJlbGVhc2VzIGZpcnN0XG4gIC8vIG9wdHMgZm9yIHNhbWUgbWFqb3IgdmVyc2lvbiB3aGVyZSBwb3NzaWJsZSwgZmFsbGluZyBiYWNrIG90aGVyd2lzZVxuICAvLyB0byBwcmV2aW91cyBtYWpvciB2ZXJzaW9ucy5cbiAgbGV0IHByZXZpb3VzTVZSZWxlYXNlID0gdW5kZWZpbmVkO1xuICBmb3IgKGNvbnN0IHJlbGVhc2Ugb2YgcmVsZWFzZXMuZGF0YSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSByZWxlYXNlLm5hbWU/LnJlcGxhY2UoJ3YnLCAnJyk7XG4gICAgaWYgKHZlcnNpb24gJiYgc2VtdmVyLmx0KHZlcnNpb24sIGJhc2UpKSB7XG4gICAgICBpZiAoc2VtdmVyLm1ham9yKHZlcnNpb24pID09PSBzZW12ZXIubWFqb3IoYmFzZSkpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2aW91c01WUmVsZWFzZSkge1xuICAgICAgICBwcmV2aW91c01WUmVsZWFzZSA9IHZlcnNpb247XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChwcmV2aW91c01WUmVsZWFzZSkgeyByZXR1cm4gcHJldmlvdXNNVlJlbGVhc2U7IH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIHByZXZpb3VzIHZlcnNpb24gb2YgJHtiYXNlfWApO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbnJlcXVpcmUoJ21ha2UtcnVubmFibGUvY3VzdG9tJykoe1xuICBwcmludE91dHB1dEZyYW1lOiBmYWxzZSxcbn0pO1xuIl19