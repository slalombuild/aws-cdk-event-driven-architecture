"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockToolkitInfo = void 0;
const api_1 = require("../../lib/api");
function mockLike() {
    return jest.fn();
}
class MockToolkitInfo extends api_1.ToolkitInfo {
    constructor(sdk, props = {}) {
        super(sdk);
        this.found = true;
        this.prepareEcrRepository = mockLike();
        this.bucketName = props.bucketName ?? 'MockToolkitBucketName';
        this.bucketUrl = props.bucketUrl ?? `https://${this.bucketName}.s3.amazonaws.com/`;
        this.version = props.version ?? 1;
        this._bootstrapStack = props.bootstrapStack;
    }
    get bootstrapStack() {
        if (!this._bootstrapStack) {
            throw new Error('Bootstrap stack object expected but not supplied to MockToolkitInfo');
        }
        return this._bootstrapStack;
    }
    async validateVersion(expectedVersion, ssmParameterName) {
        const version = ssmParameterName !== undefined ? await api_1.ToolkitInfo.versionFromSsmParameter(this.sdk, ssmParameterName) : this.version;
        if (expectedVersion > version) {
            throw new Error(`This CDK deployment requires bootstrap stack version '${expectedVersion}', found '${version}'. Please run 'cdk bootstrap' with a newer CLI version.`);
        }
    }
}
exports.MockToolkitInfo = MockToolkitInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay10b29sa2l0aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vY2stdG9vbGtpdGluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWtEO0FBVWxELFNBQVMsUUFBUTtJQUNmLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFhLGVBQWdCLFNBQVEsaUJBQVc7SUFTOUMsWUFBWSxHQUFTLEVBQUUsUUFBOEIsRUFBRTtRQUNyRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFURyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBSWIseUJBQW9CLEdBQUcsUUFBUSxFQUFxRCxDQUFDO1FBT25HLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsSUFBSSx1QkFBdUIsQ0FBQztRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLElBQUksV0FBVyxJQUFJLENBQUMsVUFBVSxvQkFBb0IsQ0FBQztRQUNuRixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztTQUN4RjtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxlQUF1QixFQUFFLGdCQUFvQztRQUN4RixNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0saUJBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEksSUFBSSxlQUFlLEdBQUcsT0FBTyxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELGVBQWUsYUFBYSxPQUFPLHlEQUF5RCxDQUFDLENBQUM7U0FDeEs7SUFDSCxDQUFDO0NBQ0Y7QUFoQ0QsMENBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNESywgVG9vbGtpdEluZm8gfSBmcm9tICcuLi8uLi9saWIvYXBpJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uU3RhY2sgfSBmcm9tICcuLi8uLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tUb29sa2l0SW5mb1Byb3BzIHtcbiAgcmVhZG9ubHkgYnVja2V0TmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgYnVja2V0VXJsPzogc3RyaW5nO1xuICByZWFkb25seSB2ZXJzaW9uPzogbnVtYmVyO1xuICByZWFkb25seSBib290c3RyYXBTdGFjaz86IENsb3VkRm9ybWF0aW9uU3RhY2s7XG59XG5cbmZ1bmN0aW9uIG1vY2tMaWtlPEEgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBhbnk+KCk6IGplc3QuTW9jazxSZXR1cm5UeXBlPEE+LCBQYXJhbWV0ZXJzPEE+PiB7XG4gIHJldHVybiBqZXN0LmZuKCk7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrVG9vbGtpdEluZm8gZXh0ZW5kcyBUb29sa2l0SW5mbyB7XG4gIHB1YmxpYyByZWFkb25seSBmb3VuZCA9IHRydWU7XG4gIHB1YmxpYyByZWFkb25seSBidWNrZXRVcmw6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHByZXBhcmVFY3JSZXBvc2l0b3J5ID0gbW9ja0xpa2U8dHlwZW9mIFRvb2xraXRJbmZvLnByb3RvdHlwZS5wcmVwYXJlRWNyUmVwb3NpdG9yeT4oKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9ib290c3RyYXBTdGFjaz86IENsb3VkRm9ybWF0aW9uU3RhY2s7XG5cbiAgY29uc3RydWN0b3Ioc2RrOiBJU0RLLCBwcm9wczogTW9ja1Rvb2xraXRJbmZvUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNkayk7XG5cbiAgICB0aGlzLmJ1Y2tldE5hbWUgPSBwcm9wcy5idWNrZXROYW1lID8/ICdNb2NrVG9vbGtpdEJ1Y2tldE5hbWUnO1xuICAgIHRoaXMuYnVja2V0VXJsID0gcHJvcHMuYnVja2V0VXJsID8/IGBodHRwczovLyR7dGhpcy5idWNrZXROYW1lfS5zMy5hbWF6b25hd3MuY29tL2A7XG4gICAgdGhpcy52ZXJzaW9uID0gcHJvcHMudmVyc2lvbiA/PyAxO1xuICAgIHRoaXMuX2Jvb3RzdHJhcFN0YWNrID0gcHJvcHMuYm9vdHN0cmFwU3RhY2s7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJvb3RzdHJhcFN0YWNrKCk6IENsb3VkRm9ybWF0aW9uU3RhY2sge1xuICAgIGlmICghdGhpcy5fYm9vdHN0cmFwU3RhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwIHN0YWNrIG9iamVjdCBleHBlY3RlZCBidXQgbm90IHN1cHBsaWVkIHRvIE1vY2tUb29sa2l0SW5mbycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYm9vdHN0cmFwU3RhY2s7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGVWZXJzaW9uKGV4cGVjdGVkVmVyc2lvbjogbnVtYmVyLCBzc21QYXJhbWV0ZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB2ZXJzaW9uID0gc3NtUGFyYW1ldGVyTmFtZSAhPT0gdW5kZWZpbmVkID8gYXdhaXQgVG9vbGtpdEluZm8udmVyc2lvbkZyb21Tc21QYXJhbWV0ZXIodGhpcy5zZGssIHNzbVBhcmFtZXRlck5hbWUpIDogdGhpcy52ZXJzaW9uO1xuXG4gICAgaWYgKGV4cGVjdGVkVmVyc2lvbiA+IHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhpcyBDREsgZGVwbG95bWVudCByZXF1aXJlcyBib290c3RyYXAgc3RhY2sgdmVyc2lvbiAnJHtleHBlY3RlZFZlcnNpb259JywgZm91bmQgJyR7dmVyc2lvbn0nLiBQbGVhc2UgcnVuICdjZGsgYm9vdHN0cmFwJyB3aXRoIGEgbmV3ZXIgQ0xJIHZlcnNpb24uYCk7XG4gICAgfVxuICB9XG59XG4iXX0=